
robot_6900_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007780  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080079a8  080079a8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a8  080079a8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080079b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001588  20000030  080079e0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  080079e0  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8e3  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033bb  00000000  00000000  0003a943  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  0003dd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001558  00000000  00000000  0003f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dda5  00000000  00000000  00040948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015e85  00000000  00000000  0005e6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae6f9  00000000  00000000  00074572  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122c6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006294  00000000  00000000  00122ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078f0 	.word	0x080078f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	080078f0 	.word	0x080078f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <default_process>:
#include "commands.h"

uint8_t default_process(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	

	return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <check_serial>:

uint8_t check_serial(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->Robot_State = Running;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	709a      	strb	r2, [r3, #2]

	h_robot6900->robot_state->status_update = 1;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	705a      	strb	r2, [r3, #1]
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <NVIC_command_parser_INT>:
 *
 * Fired each time the UART receives a byte command pck, and fill the command pipeline
 *
 */
void NVIC_command_parser_INT(UART_HandleTypeDef *huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	if(CMDs_buffer_size < MAX_COMMAND_STACK_SIZE)
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d817      	bhi.n	8000a86 <NVIC_command_parser_INT+0x42>
	{
		/* Fill pipeline and update ptr */
		CMDs_buffer[CMDs_buffer_size] = Rx_buffer;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <NVIC_command_parser_INT+0x54>)
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <NVIC_command_parser_INT+0x58>)
 8000a62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CMDs_buffer_size++;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a72:	701a      	strb	r2, [r3, #0]

		CMDs_buffer_full = 0;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <NVIC_command_parser_INT+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		// Reactivate receive on Interrupt on 1 byte
		HAL_UART_Receive_IT(huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <NVIC_command_parser_INT+0x58>)
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f005 ff4c 	bl	800691c <HAL_UART_Receive_IT>
	}
	else
	{
		CMDs_buffer_full = 1;
	}
}
 8000a84:	e002      	b.n	8000a8c <NVIC_command_parser_INT+0x48>
		CMDs_buffer_full = 1;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <NVIC_command_parser_INT+0x5c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000051 	.word	0x20000051
 8000a98:	200000a4 	.word	0x200000a4
 8000a9c:	2000004c 	.word	0x2000004c
 8000aa0:	20000052 	.word	0x20000052

08000aa4 <uart_init>:
############################################################################
*/

/* Initial the command parser */
void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef* hcrc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	// Initiate ptr
	_hcrc = hcrc;
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <uart_init+0x2c>)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6013      	str	r3, [r2, #0]
	_huart = huart;
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <uart_init+0x30>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]

	// Activate UART Receive Interrupt each 4 bytes received
	HAL_UART_Receive_IT(_huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <uart_init+0x30>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2205      	movs	r2, #5
 8000ac0:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <uart_init+0x34>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 ff2a 	bl	800691c <HAL_UART_Receive_IT>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000080 	.word	0x20000080
 8000ad4:	2000007c 	.word	0x2000007c
 8000ad8:	2000004c 	.word	0x2000004c

08000adc <cmd_parser_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR cmd_parser_process(ROBOT6900_HANDLER* h_robot6900)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	if(CMDs_buffer_size > 0)
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <cmd_parser_process+0x70>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <cmd_parser_process+0x1a>
	{
		current_state = GET_COMMAND;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <cmd_parser_process+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e002      	b.n	8000afc <cmd_parser_process+0x20>
	}
	else{
		current_state = WAIT;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <cmd_parser_process+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	// Full State Machine Call
	CMD_Parser_Log = (full_state_machine[current_state]).state_process(h_robot6900);
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <cmd_parser_process+0x74>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <cmd_parser_process+0x78>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	4798      	blx	r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b12:	701a      	strb	r2, [r3, #0]

	// Process Parser Logs
	if(CMDs_buffer_full == 1)
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <cmd_parser_process+0x80>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10d      	bne.n	8000b38 <cmd_parser_process+0x5c>
	{
		// As we process one command in the pipeline, it's no more full. Reactivate NVIC
		HAL_UART_Receive_IT(_huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <cmd_parser_process+0x84>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2205      	movs	r2, #5
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <cmd_parser_process+0x88>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 fef9 	bl	800691c <HAL_UART_Receive_IT>

		// Notify Pipeline is full
		CMD_Parser_Log |= PARSER_PIPELINE_FULL;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b36:	701a      	strb	r2, [r3, #0]
	}

	// Update Debug LED state regarding Parser state flags
	generate_parser_flag(h_robot6900);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f8ef 	bl	8000d1c <generate_parser_flag>

	return CMD_Parser_Log;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000051 	.word	0x20000051
 8000b50:	20000053 	.word	0x20000053
 8000b54:	08007918 	.word	0x08007918
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000052 	.word	0x20000052
 8000b60:	2000007c 	.word	0x2000007c
 8000b64:	2000004c 	.word	0x2000004c

08000b68 <get_command>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR get_command(ROBOT6900_HANDLER* h_robot6900)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000b70:	2301      	movs	r3, #1
 8000b72:	75fb      	strb	r3, [r7, #23]
	uint8_t* raw_packet = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
	CMD_PACKET cmd;
	uint8_t cmd_defined = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75bb      	strb	r3, [r7, #22]

	// Get oldest command in the queue
	raw_packet = CMDs_buffer[0];
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <get_command+0x8c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]

	// Check raw packet validity and create a cmd defined struct
	parser_log = command_integrity(raw_packet, &cmd);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	6938      	ldr	r0, [r7, #16]
 8000b8a:	f000 f837 	bl	8000bfc <command_integrity>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	75fb      	strb	r3, [r7, #23]

	// Search for command in the dispatch table
	if(parser_log == PARSER_OK)
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d120      	bne.n	8000bda <get_command+0x72>
	{
		// Looking if the command is defined
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	757b      	strb	r3, [r7, #21]
 8000b9c:	e015      	b.n	8000bca <get_command+0x62>
		{
			if(cmd.name == dispatch_table[i].name)
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	7d7b      	ldrb	r3, [r7, #21]
 8000ba2:	4915      	ldr	r1, [pc, #84]	; (8000bf8 <get_command+0x90>)
 8000ba4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d10b      	bne.n	8000bc4 <get_command+0x5c>
			{
				cmd_defined = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75bb      	strb	r3, [r7, #22]
				// Process command function
				dispatch_table[i].process(&cmd, h_robot6900);
 8000bb0:	7d7b      	ldrb	r3, [r7, #21]
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <get_command+0x90>)
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4798      	blx	r3
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000bc4:	7d7b      	ldrb	r3, [r7, #21]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	757b      	strb	r3, [r7, #21]
 8000bca:	7d7b      	ldrb	r3, [r7, #21]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d9e6      	bls.n	8000b9e <get_command+0x36>
			}
		}

		// Check if command was found
		if(!cmd_defined)
 8000bd0:	7dbb      	ldrb	r3, [r7, #22]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <get_command+0x72>
		{
			parser_log = PARSER_NO_CMD;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	75fb      	strb	r3, [r7, #23]
		}
	}

	// Remove command from the buffer and shift next one
	parser_log |= update_pipeline();
 8000bda:	f000 f853 	bl	8000c84 <update_pipeline>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	75fb      	strb	r3, [r7, #23]


	return parser_log;
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000a4 	.word	0x200000a4
 8000bf8:	08007908 	.word	0x08007908

08000bfc <command_integrity>:
 * Check command packet integrity (ID and CRC-8)
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR command_integrity(uint8_t* _raw_packet, CMD_PACKET* _cmd)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_buffer[2];

	// Avoid SoF byte
	_raw_packet+=1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]

	// Parse 32bits raw_data to the packet_structure.
	*(_cmd) = *(CMD_PACKET*)(_raw_packet);
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6013      	str	r3, [r2, #0]

	// Check Packet ID
	if(_cmd->ID != rx_last_ID + 1)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <command_integrity+0x80>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d002      	beq.n	8000c2e <command_integrity+0x32>
	{
		parser_log = PARSER_WRONG_ID;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e021      	b.n	8000c72 <command_integrity+0x76>
	}
	// Check CRC-8
	else
	{
		/* If ID right, update ID flag for next packet */
		if(_cmd->ID == 0xFF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d103      	bne.n	8000c3e <command_integrity+0x42>
		{
			rx_last_ID = 0;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <command_integrity+0x80>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e003      	b.n	8000c46 <command_integrity+0x4a>
		}
		else
		{
			rx_last_ID = _cmd->ID;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <command_integrity+0x80>)
 8000c44:	701a      	strb	r2, [r3, #0]
		}

		// Calculate 8bits CRC and check for validity
		crc_buffer[0] = _cmd->name;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	733b      	strb	r3, [r7, #12]
		crc_buffer[1] = _cmd->data;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	737b      	strb	r3, [r7, #13]
		if( (uint8_t)(HAL_CRC_Calculate(_hcrc, crc_buffer, 2)) != _cmd->crc)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <command_integrity+0x84>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fec7 	bl	80039f0 <HAL_CRC_Calculate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d001      	beq.n	8000c72 <command_integrity+0x76>
		{
			parser_log = PARSER_WRONG_CRC;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	73fb      	strb	r3, [r7, #15]
		/*
		 * Nothing if CRC wrong
		 */
	}

	return parser_log;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000054 	.word	0x20000054
 8000c80:	20000080 	.word	0x20000080

08000c84 <update_pipeline>:
 * index 0
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR update_pipeline()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	COMMANDS_PARSER_ERROR parser_log = PARSER_INIT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]

	// Disable NVIC Interrupt before process on pipeline
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000c8e:	2035      	movs	r0, #53	; 0x35
 8000c90:	f002 fe2f 	bl	80038f2 <HAL_NVIC_DisableIRQ>

	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	71bb      	strb	r3, [r7, #6]
 8000c98:	e00d      	b.n	8000cb6 <update_pipeline+0x32>
	{

		*(CMDs_buffer + i) = *(CMDs_buffer + i + 1);
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <update_pipeline+0x74>)
 8000ca2:	441a      	add	r2, r3
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <update_pipeline+0x74>)
 8000caa:	440b      	add	r3, r1
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <update_pipeline+0x78>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	79ba      	ldrb	r2, [r7, #6]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3eb      	bcc.n	8000c9a <update_pipeline+0x16>
	}

	if(CMDs_buffer_size - 1 >= 0)
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <update_pipeline+0x78>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db07      	blt.n	8000cde <update_pipeline+0x5a>
	{
		CMDs_buffer_size -= 1;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <update_pipeline+0x78>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <update_pipeline+0x78>)
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e004      	b.n	8000ce8 <update_pipeline+0x64>
	}
	else
	{
		parser_log = PARSER_UNKNOWN;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	71fb      	strb	r3, [r7, #7]
		CMDs_buffer_size = 0;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <update_pipeline+0x78>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	}

	// Enable NVIC Interrupt after critical process on pipeline
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ce8:	2035      	movs	r0, #53	; 0x35
 8000cea:	f002 fdf4 	bl	80038d6 <HAL_NVIC_EnableIRQ>

	return parser_log;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200000a4 	.word	0x200000a4
 8000cfc:	20000051 	.word	0x20000051

08000d00 <wait>:
 *
 * Nothing to do.
 *
 */
COMMANDS_PARSER_ERROR wait(ROBOT6900_HANDLER* h_robot6900)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return CMD_Parser_Log;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <wait+0x18>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20000000 	.word	0x20000000

08000d1c <generate_parser_flag>:

/*
 * Generate the Debug LEDs logics regarding global FSM state (COMMANDS_PARSER_ERROR)
 */
void generate_parser_flag(ROBOT6900_HANDLER* h_robot6900)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	static COMMANDS_PARSER_ERROR previous_log = PARSER_OK;

	// Do not change LEDs statues is parser's flags didn't change
	if(CMD_Parser_Log != previous_log)
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <generate_parser_flag+0xc8>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <generate_parser_flag+0xcc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d052      	beq.n	8000dd6 <generate_parser_flag+0xba>
	{
		h_robot6900->robot_state->debug_leds = ((CMD_Parser_Log & PARSER_OK) == 1 ? 0x00 : DB_LED3);
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <generate_parser_flag+0xc8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_NO_CMD) == PARSER_NO_CMD ? DB_LED7 : 0x00);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b25a      	sxtb	r2, r3
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <generate_parser_flag+0xc8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	105b      	asrs	r3, r3, #1
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_WRONG_ID) == PARSER_WRONG_ID || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED8 : 0x00);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <generate_parser_flag+0xc8>)
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	f002 0208 	and.w	r2, r2, #8
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	d105      	bne.n	8000d8a <generate_parser_flag+0x6e>
 8000d7e:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <generate_parser_flag+0xc8>)
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	f002 0210 	and.w	r2, r2, #16
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d001      	beq.n	8000d8e <generate_parser_flag+0x72>
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	e000      	b.n	8000d90 <generate_parser_flag+0x74>
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b25a      	sxtb	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_PIPELINE_FULL) == PARSER_PIPELINE_FULL || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED9 : 0x00);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <generate_parser_flag+0xc8>)
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	f002 0204 	and.w	r2, r2, #4
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d105      	bne.n	8000dbc <generate_parser_flag+0xa0>
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <generate_parser_flag+0xc8>)
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	f002 0210 	and.w	r2, r2, #16
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d001      	beq.n	8000dc0 <generate_parser_flag+0xa4>
 8000dbc:	2240      	movs	r2, #64	; 0x40
 8000dbe:	e000      	b.n	8000dc2 <generate_parser_flag+0xa6>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]

		// Update last parser's flag values
		previous_log = CMD_Parser_Log;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <generate_parser_flag+0xc8>)
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <generate_parser_flag+0xcc>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	}

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000001 	.word	0x20000001

08000dec <NVIC_RPlidar_INT>:
 *
 * NVIC routine is either reloaded in Simple INT mode or DMA mode, regarding
 * the DMA_Rx flag
 */
void NVIC_RPlidar_INT(UART_HandleTypeDef *huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	/* Switch DMA buffer */
	current_DMA_buffer = (current_DMA_buffer + 1) % RX_NBR_BUFFER;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <NVIC_RPlidar_INT+0x7c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <NVIC_RPlidar_INT+0x80>)
 8000dfc:	fb83 3102 	smull	r3, r1, r3, r2
 8000e00:	17d3      	asrs	r3, r2, #31
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	460b      	mov	r3, r1
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	440b      	add	r3, r1
 8000e0a:	1ad1      	subs	r1, r2, r3
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <NVIC_RPlidar_INT+0x7c>)
 8000e10:	701a      	strb	r2, [r3, #0]

	/* Set buffer ready to be process */
	buffer_ready = 1;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <NVIC_RPlidar_INT+0x84>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]


	if(DMA_Rx)
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <NVIC_RPlidar_INT+0x88>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00f      	beq.n	8000e40 <NVIC_RPlidar_INT+0x54>
	{
		/* Reload DMA process with new buffer */
		HAL_UART_Receive_DMA(_huart, RP_Rx_buffer[current_DMA_buffer], DMA_next_packet_size);
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <NVIC_RPlidar_INT+0x8c>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <NVIC_RPlidar_INT+0x7c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2354      	movs	r3, #84	; 0x54
 8000e2c:	fb03 f302 	mul.w	r3, r3, r2
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <NVIC_RPlidar_INT+0x90>)
 8000e32:	1899      	adds	r1, r3, r2
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <NVIC_RPlidar_INT+0x94>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f005 fdfd 	bl	8006a38 <HAL_UART_Receive_DMA>
	else
	{
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
	}

}
 8000e3e:	e00f      	b.n	8000e60 <NVIC_RPlidar_INT+0x74>
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <NVIC_RPlidar_INT+0x8c>)
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <NVIC_RPlidar_INT+0x7c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2354      	movs	r3, #84	; 0x54
 8000e4c:	fb03 f302 	mul.w	r3, r3, r2
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <NVIC_RPlidar_INT+0x90>)
 8000e52:	1899      	adds	r1, r3, r2
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <NVIC_RPlidar_INT+0x98>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f005 fd5e 	bl	800691c <HAL_UART_Receive_IT>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000055 	.word	0x20000055
 8000e6c:	55555556 	.word	0x55555556
 8000e70:	20000056 	.word	0x20000056
 8000e74:	20000057 	.word	0x20000057
 8000e78:	2000007c 	.word	0x2000007c
 8000e7c:	200000bc 	.word	0x200000bc
 8000e80:	2000005a 	.word	0x2000005a
 8000e84:	20000058 	.word	0x20000058

08000e88 <NVIC_Timout_1ms_INT>:
 * RP_lidar Timer interrupt for Timeout communication
 * and motor RPM calculation if enabled.
 *
 */
void NVIC_Timout_1ms_INT(TIM_HandleTypeDef* htim)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(RPM_init == 1)
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <NVIC_Timout_1ms_INT+0x3c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d107      	bne.n	8000ea8 <NVIC_Timout_1ms_INT+0x20>
	{
		RPM_cnt_1ms += 1;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <NVIC_Timout_1ms_INT+0x40>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <NVIC_Timout_1ms_INT+0x40>)
 8000ea4:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		RPlidar_timeout += 1;
	}
}
 8000ea6:	e006      	b.n	8000eb6 <NVIC_Timout_1ms_INT+0x2e>
		RPlidar_timeout += 1;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <NVIC_Timout_1ms_INT+0x44>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <NVIC_Timout_1ms_INT+0x44>)
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000060 	.word	0x20000060
 8000ec8:	20000062 	.word	0x20000062
 8000ecc:	2000005e 	.word	0x2000005e

08000ed0 <RPlidar_init>:
 *
 * Set RP_lidar FSM to initiate state.
 *
 */
void RPlidar_init(UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim7)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	// Initiate ptr
	_huart = huart;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <RPlidar_init+0x34>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
	_htim7 = htim7;
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <RPlidar_init+0x38>)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	6013      	str	r3, [r2, #0]

	// Disable Lidar motor
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f003 fa82 	bl	80043f8 <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_INIT;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <RPlidar_init+0x3c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000007c 	.word	0x2000007c
 8000f08:	200001b8 	.word	0x200001b8
 8000f0c:	2000005c 	.word	0x2000005c

08000f10 <RPlidar_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
RPLIDAR_ERROR RPlidar_process(ROBOT6900_HANDLER* h_robot6900)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	// Full State Machine Call
	RPlidar_Log = (RPlidar_FSM[RPlidar_current_state]).state_process(h_robot6900);
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <RPlidar_process+0x2c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <RPlidar_process+0x30>)
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	4798      	blx	r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <RPlidar_process+0x34>)
 8000f2e:	701a      	strb	r2, [r3, #0]

	return RPlidar_Log;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <RPlidar_process+0x34>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000005c 	.word	0x2000005c
 8000f40:	08007928 	.word	0x08007928
 8000f44:	2000005d 	.word	0x2000005d

08000f48 <init_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR init_state(ROBOT6900_HANDLER* h_robot6900)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	// Clear buffers
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e00d      	b.n	8000f72 <init_state+0x2a>
	{
		memset(RP_Rx_buffer[i], 0, RX_BUFFER_SIZE);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2254      	movs	r2, #84	; 0x54
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <init_state+0x68>)
 8000f60:	4413      	add	r3, r2
 8000f62:	2254      	movs	r2, #84	; 0x54
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f006 fcba 	bl	80078e0 <memset>
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d9ee      	bls.n	8000f56 <init_state+0xe>
	}

	buffer_ready = 0;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <init_state+0x6c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	current_DMA_buffer = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <init_state+0x70>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	RPlidar_timeout = 0;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <init_state+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	RPlidar_hard_failure_cnt = 0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <init_state+0x78>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

	// Enable Motor spinning
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f003 fa2d 	bl	80043f8 <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_GET_HEALTH;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <init_state+0x7c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]

	return RPlidar_Log;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <init_state+0x80>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000bc 	.word	0x200000bc
 8000fb4:	20000056 	.word	0x20000056
 8000fb8:	20000055 	.word	0x20000055
 8000fbc:	2000005e 	.word	0x2000005e
 8000fc0:	2000005f 	.word	0x2000005f
 8000fc4:	2000005c 	.word	0x2000005c
 8000fc8:	2000005d 	.word	0x2000005d

08000fcc <health_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR health_state(ROBOT6900_HANDLER* h_robot6900)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	static uint8_t health_process_step = 0;
	static uint8_t descriptor_received = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73bb      	strb	r3, [r7, #14]

	// health packet
	uint8_t health_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]

	// RPlidar status and error carried by the HEALTH descriptor
	uint8_t status = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	737b      	strb	r3, [r7, #13]
	uint16_t error_code = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	817b      	strh	r3, [r7, #10]

	/* First step of the state, just build the packet and send it */
	if(health_process_step == 0)
 8000fe4:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <health_state+0x1d4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d128      	bne.n	800103e <health_state+0x72>
	{
		// Build Health packet
		health_pck[0] = REQUEST_SoF;
 8000fec:	23a5      	movs	r3, #165	; 0xa5
 8000fee:	723b      	strb	r3, [r7, #8]
		health_pck[1] = RP_GET_HEALTH_CMD;
 8000ff0:	2352      	movs	r3, #82	; 0x52
 8000ff2:	727b      	strb	r3, [r7, #9]



		// Send GET_HEALTH pck
		while(uart_log != HAL_OK)
 8000ff4:	e00a      	b.n	800100c <health_state+0x40>
		{
			uart_log = HAL_UART_Transmit(_huart, health_pck, HEALTH_PCK_SIZE, 0xFFFF);
 8000ff6:	4b6b      	ldr	r3, [pc, #428]	; (80011a4 <health_state+0x1d8>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f107 0108 	add.w	r1, r7, #8
 8000ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001002:	2202      	movs	r2, #2
 8001004:	f005 fbf6 	bl	80067f4 <HAL_UART_Transmit>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f1      	bne.n	8000ff6 <health_state+0x2a>
		}

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 8001012:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <health_state+0x1d8>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <health_state+0x1dc>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	2354      	movs	r3, #84	; 0x54
 800101e:	fb03 f302 	mul.w	r3, r3, r2
 8001022:	4a62      	ldr	r2, [pc, #392]	; (80011ac <health_state+0x1e0>)
 8001024:	4413      	add	r3, r2
 8001026:	2207      	movs	r2, #7
 8001028:	4619      	mov	r1, r3
 800102a:	f005 fc77 	bl	800691c <HAL_UART_Receive_IT>

		// Prepare NEXT NVIC interurpt for response packet this time
		NVIC_Rx_next_size = HEALTH_RESPONSE_SIZE;
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <health_state+0x1e4>)
 8001030:	2203      	movs	r2, #3
 8001032:	701a      	strb	r2, [r3, #0]

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 8001034:	f000 fd20 	bl	8001a78 <RPlidar_start_timeout>

		health_process_step = 1;
 8001038:	4b59      	ldr	r3, [pc, #356]	; (80011a0 <health_state+0x1d4>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
	}

	/* Second step of the state, wait for lidar response and check for Timeout or Protection flag */
	if(health_process_step == 1)
 800103e:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <health_state+0x1d4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 80a0 	bne.w	8001188 <health_state+0x1bc>
	{
		// Read Descriptor response and Packet Response
		if(buffer_ready == 1)
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <health_state+0x1e8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	f040 808d 	bne.w	800116e <health_state+0x1a2>
		{
			// Read Packet Descriptor
			if(descriptor_received == 0)
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <health_state+0x1ec>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <health_state+0xa4>
			{
				// Read, check and save descriptor pck
				descriptor_received = RPlidar_get_descriptor_pck();
 800105c:	f000 fd92 	bl	8001b84 <RPlidar_get_descriptor_pck>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <health_state+0x1ec>)
 8001066:	701a      	strb	r2, [r3, #0]
				// Prepare NEXT NVIC interurpt for response packet this time
				NVIC_Rx_next_size = RESPONSE_DESCRIPTOR_SIZE;
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <health_state+0x1e4>)
 800106a:	2207      	movs	r2, #7
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e08b      	b.n	8001188 <health_state+0x1bc>
			}
			else
			{
				// Read 4th byte of the Health response descriptor, containing status description
				status = AVAILABLE_RX_BUFFER(0);
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <health_state+0x1dc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	1c99      	adds	r1, r3, #2
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <health_state+0x1f0>)
 8001078:	fb83 3201 	smull	r3, r2, r3, r1
 800107c:	17cb      	asrs	r3, r1, #31
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	1aca      	subs	r2, r1, r3
 8001088:	4948      	ldr	r1, [pc, #288]	; (80011ac <health_state+0x1e0>)
 800108a:	2354      	movs	r3, #84	; 0x54
 800108c:	fb03 f302 	mul.w	r3, r3, r2
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	737b      	strb	r3, [r7, #13]
				// Get error_code in case
				error_code = ((uint16_t)(AVAILABLE_RX_BUFFER(1)) << 8) + AVAILABLE_RX_BUFFER(2);
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <health_state+0x1dc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	1c99      	adds	r1, r3, #2
 800109c:	4b47      	ldr	r3, [pc, #284]	; (80011bc <health_state+0x1f0>)
 800109e:	fb83 3201 	smull	r3, r2, r3, r1
 80010a2:	17cb      	asrs	r3, r1, #31
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	493f      	ldr	r1, [pc, #252]	; (80011ac <health_state+0x1e0>)
 80010b0:	2354      	movs	r3, #84	; 0x54
 80010b2:	fb03 f302 	mul.w	r3, r3, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b298      	uxth	r0, r3
 80010c2:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <health_state+0x1dc>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	1c99      	adds	r1, r3, #2
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <health_state+0x1f0>)
 80010ca:	fb83 3201 	smull	r3, r2, r3, r1
 80010ce:	17cb      	asrs	r3, r1, #31
 80010d0:	1ad2      	subs	r2, r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	1aca      	subs	r2, r1, r3
 80010da:	4934      	ldr	r1, [pc, #208]	; (80011ac <health_state+0x1e0>)
 80010dc:	2354      	movs	r3, #84	; 0x54
 80010de:	fb03 f302 	mul.w	r3, r3, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	3302      	adds	r3, #2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4403      	add	r3, r0
 80010ec:	817b      	strh	r3, [r7, #10]

				buffer_ready = 0;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <health_state+0x1e8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

				// Check Protection error
				if(status == HEALTH_PROTECTION_ERR)
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d126      	bne.n	8001148 <health_state+0x17c>
				{
					RPlidar_hard_failure_cnt++;
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <health_state+0x1f4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <health_state+0x1f4>)
 8001104:	701a      	strb	r2, [r3, #0]
					if(RPlidar_hard_failure_cnt < HEALTH_HARD_FAILURE_LIMIT)
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <health_state+0x1f4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b09      	cmp	r3, #9
 800110c:	d809      	bhi.n	8001122 <health_state+0x156>
					{
						RPlidar_current_state = RP_RESET;	/* ------------> */
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <health_state+0x1f8>)
 8001110:	2204      	movs	r2, #4
 8001112:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <health_state+0x1d4>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <health_state+0x1ec>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e008      	b.n	8001134 <health_state+0x168>
					}
					else
					{
						RPlidar_current_state = RP_HARD_ERR;	/* ------------> */
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <health_state+0x1f8>)
 8001124:	2203      	movs	r2, #3
 8001126:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <health_state+0x1d4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <health_state+0x1ec>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
					}

					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	7b7a      	ldrb	r2, [r7, #13]
 800113a:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	897a      	ldrh	r2, [r7, #10]
 8001142:	f8a3 2001 	strh.w	r2, [r3, #1]
 8001146:	e01f      	b.n	8001188 <health_state+0x1bc>
				}
				// Evrything's OK, then jump to next state
				else
				{
					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	7b7a      	ldrb	r2, [r7, #13]
 800114e:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	897a      	ldrh	r2, [r7, #10]
 8001156:	f8a3 2001 	strh.w	r2, [r3, #1]

					// Jump to next state
					RPlidar_current_state = RP_START_SCAN;	/* ------------> */
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <health_state+0x1f8>)
 800115c:	2205      	movs	r2, #5
 800115e:	701a      	strb	r2, [r3, #0]
					health_process_step = 0;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <health_state+0x1d4>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
					descriptor_received = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <health_state+0x1ec>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e00c      	b.n	8001188 <health_state+0x1bc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 2)
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <health_state+0x1fc>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d907      	bls.n	8001188 <health_state+0x1bc>
			{
				RPlidar_timeout = 0;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <health_state+0x1fc>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 800117e:	f000 fc8b 	bl	8001a98 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <health_state+0x1f8>)
 8001184:	2202      	movs	r2, #2
 8001186:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// If we jump to another step, reinitialize the inside step value to 0
	if(RPlidar_current_state != RP_GET_HEALTH)
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <health_state+0x1f8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d002      	beq.n	8001196 <health_state+0x1ca>
	{
		health_process_step = 0;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <health_state+0x1d4>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	}

	return log;
 8001196:	7bbb      	ldrb	r3, [r7, #14]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000006f 	.word	0x2000006f
 80011a4:	2000007c 	.word	0x2000007c
 80011a8:	20000055 	.word	0x20000055
 80011ac:	200000bc 	.word	0x200000bc
 80011b0:	20000058 	.word	0x20000058
 80011b4:	20000056 	.word	0x20000056
 80011b8:	20000070 	.word	0x20000070
 80011bc:	55555556 	.word	0x55555556
 80011c0:	2000005f 	.word	0x2000005f
 80011c4:	2000005c 	.word	0x2000005c
 80011c8:	2000005e 	.word	0x2000005e

080011cc <reset_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR reset_state(ROBOT6900_HANDLER* h_robot6900)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;
	static uint8_t wait_cnt = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73bb      	strb	r3, [r7, #14]

	uint8_t reset_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]

	if(reset_process_step == 0)
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <reset_state+0x8c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d118      	bne.n	8001216 <reset_state+0x4a>
	{
		// Build Reset packet
		reset_pck[0] = REQUEST_SoF;
 80011e4:	23a5      	movs	r3, #165	; 0xa5
 80011e6:	733b      	strb	r3, [r7, #12]
		reset_pck[1] = RP_RESET_CMD;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	737b      	strb	r3, [r7, #13]

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80011ec:	e00a      	b.n	8001204 <reset_state+0x38>
		{
			uart_log = HAL_UART_Transmit(_huart, reset_pck, RESET_PCK_SIZE, 0xFFFF);
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <reset_state+0x90>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f107 010c 	add.w	r1, r7, #12
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	2202      	movs	r2, #2
 80011fc:	f005 fafa 	bl	80067f4 <HAL_UART_Transmit>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f1      	bne.n	80011ee <reset_state+0x22>
		}

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 800120a:	f000 fc35 	bl	8001a78 <RPlidar_start_timeout>

		reset_process_step = 1;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <reset_state+0x8c>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e01a      	b.n	800124c <reset_state+0x80>
	}
	else
	{
		// Wait for the 2ms WAIT before the lidar wakes up
		if(RPlidar_timeout)
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <reset_state+0x94>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d015      	beq.n	800124c <reset_state+0x80>
		{
			wait_cnt++;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <reset_state+0x98>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <reset_state+0x98>)
 800122a:	701a      	strb	r2, [r3, #0]
			RPlidar_timeout = 0;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <reset_state+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			if(wait_cnt >= 2)	// TIMER_INT each 1ms, so wait_cnt > 2 to get 2ms
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <reset_state+0x98>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d908      	bls.n	800124c <reset_state+0x80>
			{
				RPlidar_current_state = RP_GET_HEALTH;	/* ------------> */
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <reset_state+0x9c>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <reset_state+0x8c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
				wait_cnt = 0;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <reset_state+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return log;
 800124c:	7bbb      	ldrb	r3, [r7, #14]

}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000071 	.word	0x20000071
 800125c:	2000007c 	.word	0x2000007c
 8001260:	2000005e 	.word	0x2000005e
 8001264:	20000072 	.word	0x20000072
 8001268:	2000005c 	.word	0x2000005c

0800126c <start_scan_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR start_scan_state(ROBOT6900_HANDLER* h_robot6900)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001274:	2301      	movs	r3, #1
 8001276:	75bb      	strb	r3, [r7, #22]

	uint8_t scan_pck[START_SCAN_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	75fb      	strb	r3, [r7, #23]

	/* PCK INITIALISATION AND TX */
	if(reset_process_step == 0)
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <start_scan_state+0xe8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d140      	bne.n	8001306 <start_scan_state+0x9a>
	{
		// Build EXPRESS Scan packet
		scan_pck[0] = REQUEST_SoF;
 8001284:	23a5      	movs	r3, #165	; 0xa5
 8001286:	733b      	strb	r3, [r7, #12]
		scan_pck[1] = RP_EXPRESS_SCAN_CMD;
 8001288:	2382      	movs	r3, #130	; 0x82
 800128a:	737b      	strb	r3, [r7, #13]

		scan_pck[2] = 5; // Payload Size
 800128c:	2305      	movs	r3, #5
 800128e:	73bb      	strb	r3, [r7, #14]

		scan_pck[3] = 0; // Working Mode. Set to 0. See datasheet
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
		scan_pck[4] = 0;	// Reserved
 8001294:	2300      	movs	r3, #0
 8001296:	743b      	strb	r3, [r7, #16]
		scan_pck[5] = 0;	// Reserved
 8001298:	2300      	movs	r3, #0
 800129a:	747b      	strb	r3, [r7, #17]
		scan_pck[6] = 0;	// Reserved
 800129c:	2300      	movs	r3, #0
 800129e:	74bb      	strb	r3, [r7, #18]
		scan_pck[7] = 0;	// Reserved
 80012a0:	2300      	movs	r3, #0
 80012a2:	74fb      	strb	r3, [r7, #19]

		scan_pck[8] = RPlidar_checksum(scan_pck, START_SCAN_PCK_SIZE - 1); // Checksum
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2108      	movs	r1, #8
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fc4a 	bl	8001b44 <RPlidar_checksum>
 80012b0:	4603      	mov	r3, r0
 80012b2:	753b      	strb	r3, [r7, #20]

		// Prepare Rx to switch to DMA mode for constant DATA acquisition
		DMA_Rx = 1;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <start_scan_state+0xec>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
		DMA_next_packet_size = EXPRESS_SCAN_RESPONSE_SIZE;
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <start_scan_state+0xf0>)
 80012bc:	2254      	movs	r2, #84	; 0x54
 80012be:	801a      	strh	r2, [r3, #0]

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <start_scan_state+0xf4>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <start_scan_state+0xf8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	2354      	movs	r3, #84	; 0x54
 80012cc:	fb03 f302 	mul.w	r3, r3, r2
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <start_scan_state+0xfc>)
 80012d2:	4413      	add	r3, r2
 80012d4:	2207      	movs	r2, #7
 80012d6:	4619      	mov	r1, r3
 80012d8:	f005 fb20 	bl	800691c <HAL_UART_Receive_IT>

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80012dc:	e00a      	b.n	80012f4 <start_scan_state+0x88>
		{
			uart_log = HAL_UART_Transmit(_huart, scan_pck, START_SCAN_PCK_SIZE, 0xFFFF);
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <start_scan_state+0xf4>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ea:	2209      	movs	r2, #9
 80012ec:	f005 fa82 	bl	80067f4 <HAL_UART_Transmit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75fb      	strb	r3, [r7, #23]
		while(uart_log != HAL_OK)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f1      	bne.n	80012de <start_scan_state+0x72>
		}


		// Start Timeout to test COM error
		RPlidar_start_timeout();
 80012fa:	f000 fbbd 	bl	8001a78 <RPlidar_start_timeout>

		reset_process_step = 1;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <start_scan_state+0xe8>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e020      	b.n	8001348 <start_scan_state+0xdc>
	}
	/* RECEIVE DESCRIPTOR, CHECK VALIDITY AND TIMEOUT */
	else
	{
		// Check if communication with the lidar timed out
		if(buffer_ready == 1)
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <start_scan_state+0x100>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10b      	bne.n	8001328 <start_scan_state+0xbc>
		{
			// Read, check and save descriptor pck. Return 1 if OK
			if(RPlidar_get_descriptor_pck() == 1)
 8001310:	f000 fc38 	bl	8001b84 <RPlidar_get_descriptor_pck>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d116      	bne.n	8001348 <start_scan_state+0xdc>
			{
				RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <start_scan_state+0x104>)
 800131c:	2206      	movs	r2, #6
 800131e:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <start_scan_state+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e00f      	b.n	8001348 <start_scan_state+0xdc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 20)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <start_scan_state+0x108>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b13      	cmp	r3, #19
 8001330:	d90a      	bls.n	8001348 <start_scan_state+0xdc>
			{
				RPlidar_timeout = 0;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <start_scan_state+0x108>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 8001338:	f000 fbae 	bl	8001a98 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <start_scan_state+0x104>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <start_scan_state+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return log;
 8001348:	7dbb      	ldrb	r3, [r7, #22]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000073 	.word	0x20000073
 8001358:	20000057 	.word	0x20000057
 800135c:	2000005a 	.word	0x2000005a
 8001360:	2000007c 	.word	0x2000007c
 8001364:	20000055 	.word	0x20000055
 8001368:	200000bc 	.word	0x200000bc
 800136c:	20000056 	.word	0x20000056
 8001370:	2000005c 	.word	0x2000005c
 8001374:	2000005e 	.word	0x2000005e

08001378 <sampling_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR sampling_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	static uint8_t init_process_buffer = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]

	uint8_t timeout_cnt = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]

	/* WAIT FOR EXPRESS SCAN RESPONSE PCK */
	if(buffer_ready == 1)
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <sampling_state+0x78>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d111      	bne.n	80013b6 <sampling_state+0x3e>
	{
		// Wait for the 1st buffer to be filled
		if(init_process_buffer == 0)
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <sampling_state+0x7c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <sampling_state+0x30>
		{
			init_process_buffer = 1;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <sampling_state+0x7c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
			buffer_ready = 0;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <sampling_state+0x78>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e01b      	b.n	80013e0 <sampling_state+0x68>
		}
		// Wait for the 2nd buffer to be filled
		else
		{
			buffer_ready = 0;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <sampling_state+0x78>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
			RPlidar_current_state = RP_PROCESS;	/* ------------> */
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <sampling_state+0x80>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e014      	b.n	80013e0 <sampling_state+0x68>

	}
	else
	{
		// Timeout Check (2ms)
		if(RPlidar_timeout)
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <sampling_state+0x84>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00f      	beq.n	80013e0 <sampling_state+0x68>
		{
			RPlidar_timeout = 0;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <sampling_state+0x84>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
			if(timeout_cnt >= 20)
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	2b13      	cmp	r3, #19
 80013ca:	d906      	bls.n	80013da <sampling_state+0x62>
			{
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <sampling_state+0x80>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	701a      	strb	r2, [r3, #0]
				init_process_buffer = 0;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <sampling_state+0x7c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e002      	b.n	80013e0 <sampling_state+0x68>
			}
			else
			{
				timeout_cnt++;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	3301      	adds	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	return log;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000056 	.word	0x20000056
 80013f4:	20000074 	.word	0x20000074
 80013f8:	2000005c 	.word	0x2000005c
 80013fc:	2000005e 	.word	0x2000005e

08001400 <processing_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR processing_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	b089      	sub	sp, #36	; 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	static uint16_t nbr_scan = 0;
	static uint8_t process_cnt = 0;
	static uint16_t max_ptnumber = 0;
#endif

	uint8_t pck_checksum = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	773b      	strb	r3, [r7, #28]
	uint8_t real_checksum = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	76fb      	strb	r3, [r7, #27]

	uint8_t S_parameter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	76bb      	strb	r3, [r7, #26]

	float start_angle = 0;
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
	float next_start_angle = 0;
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	613b      	str	r3, [r7, #16]

	uint16_t pt_index = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	83fb      	strh	r3, [r7, #30]

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]

	/* TODO CHECKSUM TEST */
	real_checksum = RPlidar_checksum(&AVAILABLE_RX_BUFFER(2), EXPRESS_SCAN_RESPONSE_SIZE-2);
 800142a:	4ba3      	ldr	r3, [pc, #652]	; (80016b8 <processing_state+0x2b8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	1c99      	adds	r1, r3, #2
 8001430:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <processing_state+0x2bc>)
 8001432:	fb83 3201 	smull	r3, r2, r3, r1
 8001436:	17cb      	asrs	r3, r1, #31
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	1aca      	subs	r2, r1, r3
 8001442:	2354      	movs	r3, #84	; 0x54
 8001444:	fb03 f302 	mul.w	r3, r3, r2
 8001448:	3302      	adds	r3, #2
 800144a:	4a9d      	ldr	r2, [pc, #628]	; (80016c0 <processing_state+0x2c0>)
 800144c:	4413      	add	r3, r2
 800144e:	2152      	movs	r1, #82	; 0x52
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fb77 	bl	8001b44 <RPlidar_checksum>
 8001456:	4603      	mov	r3, r0
 8001458:	76fb      	strb	r3, [r7, #27]
	pck_checksum = ( (AVAILABLE_RX_BUFFER(0) & 0x0F) + ((AVAILABLE_RX_BUFFER(1) & 0x0F) << 4) );
 800145a:	4b97      	ldr	r3, [pc, #604]	; (80016b8 <processing_state+0x2b8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	1c99      	adds	r1, r3, #2
 8001460:	4b96      	ldr	r3, [pc, #600]	; (80016bc <processing_state+0x2bc>)
 8001462:	fb83 3201 	smull	r3, r2, r3, r1
 8001466:	17cb      	asrs	r3, r1, #31
 8001468:	1ad2      	subs	r2, r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	1aca      	subs	r2, r1, r3
 8001472:	4993      	ldr	r1, [pc, #588]	; (80016c0 <processing_state+0x2c0>)
 8001474:	2354      	movs	r3, #84	; 0x54
 8001476:	fb03 f302 	mul.w	r3, r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <processing_state+0x2b8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	1c99      	adds	r1, r3, #2
 800148a:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <processing_state+0x2bc>)
 800148c:	fb83 3201 	smull	r3, r2, r3, r1
 8001490:	17cb      	asrs	r3, r1, #31
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	1aca      	subs	r2, r1, r3
 800149c:	4988      	ldr	r1, [pc, #544]	; (80016c0 <processing_state+0x2c0>)
 800149e:	2354      	movs	r3, #84	; 0x54
 80014a0:	fb03 f302 	mul.w	r3, r3, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	3301      	adds	r3, #1
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4403      	add	r3, r0
 80014b0:	773b      	strb	r3, [r7, #28]

	if(real_checksum != pck_checksum)
 80014b2:	7efa      	ldrb	r2, [r7, #27]
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d002      	beq.n	80014c0 <processing_state+0xc0>
	{
		RPlidar_current_state = RP_COM_ERR;
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <processing_state+0x2c4>)
 80014bc:	2202      	movs	r2, #2
 80014be:	701a      	strb	r2, [r3, #0]
	}

	/* Get the and REBUILD the Angle of the current Pi packet */
	start_angle = (OLD_RX_BUFFER(2) +
 80014c0:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <processing_state+0x2b8>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	1c59      	adds	r1, r3, #1
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <processing_state+0x2bc>)
 80014c8:	fb83 3201 	smull	r3, r2, r3, r1
 80014cc:	17cb      	asrs	r3, r1, #31
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	1aca      	subs	r2, r1, r3
 80014d8:	4979      	ldr	r1, [pc, #484]	; (80016c0 <processing_state+0x2c0>)
 80014da:	2354      	movs	r3, #84	; 0x54
 80014dc:	fb03 f302 	mul.w	r3, r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	3302      	adds	r3, #2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
			( (uint16_t)( (OLD_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 80014e8:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <processing_state+0x2b8>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	1c59      	adds	r1, r3, #1
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <processing_state+0x2bc>)
 80014f0:	fb83 3201 	smull	r3, r2, r3, r1
 80014f4:	17cb      	asrs	r3, r1, #31
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	1aca      	subs	r2, r1, r3
 8001500:	496f      	ldr	r1, [pc, #444]	; (80016c0 <processing_state+0x2c0>)
 8001502:	2354      	movs	r3, #84	; 0x54
 8001504:	fb03 f302 	mul.w	r3, r3, r2
 8001508:	440b      	add	r3, r1
 800150a:	3303      	adds	r3, #3
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	start_angle = (OLD_RX_BUFFER(2) +
 8001514:	4403      	add	r3, r0
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	edc7 7a05 	vstr	s15, [r7, #20]
	start_angle = start_angle / 64.0;
 8001522:	ed97 7a05 	vldr	s14, [r7, #20]
 8001526:	eddf 6a68 	vldr	s13, [pc, #416]	; 80016c8 <processing_state+0x2c8>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Get the and REBUILD the Angle of the next Pi+1 packet */
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <processing_state+0x2b8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	1c99      	adds	r1, r3, #2
 8001538:	4b60      	ldr	r3, [pc, #384]	; (80016bc <processing_state+0x2bc>)
 800153a:	fb83 3201 	smull	r3, r2, r3, r1
 800153e:	17cb      	asrs	r3, r1, #31
 8001540:	1ad2      	subs	r2, r2, r3
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	1aca      	subs	r2, r1, r3
 800154a:	495d      	ldr	r1, [pc, #372]	; (80016c0 <processing_state+0x2c0>)
 800154c:	2354      	movs	r3, #84	; 0x54
 800154e:	fb03 f302 	mul.w	r3, r3, r2
 8001552:	440b      	add	r3, r1
 8001554:	3302      	adds	r3, #2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
			( (uint16_t)( (AVAILABLE_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <processing_state+0x2b8>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	1c99      	adds	r1, r3, #2
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <processing_state+0x2bc>)
 8001562:	fb83 3201 	smull	r3, r2, r3, r1
 8001566:	17cb      	asrs	r3, r1, #31
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	1aca      	subs	r2, r1, r3
 8001572:	4953      	ldr	r1, [pc, #332]	; (80016c0 <processing_state+0x2c0>)
 8001574:	2354      	movs	r3, #84	; 0x54
 8001576:	fb03 f302 	mul.w	r3, r3, r2
 800157a:	440b      	add	r3, r1
 800157c:	3303      	adds	r3, #3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 8001586:	4403      	add	r3, r0
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001590:	edc7 7a04 	vstr	s15, [r7, #16]
	next_start_angle = next_start_angle / 64.0;
 8001594:	ed97 7a04 	vldr	s14, [r7, #16]
 8001598:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80016c8 <processing_state+0x2c8>
 800159c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a0:	edc7 7a04 	vstr	s15, [r7, #16]


	/* Calculate the S parameter, in order to detect a new 360 Scan */
	S_parameter = (start_angle > next_start_angle ? 1 : 0);
 80015a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	bfcc      	ite	gt
 80015b6:	2301      	movgt	r3, #1
 80015b8:	2300      	movle	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	76bb      	strb	r3, [r7, #26]

#ifdef RPLIDAR_DEBUG
	process_cnt++;
#endif
	// If new scan detected, refresh data by starting at RPlidar_data[0]
	if(S_parameter == 1)
 80015be:	7ebb      	ldrb	r3, [r7, #26]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d109      	bne.n	80015d8 <processing_state+0x1d8>
	{
		RPlidar_RPM = RPlidar_measure_RPM();
 80015c4:	f000 fa74 	bl	8001ab0 <RPlidar_measure_RPM>
 80015c8:	eef0 7a40 	vmov.f32	s15, s0
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <processing_state+0x2cc>)
 80015ce:	edc3 7a00 	vstr	s15, [r3]
		{
			nbr_scan++;
		}
#endif

		current_data_index = 0;
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <processing_state+0x2d0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]



	/* CALCULATE DATA POINTS using Pi (in LiDAR_process_buffer) and Pi+1 */
	/* Processing de-compressing calculation */
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	777b      	strb	r3, [r7, #29]
 80015dc:	e1ed      	b.n	80019ba <processing_state+0x5ba>
	{
		// Point index in the result RPLIDAR_DATA array
		pt_index = (cabin_i * 2);
 80015de:	7f7b      	ldrb	r3, [r7, #29]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	83fb      	strh	r3, [r7, #30]

		// Security check on index
		if(current_data_index + pt_index + 1 >= SAMPLES_PER_360)
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <processing_state+0x2d0>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	8bfb      	ldrh	r3, [r7, #30]
 80015ee:	4413      	add	r3, r2
 80015f0:	3301      	adds	r3, #1
 80015f2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80015f6:	db04      	blt.n	8001602 <processing_state+0x202>
		{
			RPlidar_current_state = RP_COM_ERR;
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <processing_state+0x2c4>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	701a      	strb	r2, [r3, #0]
			return log;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	e1ec      	b.n	80019dc <processing_state+0x5dc>
		}

		// Process point 1 in Cabin Ci
		RPlidar_data[current_data_index + pt_index].distance = F_CABIN_DISTANCE1(cabin_i);
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <processing_state+0x2b8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <processing_state+0x2bc>)
 800160a:	fb83 3201 	smull	r3, r2, r3, r1
 800160e:	17cb      	asrs	r3, r1, #31
 8001610:	1ad2      	subs	r2, r2, r3
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	1aca      	subs	r2, r1, r3
 800161a:	7f79      	ldrb	r1, [r7, #29]
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3304      	adds	r3, #4
 8001624:	4926      	ldr	r1, [pc, #152]	; (80016c0 <processing_state+0x2c0>)
 8001626:	2054      	movs	r0, #84	; 0x54
 8001628:	fb00 f202 	mul.w	r2, r0, r2
 800162c:	440a      	add	r2, r1
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001638:	b298      	uxth	r0, r3
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <processing_state+0x2b8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <processing_state+0x2bc>)
 8001642:	fb83 3201 	smull	r3, r2, r3, r1
 8001646:	17cb      	asrs	r3, r1, #31
 8001648:	1ad2      	subs	r2, r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	1aca      	subs	r2, r1, r3
 8001652:	7f7b      	ldrb	r3, [r7, #29]
 8001654:	1c59      	adds	r1, r3, #1
 8001656:	460b      	mov	r3, r1
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	4918      	ldr	r1, [pc, #96]	; (80016c0 <processing_state+0x2c0>)
 800165e:	2454      	movs	r4, #84	; 0x54
 8001660:	fb04 f202 	mul.w	r2, r4, r2
 8001664:	440a      	add	r2, r1
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	b29b      	uxth	r3, r3
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <processing_state+0x2d0>)
 8001672:	8812      	ldrh	r2, [r2, #0]
 8001674:	4611      	mov	r1, r2
 8001676:	8bfa      	ldrh	r2, [r7, #30]
 8001678:	440a      	add	r2, r1
 800167a:	4403      	add	r3, r0
 800167c:	b298      	uxth	r0, r3
 800167e:	4915      	ldr	r1, [pc, #84]	; (80016d4 <processing_state+0x2d4>)
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	4602      	mov	r2, r0
 800168c:	801a      	strh	r2, [r3, #0]
		RPlidar_data[current_data_index + pt_index].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * pt_index - (float)(F_CABIN_DANGLE1(cabin_i));
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7fe fefe 	bl	8000490 <__aeabi_f2d>
 8001694:	4604      	mov	r4, r0
 8001696:	460d      	mov	r5, r1
 8001698:	ed97 7a05 	vldr	s14, [r7, #20]
 800169c:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d818      	bhi.n	80016dc <processing_state+0x2dc>
 80016aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80016ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b6:	e01b      	b.n	80016f0 <processing_state+0x2f0>
 80016b8:	20000055 	.word	0x20000055
 80016bc:	55555556 	.word	0x55555556
 80016c0:	200000bc 	.word	0x200000bc
 80016c4:	2000005c 	.word	0x2000005c
 80016c8:	42800000 	.word	0x42800000
 80016cc:	20000064 	.word	0x20000064
 80016d0:	20000076 	.word	0x20000076
 80016d4:	200001bc 	.word	0x200001bc
 80016d8:	43b40000 	.word	0x43b40000
 80016dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80016d8 <processing_state+0x2d8>
 80016e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe fecc 	bl	8000490 <__aeabi_f2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4bba      	ldr	r3, [pc, #744]	; (80019e8 <processing_state+0x5e8>)
 80016fe:	f7ff f849 	bl	8000794 <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4690      	mov	r8, r2
 8001708:	4699      	mov	r9, r3
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fead 	bl	800046c <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4640      	mov	r0, r8
 8001718:	4649      	mov	r1, r9
 800171a:	f7fe ff11 	bl	8000540 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	f7fe fd55 	bl	80001d4 <__adddf3>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	461d      	mov	r5, r3
 8001730:	4626      	mov	r6, r4
 8001732:	4bae      	ldr	r3, [pc, #696]	; (80019ec <processing_state+0x5ec>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	1c59      	adds	r1, r3, #1
 8001738:	4bad      	ldr	r3, [pc, #692]	; (80019f0 <processing_state+0x5f0>)
 800173a:	fb83 3201 	smull	r3, r2, r3, r1
 800173e:	17cb      	asrs	r3, r1, #31
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	1aca      	subs	r2, r1, r3
 800174a:	7f79      	ldrb	r1, [r7, #29]
 800174c:	460b      	mov	r3, r1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	49a7      	ldr	r1, [pc, #668]	; (80019f4 <processing_state+0x5f4>)
 8001756:	2054      	movs	r0, #84	; 0x54
 8001758:	fb00 f202 	mul.w	r2, r0, r2
 800175c:	440a      	add	r2, r1
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f003 000f 	and.w	r0, r3, #15
 8001766:	4ba1      	ldr	r3, [pc, #644]	; (80019ec <processing_state+0x5ec>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	4ba0      	ldr	r3, [pc, #640]	; (80019f0 <processing_state+0x5f0>)
 800176e:	fb83 3201 	smull	r3, r2, r3, r1
 8001772:	17cb      	asrs	r3, r1, #31
 8001774:	1ad2      	subs	r2, r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	1aca      	subs	r2, r1, r3
 800177e:	7f79      	ldrb	r1, [r7, #29]
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	499a      	ldr	r1, [pc, #616]	; (80019f4 <processing_state+0x5f4>)
 800178a:	2454      	movs	r4, #84	; 0x54
 800178c:	fb04 f202 	mul.w	r2, r4, r2
 8001790:	440a      	add	r2, r1
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800179e:	4303      	orrs	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a8:	ee17 0a90 	vmov	r0, s15
 80017ac:	f7fe fe70 	bl	8000490 <__aeabi_f2d>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	4628      	mov	r0, r5
 80017ba:	4631      	mov	r1, r6
 80017bc:	f7fe fd08 	bl	80001d0 <__aeabi_dsub>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	4618      	mov	r0, r3
 80017c6:	4621      	mov	r1, r4
 80017c8:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <processing_state+0x5f8>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	8bfb      	ldrh	r3, [r7, #30]
 80017d0:	18d4      	adds	r4, r2, r3
 80017d2:	f7ff f8c7 	bl	8000964 <__aeabi_d2f>
 80017d6:	4601      	mov	r1, r0
 80017d8:	4a88      	ldr	r2, [pc, #544]	; (80019fc <processing_state+0x5fc>)
 80017da:	4623      	mov	r3, r4
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4423      	add	r3, r4
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	3302      	adds	r3, #2
 80017e6:	460a      	mov	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

		// Process point 2 in Cabin Ci
		RPlidar_data[current_data_index + pt_index + 1].distance = F_CABIN_DISTANCE2(cabin_i);
 80017ea:	4b80      	ldr	r3, [pc, #512]	; (80019ec <processing_state+0x5ec>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	1c59      	adds	r1, r3, #1
 80017f0:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <processing_state+0x5f0>)
 80017f2:	fb83 3201 	smull	r3, r2, r3, r1
 80017f6:	17cb      	asrs	r3, r1, #31
 80017f8:	1ad2      	subs	r2, r2, r3
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	1aca      	subs	r2, r1, r3
 8001802:	7f79      	ldrb	r1, [r7, #29]
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3306      	adds	r3, #6
 800180c:	4979      	ldr	r1, [pc, #484]	; (80019f4 <processing_state+0x5f4>)
 800180e:	2054      	movs	r0, #84	; 0x54
 8001810:	fb00 f202 	mul.w	r2, r0, r2
 8001814:	440a      	add	r2, r1
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001820:	b298      	uxth	r0, r3
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <processing_state+0x5ec>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	1c59      	adds	r1, r3, #1
 8001828:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <processing_state+0x5f0>)
 800182a:	fb83 3201 	smull	r3, r2, r3, r1
 800182e:	17cb      	asrs	r3, r1, #31
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	1aca      	subs	r2, r1, r3
 800183a:	7f79      	ldrb	r1, [r7, #29]
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3307      	adds	r3, #7
 8001844:	496b      	ldr	r1, [pc, #428]	; (80019f4 <processing_state+0x5f4>)
 8001846:	2454      	movs	r4, #84	; 0x54
 8001848:	fb04 f202 	mul.w	r2, r4, r2
 800184c:	440a      	add	r2, r1
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	b29b      	uxth	r3, r3
 8001858:	4a67      	ldr	r2, [pc, #412]	; (80019f8 <processing_state+0x5f8>)
 800185a:	8812      	ldrh	r2, [r2, #0]
 800185c:	4611      	mov	r1, r2
 800185e:	8bfa      	ldrh	r2, [r7, #30]
 8001860:	440a      	add	r2, r1
 8001862:	3201      	adds	r2, #1
 8001864:	4403      	add	r3, r0
 8001866:	b298      	uxth	r0, r3
 8001868:	4964      	ldr	r1, [pc, #400]	; (80019fc <processing_state+0x5fc>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	440b      	add	r3, r1
 8001874:	4602      	mov	r2, r0
 8001876:	801a      	strh	r2, [r3, #0]
		RPlidar_data[current_data_index + pt_index + 1].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * (pt_index+1) - (float)(F_CABIN_DANGLE2(cabin_i));
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe fe09 	bl	8000490 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	ed97 7a05 	vldr	s14, [r7, #20]
 8001886:	edd7 7a04 	vldr	s15, [r7, #16]
 800188a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	d806      	bhi.n	80018a2 <processing_state+0x4a2>
 8001894:	ed97 7a04 	vldr	s14, [r7, #16]
 8001898:	edd7 7a05 	vldr	s15, [r7, #20]
 800189c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a0:	e009      	b.n	80018b6 <processing_state+0x4b6>
 80018a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a00 <processing_state+0x600>
 80018aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fde9 	bl	8000490 <__aeabi_f2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <processing_state+0x5e8>)
 80018c4:	f7fe ff66 	bl	8000794 <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4690      	mov	r8, r2
 80018ce:	4699      	mov	r9, r3
 80018d0:	8bfb      	ldrh	r3, [r7, #30]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fdc9 	bl	800046c <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4640      	mov	r0, r8
 80018e0:	4649      	mov	r1, r9
 80018e2:	f7fe fe2d 	bl	8000540 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc71 	bl	80001d4 <__adddf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	461d      	mov	r5, r3
 80018f8:	4626      	mov	r6, r4
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <processing_state+0x5ec>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <processing_state+0x5f0>)
 8001902:	fb83 3201 	smull	r3, r2, r3, r1
 8001906:	17cb      	asrs	r3, r1, #31
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	1aca      	subs	r2, r1, r3
 8001912:	7f79      	ldrb	r1, [r7, #29]
 8001914:	460b      	mov	r3, r1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3308      	adds	r3, #8
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <processing_state+0x5f4>)
 800191e:	2054      	movs	r0, #84	; 0x54
 8001920:	fb00 f202 	mul.w	r2, r0, r2
 8001924:	440a      	add	r2, r1
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f003 00f0 	and.w	r0, r3, #240	; 0xf0
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <processing_state+0x5ec>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <processing_state+0x5f0>)
 8001936:	fb83 3201 	smull	r3, r2, r3, r1
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	1aca      	subs	r2, r1, r3
 8001946:	7f79      	ldrb	r1, [r7, #29]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3306      	adds	r3, #6
 8001950:	4928      	ldr	r1, [pc, #160]	; (80019f4 <processing_state+0x5f4>)
 8001952:	2454      	movs	r4, #84	; 0x54
 8001954:	fb04 f202 	mul.w	r2, r4, r2
 8001958:	440a      	add	r2, r1
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001966:	4403      	add	r3, r0
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001970:	ee17 0a90 	vmov	r0, s15
 8001974:	f7fe fd8c 	bl	8000490 <__aeabi_f2d>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	4628      	mov	r0, r5
 8001982:	4631      	mov	r1, r6
 8001984:	f7fe fc24 	bl	80001d0 <__aeabi_dsub>
 8001988:	4603      	mov	r3, r0
 800198a:	460c      	mov	r4, r1
 800198c:	4618      	mov	r0, r3
 800198e:	4621      	mov	r1, r4
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <processing_state+0x5f8>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	8bfb      	ldrh	r3, [r7, #30]
 8001998:	4413      	add	r3, r2
 800199a:	1c5c      	adds	r4, r3, #1
 800199c:	f7fe ffe2 	bl	8000964 <__aeabi_d2f>
 80019a0:	4601      	mov	r1, r0
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <processing_state+0x5fc>)
 80019a4:	4623      	mov	r3, r4
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4423      	add	r3, r4
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	3302      	adds	r3, #2
 80019b0:	460a      	mov	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 80019b4:	7f7b      	ldrb	r3, [r7, #29]
 80019b6:	3301      	adds	r3, #1
 80019b8:	777b      	strb	r3, [r7, #29]
 80019ba:	7f7b      	ldrb	r3, [r7, #29]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	f67f ae0e 	bls.w	80015de <processing_state+0x1de>


	}

	// Save last point index to be added in the array
	current_data_index += pt_index + 1;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <processing_state+0x5f8>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	8bfb      	ldrh	r3, [r7, #30]
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <processing_state+0x5f8>)
 80019d2:	801a      	strh	r2, [r3, #0]
	{
		max_ptnumber = current_data_index;
	}
#endif

	RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <processing_state+0x604>)
 80019d6:	2206      	movs	r2, #6
 80019d8:	701a      	strb	r2, [r3, #0]

	return log;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e6:	bf00      	nop
 80019e8:	40400000 	.word	0x40400000
 80019ec:	20000055 	.word	0x20000055
 80019f0:	55555556 	.word	0x55555556
 80019f4:	200000bc 	.word	0x200000bc
 80019f8:	20000076 	.word	0x20000076
 80019fc:	200001bc 	.word	0x200001bc
 8001a00:	43b40000 	.word	0x43b40000
 8001a04:	2000005c 	.word	0x2000005c

08001a08 <stop_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR stop_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

}
 8001a10:	bf00      	nop
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <COM_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR COM_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100001;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]

	return log;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <hardware_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR hardware_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100010;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

	return log;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <RPlidar_start_timeout>:
 * Start the Timeout Timer counter
 *
 * Set the counter to 0 to ensure the first Int. fired is still 1ms
 */
void RPlidar_start_timeout()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	_htim7->Instance->CNT = 0;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <RPlidar_start_timeout+0x1c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(_htim7);
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <RPlidar_start_timeout+0x1c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fb9a 	bl	80061c4 <HAL_TIM_Base_Start_IT>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200001b8 	.word	0x200001b8

08001a98 <RPlidar_abord_timeout>:

/*
 * Stop the Timeout Timer counter INT.
 */
void RPlidar_abord_timeout()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_htim7);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <RPlidar_abord_timeout+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fbb9 	bl	8006218 <HAL_TIM_Base_Stop_IT>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001b8 	.word	0x200001b8

08001ab0 <RPlidar_measure_RPM>:
/*
 * Calculate RP_lidar motors speed in Rotation Per Minute,
 * using time taken to acquire a 360 degree scan
 */
float RPlidar_measure_RPM()
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
	float rpm = 0;
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]

	// If RPM measurement was not enabled before
	if(RPM_init == 0)
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <RPlidar_measure_RPM+0x88>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d112      	bne.n	8001aea <RPlidar_measure_RPM+0x3a>
	{
		RPM_init = 1;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <RPlidar_measure_RPM+0x88>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
		RPM_cnt_1ms = 0;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <RPlidar_measure_RPM+0x8c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	801a      	strh	r2, [r3, #0]

		// Init and start 1ms Timer Interrupt
		RPlidar_abord_timeout();
 8001ad0:	f7ff ffe2 	bl	8001a98 <RPlidar_abord_timeout>
		_htim7->Instance->CNT = 0;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <RPlidar_measure_RPM+0x90>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(_htim7);
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <RPlidar_measure_RPM+0x90>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fb6e 	bl	80061c4 <HAL_TIM_Base_Start_IT>
 8001ae8:	e019      	b.n	8001b1e <RPlidar_measure_RPM+0x6e>

	}
	else
	{
		rpm = ( (60.0 * 1000.0) / (1.0 * RPM_cnt_1ms));
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <RPlidar_measure_RPM+0x8c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcbb 	bl	800046c <__aeabi_i2d>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	a10c      	add	r1, pc, #48	; (adr r1, 8001b30 <RPlidar_measure_RPM+0x80>)
 8001b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b04:	f7fe fe46 	bl	8000794 <__aeabi_ddiv>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4621      	mov	r1, r4
 8001b10:	f7fe ff28 	bl	8000964 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	607b      	str	r3, [r7, #4]
		RPM_cnt_1ms = 0;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <RPlidar_measure_RPM+0x8c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
//		_htim7->Instance->CNT = 0;
	}

	return rpm;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	ee07 3a90 	vmov	s15, r3
}
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40ed4c00 	.word	0x40ed4c00
 8001b38:	20000060 	.word	0x20000060
 8001b3c:	20000062 	.word	0x20000062
 8001b40:	200001b8 	.word	0x200001b8

08001b44 <RPlidar_checksum>:
 * Calculate Checksum of a packet of data of length 'packet_size'
 *
 * Bit XOR between all packet bytes
 */
uint8_t RPlidar_checksum(uint8_t* packet, uint8_t packet_size)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0 ; i < packet_size; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	73bb      	strb	r3, [r7, #14]
 8001b58:	e009      	b.n	8001b6e <RPlidar_checksum+0x2a>
	{
		checksum ^= *(packet + i);
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	4053      	eors	r3, r2
 8001b66:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0 ; i < packet_size; i++)
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73bb      	strb	r3, [r7, #14]
 8001b6e:	7bba      	ldrb	r2, [r7, #14]
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3f1      	bcc.n	8001b5a <RPlidar_checksum+0x16>
	}

	return checksum;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <RPlidar_get_descriptor_pck>:
 *	Check Descriptor packet by looking for SoF1 and SoF2
 *
 *	Update the global RP_lidar descriptor packet
 */
uint8_t RPlidar_get_descriptor_pck()
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
	uint8_t* _descriptor_pck;
	uint8_t validity = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	71fb      	strb	r3, [r7, #7]

	// Read Rx buffer
	_descriptor_pck = &(AVAILABLE_RX_BUFFER(0));
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <RPlidar_get_descriptor_pck+0x70>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	1c99      	adds	r1, r3, #2
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <RPlidar_get_descriptor_pck+0x74>)
 8001b96:	fb83 3201 	smull	r3, r2, r3, r1
 8001b9a:	17cb      	asrs	r3, r1, #31
 8001b9c:	1ad2      	subs	r2, r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	1aca      	subs	r2, r1, r3
 8001ba6:	2354      	movs	r3, #84	; 0x54
 8001ba8:	fb03 f302 	mul.w	r3, r3, r2
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <RPlidar_get_descriptor_pck+0x78>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	603b      	str	r3, [r7, #0]
	buffer_ready = 0;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <RPlidar_get_descriptor_pck+0x7c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]

	// Check is data are the Descriptor Register by matching the SoF1 and SoF2
	if( *(_descriptor_pck) == RESPONSE_DESCRIPTOR_SoF1 && *(_descriptor_pck + 1) == RESPONSE_DESCRIPTOR_SoF2)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2ba5      	cmp	r3, #165	; 0xa5
 8001bbe:	d107      	bne.n	8001bd0 <RPlidar_get_descriptor_pck+0x4c>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b5a      	cmp	r3, #90	; 0x5a
 8001bc8:	d102      	bne.n	8001bd0 <RPlidar_get_descriptor_pck+0x4c>
	{
		validity = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	e001      	b.n	8001bd4 <RPlidar_get_descriptor_pck+0x50>
	}
	else
	{
		validity = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
	}

	// Save descriptor in memory
	RPlidar_descriptor_pck = *(RPLIDAR_DESCRIPTOR_PCK*)(_descriptor_pck);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <RPlidar_get_descriptor_pck+0x80>)
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	6810      	ldr	r0, [r2, #0]
 8001bda:	6018      	str	r0, [r3, #0]
 8001bdc:	8891      	ldrh	r1, [r2, #4]
 8001bde:	7992      	ldrb	r2, [r2, #6]
 8001be0:	8099      	strh	r1, [r3, #4]
 8001be2:	719a      	strb	r2, [r3, #6]

//	memset(&AVAILABLE_RX_BUFFER(0), 0, RESPONSE_DESCRIPTOR_SIZE);


	return validity;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000055 	.word	0x20000055
 8001bf8:	55555556 	.word	0x55555556
 8001bfc:	200000bc 	.word	0x200000bc
 8001c00:	20000056 	.word	0x20000056
 8001c04:	20000068 	.word	0x20000068

08001c08 <HAL_UART_RxCpltCallback>:

/*
 * UARTs Callback function. For HOST XBee, LiDAR UART and Bluetooth
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_UART_RxCpltCallback+0x34>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d103      	bne.n	8001c22 <HAL_UART_RxCpltCallback+0x1a>
	{
		NVIC_command_parser_INT(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ff12 	bl	8000a44 <NVIC_command_parser_INT>
	}
	else if(huart->Instance == UART4)
	{
		NVIC_RPlidar_INT(huart);
	}
}
 8001c20:	e007      	b.n	8001c32 <HAL_UART_RxCpltCallback+0x2a>
	else if(huart->Instance == UART4)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_UART_RxCpltCallback+0x38>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d102      	bne.n	8001c32 <HAL_UART_RxCpltCallback+0x2a>
		NVIC_RPlidar_INT(huart);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff f8dd 	bl	8000dec <NVIC_RPlidar_INT>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40005000 	.word	0x40005000
 8001c40:	40004c00 	.word	0x40004c00

08001c44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d109      	bne.n	8001c6a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		a_test++;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c62:	801a      	strh	r2, [r3, #0]
		NVIC_Timout_1ms_INT(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff f90f 	bl	8000e88 <NVIC_Timout_1ms_INT>
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40001400 	.word	0x40001400
 8001c78:	20000078 	.word	0x20000078

08001c7c <update_LEDs>:
 * Update the LEDs debug wheels (8 LEDs) on the stm32f3Discovery Board
 *
 * See attached Debug_LED excel for debug codes
 */
void update_LEDs(ROBOT6900_HANDLER* h_robot6900)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	static uint16_t LEDs_set[8] = {LD3_Pin, LD4_Pin ,LD5_Pin, LD6_Pin, LD7_Pin, LD8_Pin, LD9_Pin, LD10_Pin};

	for(uint8_t i = 0 ; i < 8 ; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e025      	b.n	8001cd6 <update_LEDs+0x5a>
	{
		if( ((h_robot6900->robot_state->debug_leds) & (0x01 << i)) == (0x01 << i))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2201      	movs	r2, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	ea01 0203 	and.w	r2, r1, r3
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d109      	bne.n	8001cbe <update_LEDs+0x42>
		{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_SET);
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <update_LEDs+0x68>)
 8001cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <update_LEDs+0x6c>)
 8001cb8:	f002 fb9e 	bl	80043f8 <HAL_GPIO_WritePin>
 8001cbc:	e008      	b.n	8001cd0 <update_LEDs+0x54>
		}
		else{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_RESET);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <update_LEDs+0x68>)
 8001cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <update_LEDs+0x6c>)
 8001ccc:	f002 fb94 	bl	80043f8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0 ; i < 8 ; i++)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d9d6      	bls.n	8001c8a <update_LEDs+0xe>
		}
	}
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000014 	.word	0x20000014
 8001ce8:	48001000 	.word	0x48001000

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f000 fe54 	bl	800299c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f840 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 faa8 	bl	800224c <MX_GPIO_Init>
  MX_DMA_Init();
 8001cfc:	f000 fa88 	bl	8002210 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d00:	f000 f8a4 	bl	8001e4c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d04:	f000 f93e 	bl	8001f84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d08:	f000 f984 	bl	8002014 <MX_SPI1_Init>
  MX_UART4_Init();
 8001d0c:	f000 f9f6 	bl	80020fc <MX_UART4_Init>
  MX_UART5_Init();
 8001d10:	f000 fa28 	bl	8002164 <MX_UART5_Init>
  MX_USB_PCD_Init();
 8001d14:	f000 fa5a 	bl	80021cc <MX_USB_PCD_Init>
  MX_IWDG_Init();
 8001d18:	f000 f974 	bl	8002004 <MX_IWDG_Init>
  MX_CRC_Init();
 8001d1c:	f000 f906 	bl	8001f2c <MX_CRC_Init>
  MX_TIM7_Init();
 8001d20:	f000 f9b6 	bl	8002090 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Initiate LOG LEDs
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f002 fb63 	bl	80043f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LOG_WARNING_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f002 fb5c 	bl	80043f8 <HAL_GPIO_WritePin>

  /* Initialise Command parser peripheral. (FSM + CRC + UART5) */
  uart_init(&huart5, &hcrc);
 8001d40:	4908      	ldr	r1, [pc, #32]	; (8001d64 <main+0x78>)
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <main+0x7c>)
 8001d44:	f7fe feae 	bl	8000aa4 <uart_init>

  /* Initialise RPlidar peripheral (FSM + UART4) */
  RPlidar_init(&huart4, &htim7);
 8001d48:	4908      	ldr	r1, [pc, #32]	; (8001d6c <main+0x80>)
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <main+0x84>)
 8001d4c:	f7ff f8c0 	bl	8000ed0 <RPlidar_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*Command parser FSM */
	  cmd_parser_process(&h_robot6900);
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <main+0x88>)
 8001d52:	f7fe fec3 	bl	8000adc <cmd_parser_process>

	  /* RPlidar FSM */
	  RPlidar_process(&h_robot6900);
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <main+0x88>)
 8001d58:	f7ff f8da 	bl	8000f10 <RPlidar_process>

	  /* Debug LEDs state */
	  update_LEDs(&h_robot6900);
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <main+0x88>)
 8001d5e:	f7ff ff8d 	bl	8001c7c <update_LEDs>
	  cmd_parser_process(&h_robot6900);
 8001d62:	e7f5      	b.n	8001d50 <main+0x64>
 8001d64:	2000109c 	.word	0x2000109c
 8001d68:	200010c0 	.word	0x200010c0
 8001d6c:	20001574 	.word	0x20001574
 8001d70:	20001198 	.word	0x20001198
 8001d74:	20000004 	.word	0x20000004

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b09e      	sub	sp, #120	; 0x78
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d82:	2228      	movs	r2, #40	; 0x28
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fdaa 	bl	80078e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	223c      	movs	r2, #60	; 0x3c
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fd9c 	bl	80078e0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001da8:	230b      	movs	r3, #11
 8001daa:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db6:	2301      	movs	r3, #1
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dba:	2310      	movs	r3, #16
 8001dbc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001dcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dd0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fd2a 	bl	8004830 <HAL_RCC_OscConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001de2:	f000 faed 	bl	80023c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de6:	230f      	movs	r3, #15
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dea:	2302      	movs	r3, #2
 8001dec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fc1c 	bl	8005640 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e0e:	f000 fad7 	bl	80023c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <SystemClock_Config+0xd0>)
 8001e14:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fe3b 	bl	8005aac <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e3c:	f000 fac0 	bl	80023c0 <Error_Handler>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3778      	adds	r7, #120	; 0x78
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	000200b8 	.word	0x000200b8

08001e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001eb8:	2204      	movs	r2, #4
 8001eba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ec8:	4817      	ldr	r0, [pc, #92]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001eca:	f000 fdcd 	bl	8002a68 <HAL_ADC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001ed4:	f000 fa74 	bl	80023c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4811      	ldr	r0, [pc, #68]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001ee4:	f001 fa8c 	bl	8003400 <HAL_ADCEx_MultiModeConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001eee:	f000 fa67 	bl	80023c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <MX_ADC1_Init+0xdc>)
 8001f10:	f000 ff8a 	bl	8002e28 <HAL_ADC_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001f1a:	f000 fa51 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20001140 	.word	0x20001140

08001f2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	/* Initializing CRC Initial value for crc-8bit calculation */
	hcrc.Init.InitValue = 0xFF;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	611a      	str	r2, [r3, #16]

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <MX_CRC_Init+0x54>)
 8001f3a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 155;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f4a:	229b      	movs	r2, #155	; 0x9b
 8001f4c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f50:	2210      	movs	r2, #16
 8001f52:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_CRC_Init+0x50>)
 8001f68:	f001 fcde 	bl	8003928 <HAL_CRC_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001f72:	f000 fa25 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000109c 	.word	0x2000109c
 8001f80:	40023000 	.word	0x40023000

08001f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <MX_I2C1_Init+0x78>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <MX_I2C1_Init+0x7c>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fc0:	f002 fa32 	bl	8004428 <HAL_I2C_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fca:	f000 f9f9 	bl	80023c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fd2:	f002 fab8 	bl	8004546 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fdc:	f000 f9f0 	bl	80023c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fe4:	f002 fafa 	bl	80045dc <HAL_I2CEx_ConfigDigitalFilter>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fee:	f000 f9e7 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001040 	.word	0x20001040
 8001ffc:	40005400 	.word	0x40005400
 8002000:	2000090e 	.word	0x2000090e

08002004 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <MX_SPI1_Init+0x74>)
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <MX_SPI1_Init+0x78>)
 800201c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_SPI1_Init+0x74>)
 8002020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_SPI1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_SPI1_Init+0x74>)
 800202e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002032:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_SPI1_Init+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <MX_SPI1_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_SPI1_Init+0x74>)
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_SPI1_Init+0x74>)
 800204a:	2210      	movs	r2, #16
 800204c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_SPI1_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_SPI1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_SPI1_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_SPI1_Init+0x74>)
 8002062:	2207      	movs	r2, #7
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_SPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_SPI1_Init+0x74>)
 800206e:	2208      	movs	r2, #8
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_SPI1_Init+0x74>)
 8002074:	f003 feca 	bl	8005e0c <HAL_SPI_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800207e:	f000 f99f 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20001218 	.word	0x20001218
 800208c:	40013000 	.word	0x40013000

08002090 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <MX_TIM7_Init+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 47999;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020b4:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80020b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020c2:	f004 f854 	bl	800616e <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020cc:	f000 f978 	bl	80023c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_TIM7_Init+0x64>)
 80020de:	f004 fa9d 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80020e8:	f000 f96a 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20001574 	.word	0x20001574
 80020f8:	40001400 	.word	0x40001400

080020fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_UART4_Init+0x60>)
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <MX_UART4_Init+0x64>)
 8002104:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <MX_UART4_Init+0x60>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_UART4_Init+0x60>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_UART4_Init+0x60>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_UART4_Init+0x60>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_UART4_Init+0x60>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <MX_UART4_Init+0x60>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_UART4_Init+0x60>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <MX_UART4_Init+0x60>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_UART4_Init+0x60>)
 800213a:	2220      	movs	r2, #32
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <MX_UART4_Init+0x60>)
 8002140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_UART4_Init+0x60>)
 8002148:	f004 fb06 	bl	8006758 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8002152:	f000 f935 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20001198 	.word	0x20001198
 8002160:	40004c00 	.word	0x40004c00

08002164 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_UART5_Init+0x60>)
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <MX_UART5_Init+0x64>)
 800216c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_UART5_Init+0x60>)
 8002170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002174:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <MX_UART5_Init+0x60>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_UART5_Init+0x60>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <MX_UART5_Init+0x60>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_UART5_Init+0x60>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_UART5_Init+0x60>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_UART5_Init+0x60>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <MX_UART5_Init+0x60>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_UART5_Init+0x60>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_UART5_Init+0x60>)
 80021a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ac:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_UART5_Init+0x60>)
 80021b0:	f004 fad2 	bl	8006758 <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f000 f901 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200010c0 	.word	0x200010c0
 80021c8:	40005000 	.word	0x40005000

080021cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <MX_USB_PCD_Init+0x40>)
 80021d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021d8:	2208      	movs	r2, #8
 80021da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021de:	2202      	movs	r2, #2
 80021e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_USB_PCD_Init+0x3c>)
 80021f6:	f002 fa3d 	bl	8004674 <HAL_PCD_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002200:	f000 f8de 	bl	80023c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000127c 	.word	0x2000127c
 800220c:	40005c00 	.word	0x40005c00

08002210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_DMA_Init+0x38>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <MX_DMA_Init+0x38>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6153      	str	r3, [r2, #20]
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_DMA_Init+0x38>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	203a      	movs	r0, #58	; 0x3a
 8002234:	f001 fb33 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002238:	203a      	movs	r0, #58	; 0x3a
 800223a:	f001 fb4c 	bl	80038d6 <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <MX_GPIO_Init+0x164>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002284:	6153      	str	r3, [r2, #20]
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <MX_GPIO_Init+0x164>)
 8002298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800229c:	6153      	str	r3, [r2, #20]
 800229e:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	6153      	str	r3, [r2, #20]
 80022b6:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022cc:	6153      	str	r3, [r2, #20]
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6153      	str	r3, [r2, #20]
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <MX_GPIO_Init+0x164>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80022f2:	2200      	movs	r2, #0
 80022f4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80022f8:	482e      	ldr	r0, [pc, #184]	; (80023b4 <MX_GPIO_Init+0x168>)
 80022fa:	f002 f87d 	bl	80043f8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin|CS_Accelerometer_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002304:	482c      	ldr	r0, [pc, #176]	; (80023b8 <MX_GPIO_Init+0x16c>)
 8002306:	f002 f877 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin|LOG_WARNING_Pin|RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8002310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002314:	f002 f870 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002318:	2337      	movs	r3, #55	; 0x37
 800231a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <MX_GPIO_Init+0x170>)
 800231e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	4822      	ldr	r0, [pc, #136]	; (80023b4 <MX_GPIO_Init+0x168>)
 800232c:	f001 feea 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002330:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002334:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	481a      	ldr	r0, [pc, #104]	; (80023b4 <MX_GPIO_Init+0x168>)
 800234a:	f001 fedb 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800234e:	2301      	movs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f001 fece 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_FPGA_Pin CS_Accelerometer_Pin */
  GPIO_InitStruct.Pin = CS_FPGA_Pin|CS_Accelerometer_Pin;
 8002368:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <MX_GPIO_Init+0x16c>)
 8002382:	f001 febf 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOG_HARDFAULT_Pin LOG_WARNING_Pin RPLIDAR_EN_Pin */
  GPIO_InitStruct.Pin = LOG_HARDFAULT_Pin|LOG_WARNING_Pin|RPLIDAR_EN_Pin;
 8002386:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f001 feaf 	bl	8004104 <HAL_GPIO_Init>

}
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	; 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48001000 	.word	0x48001000
 80023b8:	48000c00 	.word	0x48000c00
 80023bc:	10120000 	.word	0x10120000

080023c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_MspInit+0x44>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_MspInit+0x44>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_MspInit+0x44>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_MspInit+0x44>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x44>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x44>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	2007      	movs	r0, #7
 8002408:	f001 fa3e 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002438:	d124      	bne.n	8002484 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_ADC_MspInit+0x74>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_ADC_MspInit+0x74>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6153      	str	r3, [r2, #20]
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_ADC_MspInit+0x74>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_ADC_MspInit+0x74>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_ADC_MspInit+0x74>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	6153      	str	r3, [r2, #20]
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_ADC_MspInit+0x74>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800246a:	2302      	movs	r3, #2
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246e:	2303      	movs	r3, #3
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f001 fe40 	bl	8004104 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_CRC_MspInit+0x38>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10b      	bne.n	80024ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_CRC_MspInit+0x3c>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_CRC_MspInit+0x3c>)
 80024a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ac:	6153      	str	r3, [r2, #20]
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_CRC_MspInit+0x3c>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023000 	.word	0x40023000
 80024cc:	40021000 	.word	0x40021000

080024d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_I2C_MspInit+0x7c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d127      	bne.n	8002542 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_I2C_MspInit+0x80>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_I2C_MspInit+0x80>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6153      	str	r3, [r2, #20]
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_I2C_MspInit+0x80>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250e:	2312      	movs	r3, #18
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251a:	2304      	movs	r3, #4
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <HAL_I2C_MspInit+0x84>)
 8002526:	f001 fded 	bl	8004104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_I2C_MspInit+0x80>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_I2C_MspInit+0x80>)
 8002530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_I2C_MspInit+0x80>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40005400 	.word	0x40005400
 8002550:	40021000 	.word	0x40021000
 8002554:	48000400 	.word	0x48000400

08002558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_SPI_MspInit+0x8c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d130      	bne.n	80025dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 8002580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	6153      	str	r3, [r2, #20]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_SPI_MspInit+0x90>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80025aa:	23e0      	movs	r3, #224	; 0xe0
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ba:	2305      	movs	r3, #5
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c8:	f001 fd9c 	bl	8004104 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2023      	movs	r0, #35	; 0x23
 80025d2:	f001 f964 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025d6:	2023      	movs	r0, #35	; 0x23
 80025d8:	f001 f97d 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40013000 	.word	0x40013000
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_TIM_Base_MspInit+0x44>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d113      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2037      	movs	r0, #55	; 0x37
 800261c:	f001 f93f 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002620:	2037      	movs	r0, #55	; 0x37
 8002622:	f001 f958 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40001400 	.word	0x40001400
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_UART_MspInit+0x180>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d158      	bne.n	800270c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800265a:	4b58      	ldr	r3, [pc, #352]	; (80027bc <HAL_UART_MspInit+0x184>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b55      	ldr	r3, [pc, #340]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800267c:	6153      	str	r3, [r2, #20]
 800267e:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800268a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800269c:	2305      	movs	r3, #5
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	4846      	ldr	r0, [pc, #280]	; (80027c0 <HAL_UART_MspInit+0x188>)
 80026a8:	f001 fd2c 	bl	8004104 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80026ac:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026ae:	4a46      	ldr	r2, [pc, #280]	; (80027c8 <HAL_UART_MspInit+0x190>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80026d0:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80026dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80026de:	4839      	ldr	r0, [pc, #228]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026e0:	f001 fb1e 	bl	8003d20 <HAL_DMA_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80026ea:	f7ff fe69 	bl	80023c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80026f4:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <HAL_UART_MspInit+0x18c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2034      	movs	r0, #52	; 0x34
 8002700:	f001 f8cd 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002704:	2034      	movs	r0, #52	; 0x34
 8002706:	f001 f8e6 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800270a:	e051      	b.n	80027b0 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==UART5)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <HAL_UART_MspInit+0x194>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d14c      	bne.n	80027b0 <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_UART_MspInit+0x184>)
 800271c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002738:	6153      	str	r3, [r2, #20]
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_UART_MspInit+0x184>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_UART_MspInit+0x184>)
 800274c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002750:	6153      	str	r3, [r2, #20]
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_UART_MspInit+0x184>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002770:	2305      	movs	r3, #5
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4811      	ldr	r0, [pc, #68]	; (80027c0 <HAL_UART_MspInit+0x188>)
 800277c:	f001 fcc2 	bl	8004104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002780:	2304      	movs	r3, #4
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002790:	2305      	movs	r3, #5
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	480d      	ldr	r0, [pc, #52]	; (80027d0 <HAL_UART_MspInit+0x198>)
 800279c:	f001 fcb2 	bl	8004104 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	2035      	movs	r0, #53	; 0x35
 80027a6:	f001 f87a 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80027aa:	2035      	movs	r0, #53	; 0x35
 80027ac:	f001 f893 	bl	80038d6 <HAL_NVIC_EnableIRQ>
}
 80027b0:	bf00      	nop
 80027b2:	3730      	adds	r7, #48	; 0x30
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40004c00 	.word	0x40004c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	48000800 	.word	0x48000800
 80027c4:	20000ffc 	.word	0x20000ffc
 80027c8:	40020430 	.word	0x40020430
 80027cc:	40005000 	.word	0x40005000
 80027d0:	48000c00 	.word	0x48000c00

080027d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_PCD_MspInit+0x80>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d129      	bne.n	800284a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_PCD_MspInit+0x84>)
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_PCD_MspInit+0x84>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	6153      	str	r3, [r2, #20]
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_PCD_MspInit+0x84>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800280e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002820:	230e      	movs	r3, #14
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282e:	f001 fc69 	bl	8004104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_PCD_MspInit+0x84>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <HAL_PCD_MspInit+0x84>)
 8002838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_PCD_MspInit+0x84>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40005c00 	.word	0x40005c00
 8002858:	40021000 	.word	0x40021000

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 f8ba 	bl	8002a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <SPI1_IRQHandler+0x10>)
 80028be:	f003 fb37 	bl	8005f30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20001218 	.word	0x20001218

080028cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <UART4_IRQHandler+0x10>)
 80028d2:	f004 f935 	bl	8006b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20001198 	.word	0x20001198

080028e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <UART5_IRQHandler+0x10>)
 80028e6:	f004 f92b 	bl	8006b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200010c0 	.word	0x200010c0

080028f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM7_IRQHandler+0x10>)
 80028fa:	f003 fcb8 	bl	800626e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20001574 	.word	0x20001574

08002908 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA2_Channel3_IRQHandler+0x10>)
 800290e:	f001 faeb 	bl	8003ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000ffc 	.word	0x20000ffc

0800291c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <SystemInit+0x28>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <SystemInit+0x28>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SystemInit+0x28>)
 8002932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002936:	609a      	str	r2, [r3, #8]
#endif
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002980 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800294c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800294e:	e003      	b.n	8002958 <LoopCopyDataInit>

08002950 <CopyDataInit>:
  bkpt #0

.size  HardFault_Handler, .-HardFault_Handler
*/
CopyDataInit:
	ldr	r3, =_sidata
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002952:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002954:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002956:	3104      	adds	r1, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <LoopForever+0xa>)
	ldr	r3, =_edata
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <LoopForever+0xe>)
	adds	r2, r0, r1
 800295c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800295e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002960:	d3f6      	bcc.n	8002950 <CopyDataInit>
	ldr	r2, =_sbss
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002964:	e002      	b.n	800296c <LoopFillZerobss>

08002966 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002966:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002968:	f842 3b04 	str.w	r3, [r2], #4

0800296c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <LoopForever+0x16>)
	cmp	r2, r3
 800296e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002970:	d3f9      	bcc.n	8002966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002972:	f7ff ffd3 	bl	800291c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002976:	f004 ff8f 	bl	8007898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297a:	f7ff f9b7 	bl	8001cec <main>

0800297e <LoopForever>:

LoopForever:
    b LoopForever
 800297e:	e7fe      	b.n	800297e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002980:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002984:	080079b0 	.word	0x080079b0
	ldr	r0, =_sdata
 8002988:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800298c:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8002990:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8002994:	200015b8 	.word	0x200015b8

08002998 <ADC1_2_IRQHandler>:


    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002998:	e7fe      	b.n	8002998 <ADC1_2_IRQHandler>
	...

0800299c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_Init+0x28>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <HAL_Init+0x28>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ac:	2003      	movs	r0, #3
 80029ae:	f000 ff6b 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 f808 	bl	80029c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b8:	f7ff fd0a 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000

080029c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x54>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_InitTick+0x58>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 ff91 	bl	800390e <HAL_SYSTICK_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00e      	b.n	8002a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b0f      	cmp	r3, #15
 80029fa:	d80a      	bhi.n	8002a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fc:	2200      	movs	r2, #0
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f000 ff4b 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <HAL_InitTick+0x5c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000024 	.word	0x20000024
 8002a20:	2000002c 	.word	0x2000002c
 8002a24:	20000028 	.word	0x20000028

08002a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x20>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_IncTick+0x24>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_IncTick+0x24>)
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000002c 	.word	0x2000002c
 8002a4c:	200015b4 	.word	0x200015b4

08002a50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_GetTick+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	200015b4 	.word	0x200015b4

08002a68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b09a      	sub	sp, #104	; 0x68
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e1c9      	b.n	8002e1c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d176      	bne.n	8002b88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d152      	bne.n	8002b48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fcab 	bl	8002418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13b      	bne.n	8002b48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fd87 	bl	80035e4 <ADC_Disable>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12f      	bne.n	8002b48 <HAL_ADC_Init+0xe0>
 8002ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d12b      	bne.n	8002b48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af8:	f023 0302 	bic.w	r3, r3, #2
 8002afc:	f043 0202 	orr.w	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b24:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <HAL_ADC_Init+0x2d8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <HAL_ADC_Init+0x2dc>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9a      	lsrs	r2, r3, #18
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b3a:	e002      	b.n	8002b42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b64:	d110      	bne.n	8002b88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f023 0312 	bic.w	r3, r3, #18
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 8136 	bne.w	8002e02 <HAL_ADC_Init+0x39a>
 8002b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8131 	bne.w	8002e02 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8129 	bne.w	8002e02 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_Init+0x16c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <HAL_ADC_Init+0x2e0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_Init+0x170>
 8002bd4:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <HAL_ADC_Init+0x2e4>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_Init+0x172>
 8002bd8:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_ADC_Init+0x2e8>)
 8002bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d102      	bne.n	8002bec <HAL_ADC_Init+0x184>
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_ADC_Init+0x2e0>)
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e01a      	b.n	8002c22 <HAL_ADC_Init+0x1ba>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_ADC_Init+0x2e0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <HAL_ADC_Init+0x196>
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e011      	b.n	8002c22 <HAL_ADC_Init+0x1ba>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a54      	ldr	r2, [pc, #336]	; (8002d54 <HAL_ADC_Init+0x2ec>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_ADC_Init+0x1a6>
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_ADC_Init+0x2f0>)
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e009      	b.n	8002c22 <HAL_ADC_Init+0x1ba>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_ADC_Init+0x2f0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_ADC_Init+0x1b6>
 8002c18:	4b4e      	ldr	r3, [pc, #312]	; (8002d54 <HAL_ADC_Init+0x2ec>)
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <HAL_ADC_Init+0x1ba>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_ADC_Init+0x1da>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Init+0x1da>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_Init+0x1dc>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11c      	bne.n	8002c82 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_ADC_Init+0x202>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x202>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_Init+0x204>
 8002c6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e5b      	ldrb	r3, [r3, #25]
 8002c86:	035b      	lsls	r3, r3, #13
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8c:	2a01      	cmp	r2, #1
 8002c8e:	d002      	beq.n	8002c96 <HAL_ADC_Init+0x22e>
 8002c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_Init+0x230>
 8002c96:	2200      	movs	r2, #0
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d11b      	bne.n	8002cee <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7e5b      	ldrb	r3, [r3, #25]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	045a      	lsls	r2, r3, #17
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd0:	e00d      	b.n	8002cee <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d03a      	beq.n	8002d6c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_ADC_Init+0x2ec>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_ADC_Init+0x2a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_ADC_Init+0x2f0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d128      	bne.n	8002d5c <HAL_ADC_Init+0x2f4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002d12:	d012      	beq.n	8002d3a <HAL_ADC_Init+0x2d2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d00a      	beq.n	8002d34 <HAL_ADC_Init+0x2cc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002d26:	d002      	beq.n	8002d2e <HAL_ADC_Init+0x2c6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	e018      	b.n	8002d60 <HAL_ADC_Init+0x2f8>
 8002d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d32:	e015      	b.n	8002d60 <HAL_ADC_Init+0x2f8>
 8002d34:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002d38:	e012      	b.n	8002d60 <HAL_ADC_Init+0x2f8>
 8002d3a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002d3e:	e00f      	b.n	8002d60 <HAL_ADC_Init+0x2f8>
 8002d40:	20000024 	.word	0x20000024
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	50000100 	.word	0x50000100
 8002d4c:	50000300 	.word	0x50000300
 8002d50:	50000700 	.word	0x50000700
 8002d54:	50000400 	.word	0x50000400
 8002d58:	50000500 	.word	0x50000500
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d64:	4313      	orrs	r3, r2
 8002d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d114      	bne.n	8002da4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d88:	f023 0302 	bic.w	r3, r3, #2
 8002d8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7e1b      	ldrb	r3, [r3, #24]
 8002d92:	039a      	lsls	r2, r3, #14
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002da0:	4313      	orrs	r3, r2
 8002da2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_ADC_Init+0x3bc>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002db4:	430b      	orrs	r3, r1
 8002db6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10c      	bne.n	8002dda <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f023 010f 	bic.w	r1, r3, #15
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd8:	e007      	b.n	8002dea <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 020f 	bic.w	r2, r2, #15
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f023 0303 	bic.w	r3, r3, #3
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8002e00:	e00a      	b.n	8002e18 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f023 0312 	bic.w	r3, r3, #18
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3768      	adds	r7, #104	; 0x68
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	fff0c007 	.word	0xfff0c007

08002e28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b09b      	sub	sp, #108	; 0x6c
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x22>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e2cb      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x5ba>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 82af 	bne.w	80033c0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d81c      	bhi.n	8002ea4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	231f      	movs	r3, #31
 8002e80:	4093      	lsls	r3, r2
 8002e82:	43db      	mvns	r3, r3
 8002e84:	4019      	ands	r1, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea2:	e063      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d81e      	bhi.n	8002eea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	3b1e      	subs	r3, #30
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4019      	ands	r1, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	3b1e      	subs	r3, #30
 8002edc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee8:	e040      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b0e      	cmp	r3, #14
 8002ef0:	d81e      	bhi.n	8002f30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	3b3c      	subs	r3, #60	; 0x3c
 8002f06:	221f      	movs	r2, #31
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4019      	ands	r1, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	3b3c      	subs	r3, #60	; 0x3c
 8002f22:	fa00 f203 	lsl.w	r2, r0, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2e:	e01d      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3b5a      	subs	r3, #90	; 0x5a
 8002f44:	221f      	movs	r2, #31
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	3b5a      	subs	r3, #90	; 0x5a
 8002f60:	fa00 f203 	lsl.w	r2, r0, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80e5 	bne.w	8003146 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d91c      	bls.n	8002fbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	4019      	ands	r1, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6898      	ldr	r0, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	3b1e      	subs	r3, #30
 8002fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]
 8002fbc:	e019      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6959      	ldr	r1, [r3, #20]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	2207      	movs	r2, #7
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4019      	ands	r1, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6898      	ldr	r0, [r3, #8]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	3b01      	subs	r3, #1
 8003010:	2b03      	cmp	r3, #3
 8003012:	d84f      	bhi.n	80030b4 <HAL_ADC_ConfigChannel+0x28c>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_ADC_ConfigChannel+0x1f4>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	0800302d 	.word	0x0800302d
 8003020:	0800304f 	.word	0x0800304f
 8003024:	08003071 	.word	0x08003071
 8003028:	08003093 	.word	0x08003093
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003032:	4b9f      	ldr	r3, [pc, #636]	; (80032b0 <HAL_ADC_ConfigChannel+0x488>)
 8003034:	4013      	ands	r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	0691      	lsls	r1, r2, #26
 800303c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800303e:	430a      	orrs	r2, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800304a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800304c:	e07e      	b.n	800314c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003054:	4b96      	ldr	r3, [pc, #600]	; (80032b0 <HAL_ADC_ConfigChannel+0x488>)
 8003056:	4013      	ands	r3, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	0691      	lsls	r1, r2, #26
 800305e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003060:	430a      	orrs	r2, r1
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800306c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800306e:	e06d      	b.n	800314c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003076:	4b8e      	ldr	r3, [pc, #568]	; (80032b0 <HAL_ADC_ConfigChannel+0x488>)
 8003078:	4013      	ands	r3, r2
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	0691      	lsls	r1, r2, #26
 8003080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003082:	430a      	orrs	r2, r1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800308e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003090:	e05c      	b.n	800314c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003098:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <HAL_ADC_ConfigChannel+0x488>)
 800309a:	4013      	ands	r3, r2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	0691      	lsls	r1, r2, #26
 80030a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030a4:	430a      	orrs	r2, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030b2:	e04b      	b.n	800314c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	069b      	lsls	r3, r3, #26
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	069b      	lsls	r3, r3, #26
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	069b      	lsls	r3, r3, #26
 8003130:	429a      	cmp	r2, r3
 8003132:	d10a      	bne.n	800314a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003142:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003144:	e001      	b.n	800314a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_ADC_ConfigChannel+0x324>
      break;
 800314a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d108      	bne.n	800316c <HAL_ADC_ConfigChannel+0x344>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x344>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_ADC_ConfigChannel+0x346>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8131 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d00f      	beq.n	800319c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800319a:	e049      	b.n	8003230 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d91c      	bls.n	80031f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6999      	ldr	r1, [r3, #24]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	3b1b      	subs	r3, #27
 80031d0:	2207      	movs	r2, #7
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4019      	ands	r1, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6898      	ldr	r0, [r3, #8]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	3b1b      	subs	r3, #27
 80031ea:	fa00 f203 	lsl.w	r2, r0, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	619a      	str	r2, [r3, #24]
 80031f6:	e01b      	b.n	8003230 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6959      	ldr	r1, [r3, #20]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	fa00 f203 	lsl.w	r2, r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADC_ConfigChannel+0x41c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_ADC_ConfigChannel+0x48c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x420>
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <HAL_ADC_ConfigChannel+0x490>)
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x422>
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_ADC_ConfigChannel+0x494>)
 800324a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003264:	2b11      	cmp	r3, #17
 8003266:	d105      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003278:	2b12      	cmp	r3, #18
 800327a:	f040 80ac 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800327e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80a5 	bne.w	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003294:	d102      	bne.n	800329c <HAL_ADC_ConfigChannel+0x474>
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_ADC_ConfigChannel+0x48c>)
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e023      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x4bc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_ADC_ConfigChannel+0x48c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10c      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x498>
 80032a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e01a      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x4bc>
 80032ae:	bf00      	nop
 80032b0:	83fff000 	.word	0x83fff000
 80032b4:	50000100 	.word	0x50000100
 80032b8:	50000300 	.word	0x50000300
 80032bc:	50000700 	.word	0x50000700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a4a      	ldr	r2, [pc, #296]	; (80033f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d102      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x4a8>
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e009      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x4bc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_ADC_ConfigChannel+0x5cc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d102      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x4b8>
 80032da:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e001      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x4bc>
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x4dc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x4dc>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_ADC_ConfigChannel+0x4de>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d150      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800330a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_ADC_ConfigChannel+0x504>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x504>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_ADC_ConfigChannel+0x506>
 800332c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800332e:	2b00      	cmp	r3, #0
 8003330:	d13c      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d11d      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x54e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003342:	d118      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_ADC_ConfigChannel+0x5d4>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003366:	e002      	b.n	800336e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3b01      	subs	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003374:	e02e      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b11      	cmp	r3, #17
 800337c:	d10b      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x56e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d106      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003392:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003394:	e01e      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b12      	cmp	r3, #18
 800339c:	d11a      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033aa:	e013      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033be:	e00a      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033d4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	376c      	adds	r7, #108	; 0x6c
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	50000400 	.word	0x50000400
 80033f4:	50000500 	.word	0x50000500
 80033f8:	20000024 	.word	0x20000024
 80033fc:	431bde83 	.word	0x431bde83

08003400 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003400:	b480      	push	{r7}
 8003402:	b099      	sub	sp, #100	; 0x64
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003418:	d102      	bne.n	8003420 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800341a:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	e01a      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d103      	bne.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800342a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e011      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a67      	ldr	r2, [pc, #412]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d102      	bne.n	8003442 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800343c:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	e009      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a64      	ldr	r2, [pc, #400]	; (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d102      	bne.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e001      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b0      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800346a:	2302      	movs	r3, #2
 800346c:	e0a9      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 808d 	bne.w	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8086 	bne.w	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800349c:	d004      	beq.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80034a8:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80034aa:	e000      	b.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80034ac:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80034ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d040      	beq.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ca:	035b      	lsls	r3, r3, #13
 80034cc:	430b      	orrs	r3, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d15c      	bne.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003516:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003518:	2b00      	cmp	r3, #0
 800351a:	d14b      	bne.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800351c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003524:	f023 030f 	bic.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	6811      	ldr	r1, [r2, #0]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	430a      	orrs	r2, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003536:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	e03c      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800353a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003544:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d123      	bne.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003588:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	d112      	bne.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800358e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003596:	f023 030f 	bic.w	r3, r3, #15
 800359a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800359e:	e009      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80035b2:	e000      	b.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80035be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80035c2:	4618      	mov	r0, r3
 80035c4:	3764      	adds	r7, #100	; 0x64
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	50000100 	.word	0x50000100
 80035d4:	50000400 	.word	0x50000400
 80035d8:	50000500 	.word	0x50000500
 80035dc:	50000300 	.word	0x50000300
 80035e0:	50000700 	.word	0x50000700

080035e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <ADC_Disable+0x2c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <ADC_Disable+0x2c>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <ADC_Disable+0x2e>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030d 	and.w	r3, r3, #13
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10f      	bne.n	8003644 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0202 	orr.w	r2, r2, #2
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2203      	movs	r2, #3
 800363a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800363c:	f7ff fa08 	bl	8002a50 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003642:	e022      	b.n	800368a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e01c      	b.n	800369a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003660:	f7ff f9f6 	bl	8002a50 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d90d      	bls.n	800368a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d0e3      	beq.n	8003660 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c0:	4013      	ands	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <__NVIC_SetPriorityGrouping+0x44>)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	60d3      	str	r3, [r2, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <__NVIC_GetPriorityGrouping+0x18>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f003 0307 	and.w	r3, r3, #7
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	db0b      	blt.n	8003732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <__NVIC_EnableIRQ+0x38>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2001      	movs	r0, #1
 800372a:	fa00 f202 	lsl.w	r2, r0, r2
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e100 	.word	0xe000e100

08003744 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db10      	blt.n	8003778 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4909      	ldr	r1, [pc, #36]	; (8003784 <__NVIC_DisableIRQ+0x40>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	3320      	adds	r3, #32
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003774:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff07 	bl	80036a4 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff1c 	bl	80036ec <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff0f 	bl	8003708 <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff1f 	bl	8003744 <__NVIC_DisableIRQ>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff94 	bl	8003844 <SysTick_Config>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e054      	b.n	80039e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7f5b      	ldrb	r3, [r3, #29]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fda0 	bl	8002490 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_CRC_Init+0xc4>)
 8003964:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0218 	bic.w	r2, r2, #24
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e00c      	b.n	8003992 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	461a      	mov	r2, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f946 	bl	8003c14 <HAL_CRCEx_Polynomial_Set>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e028      	b.n	80039e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	795b      	ldrb	r3, [r3, #5]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f04f 32ff 	mov.w	r2, #4294967295
 80039a2:	611a      	str	r2, [r3, #16]
 80039a4:	e004      	b.n	80039b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6912      	ldr	r2, [r2, #16]
 80039ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	04c11db7 	.word	0x04c11db7

080039f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2202      	movs	r2, #2
 8003a04:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d022      	beq.n	8003a64 <HAL_CRC_Calculate+0x74>
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d002      	beq.n	8003a28 <HAL_CRC_Calculate+0x38>
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d017      	beq.n	8003a56 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003a26:	e024      	b.n	8003a72 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e00a      	b.n	8003a44 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	441a      	add	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3301      	adds	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3f0      	bcc.n	8003a2e <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
      break;
 8003a54:	e00d      	b.n	8003a72 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f811 	bl	8003a82 <CRC_Handle_8>
 8003a60:	6138      	str	r0, [r7, #16]
      break;
 8003a62:	e006      	b.n	8003a72 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f898 	bl	8003b9e <CRC_Handle_16>
 8003a6e:	6138      	str	r0, [r7, #16]
      break;
 8003a70:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003a78:	693b      	ldr	r3, [r7, #16]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b089      	sub	sp, #36	; 0x24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e023      	b.n	8003adc <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	440b      	add	r3, r1
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003aae:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	440b      	add	r3, r1
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003abe:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	440b      	add	r3, r1
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003ad2:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d3d6      	bcc.n	8003a94 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d04d      	beq.n	8003b8c <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d116      	bne.n	8003b42 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3301      	adds	r3, #1
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	440b      	add	r3, r1
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b21b      	sxth	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	8b7a      	ldrh	r2, [r7, #26]
 8003b40:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d11f      	bne.n	8003b8c <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	3301      	adds	r3, #1
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	440b      	add	r3, r1
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	8b7a      	ldrh	r2, [r7, #26]
 8003b78:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4413      	add	r3, r2
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e013      	b.n	8003bd8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	041a      	lsls	r2, r3, #16
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	440b      	add	r3, r1
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3e6      	bcc.n	8003bb0 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c24:	231f      	movs	r3, #31
 8003c26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c28:	bf00      	nop
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	613a      	str	r2, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_CRCEx_Polynomial_Set+0x34>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b18      	cmp	r3, #24
 8003c4c:	d846      	bhi.n	8003cdc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003ce3 	.word	0x08003ce3
 8003c58:	08003cdd 	.word	0x08003cdd
 8003c5c:	08003cdd 	.word	0x08003cdd
 8003c60:	08003cdd 	.word	0x08003cdd
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cdd 	.word	0x08003cdd
 8003c6c:	08003cdd 	.word	0x08003cdd
 8003c70:	08003cdd 	.word	0x08003cdd
 8003c74:	08003cd1 	.word	0x08003cd1
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003cdd 	.word	0x08003cdd
 8003c80:	08003cdd 	.word	0x08003cdd
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003cc5 	.word	0x08003cc5
 8003c98:	08003cdd 	.word	0x08003cdd
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cb9 	.word	0x08003cb9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d913      	bls.n	8003ce6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cc2:	e010      	b.n	8003ce6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b07      	cmp	r3, #7
 8003cc8:	d90f      	bls.n	8003cea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b0f      	cmp	r3, #15
 8003cd4:	d90b      	bls.n	8003cee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cda:	e008      	b.n	8003cee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cee:	bf00      	nop
  }
  if (status == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 0118 	bic.w	r1, r3, #24
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e037      	b.n	8003da6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d50:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f97f 	bl	800408c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}  
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA_Start_IT+0x20>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e04a      	b.n	8003e64 <HAL_DMA_Start_IT+0xb6>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d13a      	bne.n	8003e56 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f912 	bl	800402e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 020e 	orr.w	r2, r2, #14
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e00f      	b.n	8003e44 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 020a 	orr.w	r2, r2, #10
 8003e32:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e005      	b.n	8003e62 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d005      	beq.n	8003e8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e027      	b.n	8003ede <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 020e 	bic.w	r2, r2, #14
 8003e9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
    } 
  }
  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	2204      	movs	r2, #4
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d024      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x72>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01f      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	2104      	movs	r1, #4
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d06a      	beq.n	8004026 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003f58:	e065      	b.n	8004026 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2202      	movs	r2, #2
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0xdc>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d027      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 020a 	bic.w	r2, r2, #10
 8003f90:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d035      	beq.n	8004026 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003fc2:	e030      	b.n	8004026 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2208      	movs	r2, #8
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d028      	beq.n	8004026 <HAL_DMA_IRQHandler+0x13e>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d023      	beq.n	8004026 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 020e 	bic.w	r2, r2, #14
 8003fec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
    }
  }
}  
 8004024:	e7ff      	b.n	8004026 <HAL_DMA_IRQHandler+0x13e>
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f202 	lsl.w	r2, r1, r2
 800404a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b10      	cmp	r3, #16
 800405a:	d108      	bne.n	800406e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800406c:	e007      	b.n	800407e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <DMA_CalcBaseAndBitshift+0x60>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d80f      	bhi.n	80040c0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <DMA_CalcBaseAndBitshift+0x64>)
 80040a8:	4413      	add	r3, r2
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <DMA_CalcBaseAndBitshift+0x68>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	009a      	lsls	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <DMA_CalcBaseAndBitshift+0x6c>)
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80040be:	e00e      	b.n	80040de <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <DMA_CalcBaseAndBitshift+0x70>)
 80040c8:	4413      	add	r3, r2
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <DMA_CalcBaseAndBitshift+0x68>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <DMA_CalcBaseAndBitshift+0x74>)
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40020407 	.word	0x40020407
 80040f0:	bffdfff8 	.word	0xbffdfff8
 80040f4:	cccccccd 	.word	0xcccccccd
 80040f8:	40020000 	.word	0x40020000
 80040fc:	bffdfbf8 	.word	0xbffdfbf8
 8004100:	40020400 	.word	0x40020400

08004104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004112:	e154      	b.n	80043be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8146 	beq.w	80043b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d00b      	beq.n	800414c <HAL_GPIO_Init+0x48>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d007      	beq.n	800414c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004140:	2b11      	cmp	r3, #17
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b12      	cmp	r3, #18
 800414a:	d130      	bne.n	80041ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004182:	2201      	movs	r2, #1
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0201 	and.w	r2, r3, #1
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0xea>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b12      	cmp	r3, #18
 80041ec:	d123      	bne.n	8004236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	08da      	lsrs	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3208      	adds	r2, #8
 80041f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	220f      	movs	r2, #15
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	08da      	lsrs	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3208      	adds	r2, #8
 8004230:	6939      	ldr	r1, [r7, #16]
 8004232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0203 	and.w	r2, r3, #3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80a0 	beq.w	80043b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004278:	4b58      	ldr	r3, [pc, #352]	; (80043dc <HAL_GPIO_Init+0x2d8>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	4a57      	ldr	r2, [pc, #348]	; (80043dc <HAL_GPIO_Init+0x2d8>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6193      	str	r3, [r2, #24]
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <HAL_GPIO_Init+0x2d8>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004290:	4a53      	ldr	r2, [pc, #332]	; (80043e0 <HAL_GPIO_Init+0x2dc>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042ba:	d019      	beq.n	80042f0 <HAL_GPIO_Init+0x1ec>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a49      	ldr	r2, [pc, #292]	; (80043e4 <HAL_GPIO_Init+0x2e0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_GPIO_Init+0x1e8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a48      	ldr	r2, [pc, #288]	; (80043e8 <HAL_GPIO_Init+0x2e4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00d      	beq.n	80042e8 <HAL_GPIO_Init+0x1e4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a47      	ldr	r2, [pc, #284]	; (80043ec <HAL_GPIO_Init+0x2e8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <HAL_GPIO_Init+0x1e0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a46      	ldr	r2, [pc, #280]	; (80043f0 <HAL_GPIO_Init+0x2ec>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_GPIO_Init+0x1dc>
 80042dc:	2304      	movs	r3, #4
 80042de:	e008      	b.n	80042f2 <HAL_GPIO_Init+0x1ee>
 80042e0:	2305      	movs	r3, #5
 80042e2:	e006      	b.n	80042f2 <HAL_GPIO_Init+0x1ee>
 80042e4:	2303      	movs	r3, #3
 80042e6:	e004      	b.n	80042f2 <HAL_GPIO_Init+0x1ee>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e002      	b.n	80042f2 <HAL_GPIO_Init+0x1ee>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_GPIO_Init+0x1ee>
 80042f0:	2300      	movs	r3, #0
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	f002 0203 	and.w	r2, r2, #3
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	4093      	lsls	r3, r2
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004302:	4937      	ldr	r1, [pc, #220]	; (80043e0 <HAL_GPIO_Init+0x2dc>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004310:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004334:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800435e:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004388:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f aea3 	bne.w	8004114 <HAL_GPIO_Init+0x10>
  }
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40010000 	.word	0x40010000
 80043e4:	48000400 	.word	0x48000400
 80043e8:	48000800 	.word	0x48000800
 80043ec:	48000c00 	.word	0x48000c00
 80043f0:	48001000 	.word	0x48001000
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004414:	e002      	b.n	800441c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e081      	b.n	800453e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fe f83e 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e006      	b.n	80044b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d104      	bne.n	80044c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	d138      	bne.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004566:	2302      	movs	r3, #2
 8004568:	e032      	b.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	; 0x24
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004598:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d139      	bne.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e033      	b.n	8004668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800462e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004676:	b08b      	sub	sp, #44	; 0x2c
 8004678:	af06      	add	r7, sp, #24
 800467a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0d0      	b.n	8004828 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fe f89a 	bl	80027d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2203      	movs	r2, #3
 80046a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f003 f8b6 	bl	800781e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e04c      	b.n	8004752 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	440b      	add	r3, r1
 80046c8:	3301      	adds	r3, #1
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	440b      	add	r3, r1
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	b298      	uxth	r0, r3
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3336      	adds	r3, #54	; 0x36
 80046f6:	4602      	mov	r2, r0
 80046f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	3303      	adds	r3, #3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	440b      	add	r3, r1
 800471e:	3338      	adds	r3, #56	; 0x38
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	333c      	adds	r3, #60	; 0x3c
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	3340      	adds	r3, #64	; 0x40
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	3301      	adds	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3ad      	bcc.n	80046b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e044      	b.n	80047ec <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3301      	adds	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3b5      	bcc.n	8004762 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	687e      	ldr	r6, [r7, #4]
 80047fe:	466d      	mov	r5, sp
 8004800:	f106 0410 	add.w	r4, r6, #16
 8004804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	1d33      	adds	r3, r6, #4
 800480e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f003 f81f 	bl	8007854 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004836:	af00      	add	r7, sp, #0
 8004838:	1d3b      	adds	r3, r7, #4
 800483a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f000 bef4 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 816a 	beq.w	8004b2e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800485a:	4bb3      	ldr	r3, [pc, #716]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004866:	4bb0      	ldr	r3, [pc, #704]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d159      	bne.n	8004926 <HAL_RCC_OscConfig+0xf6>
 8004872:	4bad      	ldr	r3, [pc, #692]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d152      	bne.n	8004926 <HAL_RCC_OscConfig+0xf6>
 8004880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004884:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004894:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HAL_RCC_OscConfig+0x82>
 80048ac:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	e015      	b.n	80048de <HAL_RCC_OscConfig+0xae>
 80048b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80048c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80048ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80048da:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80048e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80048ea:	fa92 f2a2 	rbit	r2, r2
 80048ee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80048f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80048f6:	fab2 f282 	clz	r2, r2
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	f042 0220 	orr.w	r2, r2, #32
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f002 021f 	and.w	r2, r2, #31
 8004906:	2101      	movs	r1, #1
 8004908:	fa01 f202 	lsl.w	r2, r1, r2
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 810c 	beq.w	8004b2c <HAL_RCC_OscConfig+0x2fc>
 8004914:	1d3b      	adds	r3, r7, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 8106 	bne.w	8004b2c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f000 be86 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x110>
 8004932:	4b7d      	ldr	r3, [pc, #500]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e030      	b.n	80049a2 <HAL_RCC_OscConfig+0x172>
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x134>
 800494a:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a76      	ldr	r2, [pc, #472]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a73      	ldr	r2, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800495c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e01e      	b.n	80049a2 <HAL_RCC_OscConfig+0x172>
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x15a>
 8004970:	4b6d      	ldr	r3, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6c      	ldr	r2, [pc, #432]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e00b      	b.n	80049a2 <HAL_RCC_OscConfig+0x172>
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a66      	ldr	r2, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 800499c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049a2:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	495d      	ldr	r1, [pc, #372]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d059      	beq.n	8004a74 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe f846 	bl	8002a50 <HAL_GetTick>
 80049c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ca:	f7fe f841 	bl	8002a50 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d902      	bls.n	80049e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	f000 be29 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
 80049e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80049f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f8:	fab3 f383 	clz	r3, r3
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_OscConfig+0x1e2>
 8004a0c:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x20e>
 8004a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a4a:	fa92 f2a2 	rbit	r2, r2
 8004a4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a52:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a56:	fab2 f282 	clz	r2, r2
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	f042 0220 	orr.w	r2, r2, #32
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	f002 021f 	and.w	r2, r2, #31
 8004a66:	2101      	movs	r1, #1
 8004a68:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ab      	beq.n	80049ca <HAL_RCC_OscConfig+0x19a>
 8004a72:	e05c      	b.n	8004b2e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd ffec 	bl	8002a50 <HAL_GetTick>
 8004a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7e:	f7fd ffe7 	bl	8002a50 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	; 0x64
 8004a8c:	d902      	bls.n	8004a94 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	f000 bdcf 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
 8004a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004aa8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x296>
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x2c2>
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ade:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ae2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_RCC_OscConfig+0x2f8>)
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004af6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004afa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004afe:	fa92 f2a2 	rbit	r2, r2
 8004b02:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004b06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004b0a:	fab2 f282 	clz	r2, r2
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f002 021f 	and.w	r2, r2, #31
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ab      	bne.n	8004a7e <HAL_RCC_OscConfig+0x24e>
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_OscConfig+0x2fe>
 8004b28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 816f 	beq.w	8004e1c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b3e:	4bd0      	ldr	r3, [pc, #832]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b4a:	4bcd      	ldr	r3, [pc, #820]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d16c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x400>
 8004b56:	4bca      	ldr	r3, [pc, #808]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d166      	bne.n	8004c30 <HAL_RCC_OscConfig+0x400>
 8004b62:	2302      	movs	r3, #2
 8004b64:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_OscConfig+0x362>
 8004b8c:	4bbc      	ldr	r3, [pc, #752]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	e013      	b.n	8004bba <HAL_RCC_OscConfig+0x38a>
 8004b92:	2302      	movs	r3, #2
 8004b94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004baa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004bb6:	4bb2      	ldr	r3, [pc, #712]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004bc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004bcc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004bd0:	fab2 f282 	clz	r2, r2
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	f042 0220 	orr.w	r2, r2, #32
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	f002 021f 	and.w	r2, r2, #31
 8004be0:	2101      	movs	r1, #1
 8004be2:	fa01 f202 	lsl.w	r2, r1, r2
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3cc>
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f000 bd1b 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4ba0      	ldr	r3, [pc, #640]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	21f8      	movs	r1, #248	; 0xf8
 8004c0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004c14:	fa91 f1a1 	rbit	r1, r1
 8004c18:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004c1c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c20:	fab1 f181 	clz	r1, r1
 8004c24:	b2c9      	uxtb	r1, r1
 8004c26:	408b      	lsls	r3, r1
 8004c28:	4995      	ldr	r1, [pc, #596]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e0f5      	b.n	8004e1c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8085 	beq.w	8004d46 <HAL_RCC_OscConfig+0x516>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004c4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	461a      	mov	r2, r3
 8004c64:	2301      	movs	r3, #1
 8004c66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fd fef2 	bl	8002a50 <HAL_GetTick>
 8004c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd feed 	bl	8002a50 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	f000 bcd5 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x488>
 8004cb2:	4b73      	ldr	r3, [pc, #460]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	e013      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4b0>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004cd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004cdc:	4b68      	ldr	r3, [pc, #416]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ce6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004cea:	fa92 f2a2 	rbit	r2, r2
 8004cee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004cf2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004cf6:	fab2 f282 	clz	r2, r2
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f042 0220 	orr.w	r2, r2, #32
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f002 021f 	and.w	r2, r2, #31
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0af      	beq.n	8004c72 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	21f8      	movs	r1, #248	; 0xf8
 8004d22:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d2a:	fa91 f1a1 	rbit	r1, r1
 8004d2e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004d32:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d36:	fab1 f181 	clz	r1, r1
 8004d3a:	b2c9      	uxtb	r1, r1
 8004d3c:	408b      	lsls	r3, r1
 8004d3e:	4950      	ldr	r1, [pc, #320]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	e06a      	b.n	8004e1c <HAL_RCC_OscConfig+0x5ec>
 8004d46:	2301      	movs	r3, #1
 8004d48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fd fe6d 	bl	8002a50 <HAL_GetTick>
 8004d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fd fe68 	bl	8002a50 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d902      	bls.n	8004d92 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	f000 bc50 	b.w	8005632 <HAL_RCC_OscConfig+0xe02>
 8004d92:	2302      	movs	r3, #2
 8004d94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d9c:	fa93 f3a3 	rbit	r3, r3
 8004da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x592>
 8004dbc:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e013      	b.n	8004dea <HAL_RCC_OscConfig+0x5ba>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dcc:	fa93 f3a3 	rbit	r3, r3
 8004dd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004dda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_OscConfig+0x650>)
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2202      	movs	r2, #2
 8004dec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004df0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004df4:	fa92 f2a2 	rbit	r2, r2
 8004df8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004dfc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004e00:	fab2 f282 	clz	r2, r2
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	f042 0220 	orr.w	r2, r2, #32
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	f002 021f 	and.w	r2, r2, #31
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f202 	lsl.w	r2, r1, r2
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1af      	bne.n	8004d7c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80da 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d069      	beq.n	8004f0a <HAL_RCC_OscConfig+0x6da>
 8004e36:	2301      	movs	r3, #1
 8004e38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_OscConfig+0x654>)
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e60:	f7fd fdf6 	bl	8002a50 <HAL_GetTick>
 8004e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e68:	e00e      	b.n	8004e88 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fdf1 	bl	8002a50 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d906      	bls.n	8004e88 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e3d9      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	10908120 	.word	0x10908120
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	fa93 f2a3 	rbit	r2, r3
 8004eac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	fa93 f2a3 	rbit	r2, r3
 8004ec4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004ec8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eca:	4ba5      	ldr	r3, [pc, #660]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8004ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ece:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	fa93 f1a3 	rbit	r1, r3
 8004ee0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004ee4:	6019      	str	r1, [r3, #0]
  return result;
 8004ee6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0b0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x63a>
 8004f08:	e06a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7b0>
 8004f0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004f20:	601a      	str	r2, [r3, #0]
  return result;
 8004f22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004f26:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_RCC_OscConfig+0x934>)
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fd fd88 	bl	8002a50 <HAL_GetTick>
 8004f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f44:	e009      	b.n	8004f5a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fd fd83 	bl	8002a50 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e36b      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 8004f5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004f5e:	2202      	movs	r2, #2
 8004f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fa93 f2a3 	rbit	r2, r3
 8004f6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004f76:	2202      	movs	r2, #2
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f8e:	2202      	movs	r2, #2
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	fa93 f2a3 	rbit	r2, r3
 8004f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004fa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa2:	4b6f      	ldr	r3, [pc, #444]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8004fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004faa:	2102      	movs	r1, #2
 8004fac:	6019      	str	r1, [r3, #0]
 8004fae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	fa93 f1a3 	rbit	r1, r3
 8004fb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004fbc:	6019      	str	r1, [r3, #0]
  return result;
 8004fbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1b2      	bne.n	8004f46 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8158 	beq.w	80052a0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff6:	4b5a      	ldr	r3, [pc, #360]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d112      	bne.n	8005028 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b57      	ldr	r3, [pc, #348]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005016:	f107 0308 	add.w	r3, r7, #8
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b4f      	ldr	r3, [pc, #316]	; (8005168 <HAL_RCC_OscConfig+0x938>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d11a      	bne.n	800506a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005034:	4b4c      	ldr	r3, [pc, #304]	; (8005168 <HAL_RCC_OscConfig+0x938>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a4b      	ldr	r2, [pc, #300]	; (8005168 <HAL_RCC_OscConfig+0x938>)
 800503a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005040:	f7fd fd06 	bl	8002a50 <HAL_GetTick>
 8005044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e009      	b.n	800505e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fd fd01 	bl	8002a50 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e2e9      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505e:	4b42      	ldr	r3, [pc, #264]	; (8005168 <HAL_RCC_OscConfig+0x938>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x852>
 8005074:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a39      	ldr	r2, [pc, #228]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6213      	str	r3, [r2, #32]
 8005080:	e02f      	b.n	80050e2 <HAL_RCC_OscConfig+0x8b2>
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_OscConfig+0x876>
 800508c:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a33      	ldr	r2, [pc, #204]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	4b31      	ldr	r3, [pc, #196]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4a30      	ldr	r2, [pc, #192]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 800509e:	f023 0304 	bic.w	r3, r3, #4
 80050a2:	6213      	str	r3, [r2, #32]
 80050a4:	e01d      	b.n	80050e2 <HAL_RCC_OscConfig+0x8b2>
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d10c      	bne.n	80050ca <HAL_RCC_OscConfig+0x89a>
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6213      	str	r3, [r2, #32]
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	e00b      	b.n	80050e2 <HAL_RCC_OscConfig+0x8b2>
 80050ca:	4b25      	ldr	r3, [pc, #148]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	4a24      	ldr	r2, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6213      	str	r3, [r2, #32]
 80050d6:	4b22      	ldr	r3, [pc, #136]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d06b      	beq.n	80051c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ec:	f7fd fcb0 	bl	8002a50 <HAL_GetTick>
 80050f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f4:	e00b      	b.n	800510e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fd fcab 	bl	8002a50 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e291      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 800510e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005112:	2202      	movs	r2, #2
 8005114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800513c:	601a      	str	r2, [r3, #0]
  return result;
 800513e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005142:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d109      	bne.n	800516c <HAL_RCC_OscConfig+0x93c>
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <HAL_RCC_OscConfig+0x930>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x958>
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000
 8005164:	10908120 	.word	0x10908120
 8005168:	40007000 	.word	0x40007000
 800516c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005170:	2202      	movs	r2, #2
 8005172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	fa93 f2a3 	rbit	r2, r3
 800517e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	4bbb      	ldr	r3, [pc, #748]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800518c:	2102      	movs	r1, #2
 800518e:	6011      	str	r1, [r2, #0]
 8005190:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	fa92 f1a2 	rbit	r1, r2
 800519a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800519e:	6011      	str	r1, [r2, #0]
  return result;
 80051a0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	fab2 f282 	clz	r2, r2
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	f002 021f 	and.w	r2, r2, #31
 80051b6:	2101      	movs	r1, #1
 80051b8:	fa01 f202 	lsl.w	r2, r1, r2
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d099      	beq.n	80050f6 <HAL_RCC_OscConfig+0x8c6>
 80051c2:	e063      	b.n	800528c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c4:	f7fd fc44 	bl	8002a50 <HAL_GetTick>
 80051c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051cc:	e00b      	b.n	80051e6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fd fc3f 	bl	8002a50 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e225      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 80051e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051ea:	2202      	movs	r2, #2
 80051ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	fa93 f2a3 	rbit	r2, r3
 80051f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005202:	2202      	movs	r2, #2
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	fa93 f2a3 	rbit	r2, r3
 8005210:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005214:	601a      	str	r2, [r3, #0]
  return result;
 8005216:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800521a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521c:	fab3 f383 	clz	r3, r3
 8005220:	b2db      	uxtb	r3, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0xa06>
 8005230:	4b90      	ldr	r3, [pc, #576]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	e00d      	b.n	8005252 <HAL_RCC_OscConfig+0xa22>
 8005236:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800523a:	2202      	movs	r2, #2
 800523c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	fa93 f2a3 	rbit	r2, r3
 8005248:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	4b89      	ldr	r3, [pc, #548]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005256:	2102      	movs	r1, #2
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fa92 f1a2 	rbit	r1, r2
 8005264:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005268:	6011      	str	r1, [r2, #0]
  return result;
 800526a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	fab2 f282 	clz	r2, r2
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	f002 021f 	and.w	r2, r2, #31
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f202 	lsl.w	r2, r1, r2
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1a0      	bne.n	80051ce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800528c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b77      	ldr	r3, [pc, #476]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	4a76      	ldr	r2, [pc, #472]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 81c2 	beq.w	8005630 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ac:	4b71      	ldr	r3, [pc, #452]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 030c 	and.w	r3, r3, #12
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	f000 819c 	beq.w	80055f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	f040 8114 	bne.w	80054ee <HAL_RCC_OscConfig+0xcbe>
 80052c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80052ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	fa93 f2a3 	rbit	r2, r3
 80052da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80052de:	601a      	str	r2, [r3, #0]
  return result;
 80052e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80052e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fc:	f7fd fba8 	bl	8002a50 <HAL_GetTick>
 8005300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005304:	e009      	b.n	800531a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005306:	f7fd fba3 	bl	8002a50 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e18b      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 800531a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800531e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005324:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	fa93 f2a3 	rbit	r2, r3
 800532e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005332:	601a      	str	r2, [r3, #0]
  return result;
 8005334:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005338:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_RCC_OscConfig+0xb24>
 800534e:	4b49      	ldr	r3, [pc, #292]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	e01b      	b.n	800538c <HAL_RCC_OscConfig+0xb5c>
 8005354:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	fa93 f2a3 	rbit	r2, r3
 8005368:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	fa93 f2a3 	rbit	r2, r3
 8005382:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	4b3a      	ldr	r3, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005390:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	fa92 f1a2 	rbit	r1, r2
 80053a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80053a4:	6011      	str	r1, [r2, #0]
  return result;
 80053a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	fab2 f282 	clz	r2, r2
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	f042 0220 	orr.w	r2, r2, #32
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f002 021f 	and.w	r2, r2, #31
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f202 	lsl.w	r2, r1, r2
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d19e      	bne.n	8005306 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c8:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	430b      	orrs	r3, r1
 80053de:	4925      	ldr	r1, [pc, #148]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
 80053e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	fa93 f2a3 	rbit	r2, r3
 80053f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053fc:	601a      	str	r2, [r3, #0]
  return result;
 80053fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005402:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800540e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	461a      	mov	r2, r3
 8005416:	2301      	movs	r3, #1
 8005418:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fd fb19 	bl	8002a50 <HAL_GetTick>
 800541e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005422:	e009      	b.n	8005438 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd fb14 	bl	8002a50 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0fc      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 8005438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800543c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f2a3 	rbit	r2, r3
 800544c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005450:	601a      	str	r2, [r3, #0]
  return result;
 8005452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d105      	bne.n	8005478 <HAL_RCC_OscConfig+0xc48>
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <HAL_RCC_OscConfig+0xc44>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	e01e      	b.n	80054b0 <HAL_RCC_OscConfig+0xc80>
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800547c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	fa93 f2a3 	rbit	r2, r3
 800548c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	fa93 f2a3 	rbit	r2, r3
 80054a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	4b63      	ldr	r3, [pc, #396]	; (800563c <HAL_RCC_OscConfig+0xe0c>)
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	fa92 f1a2 	rbit	r1, r2
 80054c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054c8:	6011      	str	r1, [r2, #0]
  return result;
 80054ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d09b      	beq.n	8005424 <HAL_RCC_OscConfig+0xbf4>
 80054ec:	e0a0      	b.n	8005630 <HAL_RCC_OscConfig+0xe00>
 80054ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	fa93 f2a3 	rbit	r2, r3
 8005502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005506:	601a      	str	r2, [r3, #0]
  return result;
 8005508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800550c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005518:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fd fa94 	bl	8002a50 <HAL_GetTick>
 8005528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800552c:	e009      	b.n	8005542 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800552e:	f7fd fa8f 	bl	8002a50 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e077      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
 8005542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800554a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	fa93 f2a3 	rbit	r2, r3
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	601a      	str	r2, [r3, #0]
  return result;
 800555c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005560:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	b2db      	uxtb	r3, r3
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d102      	bne.n	800557c <HAL_RCC_OscConfig+0xd4c>
 8005576:	4b31      	ldr	r3, [pc, #196]	; (800563c <HAL_RCC_OscConfig+0xe0c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	e01b      	b.n	80055b4 <HAL_RCC_OscConfig+0xd84>
 800557c:	f107 0320 	add.w	r3, r7, #32
 8005580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	f107 0320 	add.w	r3, r7, #32
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	fa93 f2a3 	rbit	r2, r3
 8005590:	f107 031c 	add.w	r3, r7, #28
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f107 0318 	add.w	r3, r7, #24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	fa93 f2a3 	rbit	r2, r3
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_RCC_OscConfig+0xe0c>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f107 0210 	add.w	r2, r7, #16
 80055b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055bc:	6011      	str	r1, [r2, #0]
 80055be:	f107 0210 	add.w	r2, r7, #16
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	fa92 f1a2 	rbit	r1, r2
 80055c8:	f107 020c 	add.w	r2, r7, #12
 80055cc:	6011      	str	r1, [r2, #0]
  return result;
 80055ce:	f107 020c 	add.w	r2, r7, #12
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	fab2 f282 	clz	r2, r2
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	f042 0220 	orr.w	r2, r2, #32
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	f002 021f 	and.w	r2, r2, #31
 80055e4:	2101      	movs	r1, #1
 80055e6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d19e      	bne.n	800552e <HAL_RCC_OscConfig+0xcfe>
 80055f0:	e01e      	b.n	8005630 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e018      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_RCC_OscConfig+0xe0c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005608:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800560c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	429a      	cmp	r2, r3
 8005618:	d108      	bne.n	800562c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800561a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800561e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000

08005640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b09e      	sub	sp, #120	; 0x78
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e162      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b90      	ldr	r3, [pc, #576]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d910      	bls.n	8005688 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b8d      	ldr	r3, [pc, #564]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 0207 	bic.w	r2, r3, #7
 800566e:	498b      	ldr	r1, [pc, #556]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b89      	ldr	r3, [pc, #548]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e14a      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b82      	ldr	r3, [pc, #520]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	497f      	ldr	r1, [pc, #508]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80dc 	beq.w	800586c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d13c      	bne.n	8005736 <HAL_RCC_ClockConfig+0xf6>
 80056bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80056ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xa6>
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	e00f      	b.n	8005706 <HAL_RCC_ClockConfig+0xc6>
 80056e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	667b      	str	r3, [r7, #100]	; 0x64
 80056f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056f8:	663b      	str	r3, [r7, #96]	; 0x60
 80056fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fc:	fa93 f3a3 	rbit	r3, r3
 8005700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005702:	4b67      	ldr	r3, [pc, #412]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800570a:	65ba      	str	r2, [r7, #88]	; 0x58
 800570c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800570e:	fa92 f2a2 	rbit	r2, r2
 8005712:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005716:	fab2 f282 	clz	r2, r2
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	f042 0220 	orr.w	r2, r2, #32
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f202 	lsl.w	r2, r1, r2
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d17b      	bne.n	800582a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0f3      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d13c      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x178>
 800573e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d102      	bne.n	8005768 <HAL_RCC_ClockConfig+0x128>
 8005762:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	e00f      	b.n	8005788 <HAL_RCC_ClockConfig+0x148>
 8005768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	647b      	str	r3, [r7, #68]	; 0x44
 8005776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800577a:	643b      	str	r3, [r7, #64]	; 0x40
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	fa93 f3a3 	rbit	r3, r3
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005784:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578c:	63ba      	str	r2, [r7, #56]	; 0x38
 800578e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005790:	fa92 f2a2 	rbit	r2, r2
 8005794:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005798:	fab2 f282 	clz	r2, r2
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	f042 0220 	orr.w	r2, r2, #32
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	f002 021f 	and.w	r2, r2, #31
 80057a8:	2101      	movs	r1, #1
 80057aa:	fa01 f202 	lsl.w	r2, r1, r2
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d13a      	bne.n	800582a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0b2      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
 80057b8:	2302      	movs	r3, #2
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c6:	fab3 f383 	clz	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x1a0>
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	e00d      	b.n	80057fc <HAL_RCC_ClockConfig+0x1bc>
 80057e0:	2302      	movs	r3, #2
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
 80057ec:	2302      	movs	r3, #2
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2202      	movs	r2, #2
 80057fe:	61ba      	str	r2, [r7, #24]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	fa92 f2a2 	rbit	r2, r2
 8005806:	617a      	str	r2, [r7, #20]
  return result;
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	fab2 f282 	clz	r2, r2
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	f002 021f 	and.w	r2, r2, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f202 	lsl.w	r2, r1, r2
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e079      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	491a      	ldr	r1, [pc, #104]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7fd f908 	bl	8002a50 <HAL_GetTick>
 8005840:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fd f904 	bl	8002a50 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e061      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <HAL_RCC_ClockConfig+0x260>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d214      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	4906      	ldr	r1, [pc, #24]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RCC_ClockConfig+0x25c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e040      	b.n	800591e <HAL_RCC_ClockConfig+0x2de>
 800589c:	40022000 	.word	0x40022000
 80058a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <HAL_RCC_ClockConfig+0x2e8>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	491a      	ldr	r1, [pc, #104]	; (8005928 <HAL_RCC_ClockConfig+0x2e8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ce:	4b16      	ldr	r3, [pc, #88]	; (8005928 <HAL_RCC_ClockConfig+0x2e8>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4912      	ldr	r1, [pc, #72]	; (8005928 <HAL_RCC_ClockConfig+0x2e8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058e2:	f000 f829 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80058e6:	4601      	mov	r1, r0
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <HAL_RCC_ClockConfig+0x2e8>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f0:	22f0      	movs	r2, #240	; 0xf0
 80058f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	fa92 f2a2 	rbit	r2, r2
 80058fa:	60fa      	str	r2, [r7, #12]
  return result;
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	fab2 f282 	clz	r2, r2
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	40d3      	lsrs	r3, r2
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x2ec>)
 8005908:	5cd3      	ldrb	r3, [r2, r3]
 800590a:	fa21 f303 	lsr.w	r3, r1, r3
 800590e:	4a08      	ldr	r2, [pc, #32]	; (8005930 <HAL_RCC_ClockConfig+0x2f0>)
 8005910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <HAL_RCC_ClockConfig+0x2f4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fd f856 	bl	80029c8 <HAL_InitTick>
  
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3778      	adds	r7, #120	; 0x78
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	08007970 	.word	0x08007970
 8005930:	20000024 	.word	0x20000024
 8005934:	20000028 	.word	0x20000028

08005938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005938:	b480      	push	{r7}
 800593a:	b08b      	sub	sp, #44	; 0x2c
 800593c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005952:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b04      	cmp	r3, #4
 8005960:	d002      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x30>
 8005962:	2b08      	cmp	r3, #8
 8005964:	d003      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x36>
 8005966:	e03c      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800596a:	623b      	str	r3, [r7, #32]
      break;
 800596c:	e03c      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	fa92 f2a2 	rbit	r2, r2
 8005980:	607a      	str	r2, [r7, #4]
  return result;
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	fab2 f282 	clz	r2, r2
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	40d3      	lsrs	r3, r2
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800598e:	5cd3      	ldrb	r3, [r2, r3]
 8005990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005992:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	220f      	movs	r2, #15
 800599c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	fa92 f2a2 	rbit	r2, r2
 80059a4:	60fa      	str	r2, [r7, #12]
  return result;
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	fab2 f282 	clz	r2, r2
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	40d3      	lsrs	r3, r2
 80059b0:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 80059b2:	5cd3      	ldrb	r3, [r2, r3]
 80059b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059c0:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
 80059d0:	e004      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4a0c      	ldr	r2, [pc, #48]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	623b      	str	r3, [r7, #32]
      break;
 80059e0:	e002      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80059e4:	623b      	str	r3, [r7, #32]
      break;
 80059e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e8:	6a3b      	ldr	r3, [r7, #32]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	372c      	adds	r7, #44	; 0x2c
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000
 80059fc:	007a1200 	.word	0x007a1200
 8005a00:	08007988 	.word	0x08007988
 8005a04:	08007998 	.word	0x08007998
 8005a08:	003d0900 	.word	0x003d0900

08005a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000024 	.word	0x20000024

08005a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005a2a:	f7ff ffef 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	fa92 f2a2 	rbit	r2, r2
 8005a44:	603a      	str	r2, [r7, #0]
  return result;
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	fab2 f282 	clz	r2, r2
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	40d3      	lsrs	r3, r2
 8005a50:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	08007980 	.word	0x08007980

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a6e:	f7ff ffcd 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a72:	4601      	mov	r1, r0
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005a7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	fa92 f2a2 	rbit	r2, r2
 8005a88:	603a      	str	r2, [r7, #0]
  return result;
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	fab2 f282 	clz	r2, r2
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	40d3      	lsrs	r3, r2
 8005a94:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a96:	5cd3      	ldrb	r3, [r2, r3]
 8005a98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	08007980 	.word	0x08007980

08005aac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b092      	sub	sp, #72	; 0x48
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80d7 	beq.w	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad0:	4b4e      	ldr	r3, [pc, #312]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10e      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	61d3      	str	r3, [r2, #28]
 8005ae8:	4b48      	ldr	r3, [pc, #288]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afa:	4b45      	ldr	r3, [pc, #276]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d118      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a41      	ldr	r2, [pc, #260]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b12:	f7fc ff9d 	bl	8002a50 <HAL_GetTick>
 8005b16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b18:	e008      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b1a:	f7fc ff99 	bl	8002a50 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b64      	cmp	r3, #100	; 0x64
 8005b26:	d901      	bls.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e169      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2c:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b38:	4b34      	ldr	r3, [pc, #208]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8084 	beq.w	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d07c      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b58:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b72:	fab3 f383 	clz	r3, r3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	461a      	mov	r2, r3
 8005b82:	2301      	movs	r3, #1
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b96:	fab3 f383 	clz	r3, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04b      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fc ff49 	bl	8002a50 <HAL_GetTick>
 8005bbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc ff45 	bl	8002a50 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e113      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	fa93 f3a3 	rbit	r3, r3
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	2302      	movs	r3, #2
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	61fb      	str	r3, [r7, #28]
  return result;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d108      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c06:	4b01      	ldr	r3, [pc, #4]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	e00d      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40007000 	.word	0x40007000
 8005c14:	10908100 	.word	0x10908100
 8005c18:	2302      	movs	r3, #2
 8005c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	fa93 f3a3 	rbit	r3, r3
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2202      	movs	r2, #2
 8005c2a:	613a      	str	r2, [r7, #16]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	fa92 f2a2 	rbit	r2, r2
 8005c32:	60fa      	str	r2, [r7, #12]
  return result;
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	fab2 f282 	clz	r2, r2
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	f002 021f 	and.w	r2, r2, #31
 8005c46:	2101      	movs	r1, #1
 8005c48:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0b7      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c52:	4b6d      	ldr	r3, [pc, #436]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	496a      	ldr	r1, [pc, #424]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	4a65      	ldr	r2, [pc, #404]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c84:	4b60      	ldr	r3, [pc, #384]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	f023 0203 	bic.w	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	495d      	ldr	r1, [pc, #372]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca2:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4956      	ldr	r1, [pc, #344]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc0:	4b51      	ldr	r3, [pc, #324]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	494e      	ldr	r1, [pc, #312]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f023 0210 	bic.w	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4947      	ldr	r1, [pc, #284]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005cfc:	4b42      	ldr	r3, [pc, #264]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	493f      	ldr	r1, [pc, #252]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f023 0220 	bic.w	r2, r3, #32
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4938      	ldr	r1, [pc, #224]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d38:	4b33      	ldr	r3, [pc, #204]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	4930      	ldr	r1, [pc, #192]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d56:	4b2c      	ldr	r3, [pc, #176]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	4929      	ldr	r1, [pc, #164]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4921      	ldr	r1, [pc, #132]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d008      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	491a      	ldr	r1, [pc, #104]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	4912      	ldr	r1, [pc, #72]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	490b      	ldr	r1, [pc, #44]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	4903      	ldr	r1, [pc, #12]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3748      	adds	r7, #72	; 0x48
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e084      	b.n	8005f28 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fc fb8d 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5e:	d902      	bls.n	8005e66 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e002      	b.n	8005e6c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e74:	d007      	beq.n	8005e86 <HAL_SPI_Init+0x7a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e7e:	d002      	beq.n	8005e86 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e96:	d903      	bls.n	8005ea0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e9e:	e002      	b.n	8005ea6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	ea42 0103 	orr.w	r1, r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	f003 0204 	and.w	r2, r3, #4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	ea42 0103 	orr.w	r1, r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10f      	bne.n	8005f74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
    return;
 8005f72:	e0d8      	b.n	8006126 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_SPI_IRQHandler+0x66>
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
    return;
 8005f94:	e0c7      	b.n	8006126 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10c      	bne.n	8005fbc <HAL_SPI_IRQHandler+0x8c>
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80b5 	beq.w	8006126 <HAL_SPI_IRQHandler+0x1f6>
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80ae 	beq.w	8006126 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	099b      	lsrs	r3, r3, #6
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d023      	beq.n	800601e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d011      	beq.n	8006006 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	f043 0204 	orr.w	r2, r3, #4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	e00b      	b.n	800601e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	693b      	ldr	r3, [r7, #16]
        return;
 800601c:	e083      	b.n	8006126 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602e:	f043 0201 	orr.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00c      	beq.n	800607a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006064:	f043 0208 	orr.w	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800606c:	2300      	movs	r3, #0
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	2b00      	cmp	r3, #0
 8006080:	d050      	beq.n	8006124 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006090:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <HAL_SPI_IRQHandler+0x17e>
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d034      	beq.n	8006118 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0203 	bic.w	r2, r2, #3
 80060bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_SPI_IRQHandler+0x1fc>)
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd feca 	bl	8003e6c <HAL_DMA_Abort_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	4a0d      	ldr	r2, [pc, #52]	; (800612c <HAL_SPI_IRQHandler+0x1fc>)
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fd feb4 	bl	8003e6c <HAL_DMA_Abort_IT>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006116:	e003      	b.n	8006120 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f809 	bl	8006130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800611e:	e000      	b.n	8006122 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006120:	bf00      	nop
    return;
 8006122:	bf00      	nop
 8006124:	bf00      	nop
  }
}
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08006145 	.word	0x08006145

08006130 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ffe5 	bl	8006130 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e01d      	b.n	80061bc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fc fa29 	bl	80025ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2202      	movs	r2, #2
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f000 f9a5 	bl	80064fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	4b0c      	ldr	r3, [pc, #48]	; (8006214 <HAL_TIM_Base_Start_IT+0x50>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b06      	cmp	r3, #6
 80061ec:	d00b      	beq.n	8006206 <HAL_TIM_Base_Start_IT+0x42>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d007      	beq.n	8006206 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	00010007 	.word	0x00010007

08006218 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	f241 1311 	movw	r3, #4369	; 0x1111
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10f      	bne.n	8006260 <HAL_TIM_Base_Stop_IT+0x48>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	f240 4344 	movw	r3, #1092	; 0x444
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <HAL_TIM_Base_Stop_IT+0x48>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b02      	cmp	r3, #2
 8006282:	d122      	bne.n	80062ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d11b      	bne.n	80062ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0202 	mvn.w	r2, #2
 800629a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f905 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 80062b6:	e005      	b.n	80062c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8f7 	bl	80064ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f908 	bl	80064d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d122      	bne.n	800631e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d11b      	bne.n	800631e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f06f 0204 	mvn.w	r2, #4
 80062ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8db 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 800630a:	e005      	b.n	8006318 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8cd 	bl	80064ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f8de 	bl	80064d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d122      	bne.n	8006372 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b08      	cmp	r3, #8
 8006338:	d11b      	bne.n	8006372 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0208 	mvn.w	r2, #8
 8006342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2204      	movs	r2, #4
 8006348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8b1 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 800635e:	e005      	b.n	800636c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f8a3 	bl	80064ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8b4 	bl	80064d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b10      	cmp	r3, #16
 800637e:	d122      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b10      	cmp	r3, #16
 800638c:	d11b      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0210 	mvn.w	r2, #16
 8006396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2208      	movs	r2, #8
 800639c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f887 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 80063b2:	e005      	b.n	80063c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f879 	bl	80064ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f88a 	bl	80064d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10e      	bne.n	80063f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d107      	bne.n	80063f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f06f 0201 	mvn.w	r2, #1
 80063ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7fb fc29 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d10e      	bne.n	800641e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b80      	cmp	r3, #128	; 0x80
 800640c:	d107      	bne.n	800641e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f989 	bl	8006730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642c:	d10e      	bne.n	800644c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d107      	bne.n	800644c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f97c 	bl	8006744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d10e      	bne.n	8006478 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d107      	bne.n	8006478 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f838 	bl	80064e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b20      	cmp	r3, #32
 8006484:	d10e      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d107      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0220 	mvn.w	r2, #32
 800649c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f93c 	bl	800671c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3c      	ldr	r2, [pc, #240]	; (8006600 <TIM_Base_SetConfig+0x104>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00f      	beq.n	8006534 <TIM_Base_SetConfig+0x38>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a39      	ldr	r2, [pc, #228]	; (8006604 <TIM_Base_SetConfig+0x108>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x38>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a38      	ldr	r2, [pc, #224]	; (8006608 <TIM_Base_SetConfig+0x10c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x38>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a37      	ldr	r2, [pc, #220]	; (800660c <TIM_Base_SetConfig+0x110>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2d      	ldr	r2, [pc, #180]	; (8006600 <TIM_Base_SetConfig+0x104>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01b      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d017      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <TIM_Base_SetConfig+0x108>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a29      	ldr	r2, [pc, #164]	; (8006608 <TIM_Base_SetConfig+0x10c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a28      	ldr	r2, [pc, #160]	; (800660c <TIM_Base_SetConfig+0x110>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a27      	ldr	r2, [pc, #156]	; (8006610 <TIM_Base_SetConfig+0x114>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a26      	ldr	r2, [pc, #152]	; (8006614 <TIM_Base_SetConfig+0x118>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_Base_SetConfig+0x8a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <TIM_Base_SetConfig+0x11c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a10      	ldr	r2, [pc, #64]	; (8006600 <TIM_Base_SetConfig+0x104>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00f      	beq.n	80065e4 <TIM_Base_SetConfig+0xe8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a11      	ldr	r2, [pc, #68]	; (800660c <TIM_Base_SetConfig+0x110>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_Base_SetConfig+0xe8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <TIM_Base_SetConfig+0x114>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_Base_SetConfig+0xe8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <TIM_Base_SetConfig+0x118>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0xe8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <TIM_Base_SetConfig+0x11c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d103      	bne.n	80065ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	615a      	str	r2, [r3, #20]
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e063      	b.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d018      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d013      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00e      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a17      	ldr	r2, [pc, #92]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10c      	bne.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40014000 	.word	0x40014000

0800671c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e040      	b.n	80067ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb ff5c 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fb36 	bl	8006e08 <UART_SetConfig>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e022      	b.n	80067ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fd44 	bl	800723c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fdcb 	bl	8007380 <UART_CheckIdleState>
 80067ea:	4603      	mov	r3, r0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006808:	2b20      	cmp	r3, #32
 800680a:	f040 8081 	bne.w	8006910 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_UART_Transmit+0x26>
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e079      	b.n	8006912 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_UART_Transmit+0x38>
 8006828:	2302      	movs	r3, #2
 800682a:	e072      	b.n	8006912 <HAL_UART_Transmit+0x11e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2221      	movs	r2, #33	; 0x21
 800683e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006840:	f7fc f906 	bl	8002a50 <HAL_GetTick>
 8006844:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d108      	bne.n	8006872 <HAL_UART_Transmit+0x7e>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	e003      	b.n	800687a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800687a:	e02d      	b.n	80068d8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2200      	movs	r2, #0
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fdbf 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e03d      	b.n	8006912 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	881a      	ldrh	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a8:	b292      	uxth	r2, r2
 80068aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	3302      	adds	r3, #2
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e008      	b.n	80068c6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b292      	uxth	r2, r2
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1cb      	bne.n	800687c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2200      	movs	r2, #0
 80068ec:	2140      	movs	r1, #64	; 0x40
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fd8b 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e009      	b.n	8006912 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	e000      	b.n	8006912 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006910:	2302      	movs	r3, #2
  }
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692e:	2b20      	cmp	r3, #32
 8006930:	d176      	bne.n	8006a20 <HAL_UART_Receive_IT+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_UART_Receive_IT+0x22>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e06f      	b.n	8006a22 <HAL_UART_Receive_IT+0x106>
    }

    __HAL_LOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_UART_Receive_IT+0x34>
 800694c:	2302      	movs	r3, #2
 800694e:	e068      	b.n	8006a22 <HAL_UART_Receive_IT+0x106>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d10e      	bne.n	800699c <HAL_UART_Receive_IT+0x80>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <HAL_UART_Receive_IT+0x76>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f240 12ff 	movw	r2, #511	; 0x1ff
 800698c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006990:	e01a      	b.n	80069c8 <HAL_UART_Receive_IT+0xac>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22ff      	movs	r2, #255	; 0xff
 8006996:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800699a:	e015      	b.n	80069c8 <HAL_UART_Receive_IT+0xac>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <HAL_UART_Receive_IT+0xa4>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <HAL_UART_Receive_IT+0x9a>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	22ff      	movs	r2, #255	; 0xff
 80069b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b4:	e008      	b.n	80069c8 <HAL_UART_Receive_IT+0xac>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	227f      	movs	r2, #127	; 0x7f
 80069ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069be:	e003      	b.n	80069c8 <HAL_UART_Receive_IT+0xac>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2222      	movs	r2, #34	; 0x22
 80069d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ec:	d107      	bne.n	80069fe <HAL_UART_Receive_IT+0xe2>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <HAL_UART_Receive_IT+0xe2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <HAL_UART_Receive_IT+0x114>)
 80069fa:	661a      	str	r2, [r3, #96]	; 0x60
 80069fc:	e002      	b.n	8006a04 <HAL_UART_Receive_IT+0xe8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <HAL_UART_Receive_IT+0x118>)
 8006a02:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006a1a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e000      	b.n	8006a22 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	08007765 	.word	0x08007765
 8006a34:	080076bf 	.word	0x080076bf

08006a38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d16c      	bne.n	8006b28 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_UART_Receive_DMA+0x22>
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e065      	b.n	8006b2a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Receive_DMA+0x34>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e05e      	b.n	8006b2a <HAL_UART_Receive_DMA+0xf2>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2222      	movs	r2, #34	; 0x22
 8006a8c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02a      	beq.n	8006aec <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9a:	4a26      	ldr	r2, [pc, #152]	; (8006b34 <HAL_UART_Receive_DMA+0xfc>)
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa2:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_UART_Receive_DMA+0x100>)
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aaa:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <HAL_UART_Receive_DMA+0x104>)
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	f7fd f970 	bl	8003dae <HAL_DMA_Start_IT>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e01e      	b.n	8006b2a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b02:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b22:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	0800756b 	.word	0x0800756b
 8006b38:	080075cd 	.word	0x080075cd
 8006b3c:	080075e9 	.word	0x080075e9

08006b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d113      	bne.n	8006b98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8114 	beq.w	8006db6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
      }
      return;
 8006b96:	e10e      	b.n	8006db6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80d6 	beq.w	8006d4c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80cb 	beq.w	8006d4c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <HAL_UART_IRQHandler+0x9e>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd6:	f043 0201 	orr.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <HAL_UART_IRQHandler+0xc6>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfe:	f043 0204 	orr.w	r2, r3, #4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <HAL_UART_IRQHandler+0xee>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2204      	movs	r2, #4
 8006c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c26:	f043 0202 	orr.w	r2, r3, #2
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c58:	f043 0208 	orr.w	r2, r3, #8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00f      	beq.n	8006c8a <HAL_UART_IRQHandler+0x14a>
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8093 	beq.w	8006dba <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d004      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d031      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fc27 	bl	800752a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d123      	bne.n	8006d32 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d013      	beq.n	8006d2a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d06:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <HAL_UART_IRQHandler+0x288>)
 8006d08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fd f8ac 	bl	8003e6c <HAL_DMA_Abort_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e00e      	b.n	8006d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f862 	bl	8006df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	e00a      	b.n	8006d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f85e 	bl	8006df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d38:	e006      	b.n	8006d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f85a 	bl	8006df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006d46:	e038      	b.n	8006dba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	bf00      	nop
    return;
 8006d4a:	e036      	b.n	8006dba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <HAL_UART_IRQHandler+0x232>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fd4d 	bl	800780a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d70:	e026      	b.n	8006dc0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d017      	beq.n	8006dbe <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
    }
    return;
 8006d96:	e012      	b.n	8006dbe <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00e      	beq.n	8006dc0 <HAL_UART_IRQHandler+0x280>
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc6d 	bl	800768c <UART_EndTransmit_IT>
    return;
 8006db2:	bf00      	nop
 8006db4:	e004      	b.n	8006dc0 <HAL_UART_IRQHandler+0x280>
      return;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8006dbe:	bf00      	nop
  }

}
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007661 	.word	0x08007661

08006dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e3a:	f023 030c 	bic.w	r3, r3, #12
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	6939      	ldr	r1, [r7, #16]
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4aa9      	ldr	r2, [pc, #676]	; (800712c <UART_SetConfig+0x324>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d121      	bne.n	8006ed0 <UART_SetConfig+0xc8>
 8006e8c:	4ba8      	ldr	r3, [pc, #672]	; (8007130 <UART_SetConfig+0x328>)
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d817      	bhi.n	8006ec8 <UART_SetConfig+0xc0>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x98>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006ebd 	.word	0x08006ebd
 8006ea8:	08006ec3 	.word	0x08006ec3
 8006eac:	08006eb7 	.word	0x08006eb7
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e0b2      	b.n	800701c <UART_SetConfig+0x214>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e0af      	b.n	800701c <UART_SetConfig+0x214>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e0ac      	b.n	800701c <UART_SetConfig+0x214>
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e0a9      	b.n	800701c <UART_SetConfig+0x214>
 8006ec8:	2310      	movs	r3, #16
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	bf00      	nop
 8006ece:	e0a5      	b.n	800701c <UART_SetConfig+0x214>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a97      	ldr	r2, [pc, #604]	; (8007134 <UART_SetConfig+0x32c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d123      	bne.n	8006f22 <UART_SetConfig+0x11a>
 8006eda:	4b95      	ldr	r3, [pc, #596]	; (8007130 <UART_SetConfig+0x328>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee6:	d012      	beq.n	8006f0e <UART_SetConfig+0x106>
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d802      	bhi.n	8006ef4 <UART_SetConfig+0xec>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <UART_SetConfig+0xfa>
 8006ef2:	e012      	b.n	8006f1a <UART_SetConfig+0x112>
 8006ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef8:	d00c      	beq.n	8006f14 <UART_SetConfig+0x10c>
 8006efa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006efe:	d003      	beq.n	8006f08 <UART_SetConfig+0x100>
 8006f00:	e00b      	b.n	8006f1a <UART_SetConfig+0x112>
 8006f02:	2300      	movs	r3, #0
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e089      	b.n	800701c <UART_SetConfig+0x214>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e086      	b.n	800701c <UART_SetConfig+0x214>
 8006f0e:	2304      	movs	r3, #4
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e083      	b.n	800701c <UART_SetConfig+0x214>
 8006f14:	2308      	movs	r3, #8
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e080      	b.n	800701c <UART_SetConfig+0x214>
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	bf00      	nop
 8006f20:	e07c      	b.n	800701c <UART_SetConfig+0x214>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a84      	ldr	r2, [pc, #528]	; (8007138 <UART_SetConfig+0x330>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d123      	bne.n	8006f74 <UART_SetConfig+0x16c>
 8006f2c:	4b80      	ldr	r3, [pc, #512]	; (8007130 <UART_SetConfig+0x328>)
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f38:	d012      	beq.n	8006f60 <UART_SetConfig+0x158>
 8006f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f3e:	d802      	bhi.n	8006f46 <UART_SetConfig+0x13e>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <UART_SetConfig+0x14c>
 8006f44:	e012      	b.n	8006f6c <UART_SetConfig+0x164>
 8006f46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f4a:	d00c      	beq.n	8006f66 <UART_SetConfig+0x15e>
 8006f4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f50:	d003      	beq.n	8006f5a <UART_SetConfig+0x152>
 8006f52:	e00b      	b.n	8006f6c <UART_SetConfig+0x164>
 8006f54:	2300      	movs	r3, #0
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e060      	b.n	800701c <UART_SetConfig+0x214>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e05d      	b.n	800701c <UART_SetConfig+0x214>
 8006f60:	2304      	movs	r3, #4
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e05a      	b.n	800701c <UART_SetConfig+0x214>
 8006f66:	2308      	movs	r3, #8
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e057      	b.n	800701c <UART_SetConfig+0x214>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	77fb      	strb	r3, [r7, #31]
 8006f70:	bf00      	nop
 8006f72:	e053      	b.n	800701c <UART_SetConfig+0x214>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a70      	ldr	r2, [pc, #448]	; (800713c <UART_SetConfig+0x334>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d123      	bne.n	8006fc6 <UART_SetConfig+0x1be>
 8006f7e:	4b6c      	ldr	r3, [pc, #432]	; (8007130 <UART_SetConfig+0x328>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	d012      	beq.n	8006fb2 <UART_SetConfig+0x1aa>
 8006f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f90:	d802      	bhi.n	8006f98 <UART_SetConfig+0x190>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <UART_SetConfig+0x19e>
 8006f96:	e012      	b.n	8006fbe <UART_SetConfig+0x1b6>
 8006f98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f9c:	d00c      	beq.n	8006fb8 <UART_SetConfig+0x1b0>
 8006f9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fa2:	d003      	beq.n	8006fac <UART_SetConfig+0x1a4>
 8006fa4:	e00b      	b.n	8006fbe <UART_SetConfig+0x1b6>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e037      	b.n	800701c <UART_SetConfig+0x214>
 8006fac:	2302      	movs	r3, #2
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e034      	b.n	800701c <UART_SetConfig+0x214>
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e031      	b.n	800701c <UART_SetConfig+0x214>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e02e      	b.n	800701c <UART_SetConfig+0x214>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	77fb      	strb	r3, [r7, #31]
 8006fc2:	bf00      	nop
 8006fc4:	e02a      	b.n	800701c <UART_SetConfig+0x214>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a5d      	ldr	r2, [pc, #372]	; (8007140 <UART_SetConfig+0x338>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d123      	bne.n	8007018 <UART_SetConfig+0x210>
 8006fd0:	4b57      	ldr	r3, [pc, #348]	; (8007130 <UART_SetConfig+0x328>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d012      	beq.n	8007004 <UART_SetConfig+0x1fc>
 8006fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe2:	d802      	bhi.n	8006fea <UART_SetConfig+0x1e2>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <UART_SetConfig+0x1f0>
 8006fe8:	e012      	b.n	8007010 <UART_SetConfig+0x208>
 8006fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fee:	d00c      	beq.n	800700a <UART_SetConfig+0x202>
 8006ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ff4:	d003      	beq.n	8006ffe <UART_SetConfig+0x1f6>
 8006ff6:	e00b      	b.n	8007010 <UART_SetConfig+0x208>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e00e      	b.n	800701c <UART_SetConfig+0x214>
 8006ffe:	2302      	movs	r3, #2
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e00b      	b.n	800701c <UART_SetConfig+0x214>
 8007004:	2304      	movs	r3, #4
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e008      	b.n	800701c <UART_SetConfig+0x214>
 800700a:	2308      	movs	r3, #8
 800700c:	77fb      	strb	r3, [r7, #31]
 800700e:	e005      	b.n	800701c <UART_SetConfig+0x214>
 8007010:	2310      	movs	r3, #16
 8007012:	77fb      	strb	r3, [r7, #31]
 8007014:	bf00      	nop
 8007016:	e001      	b.n	800701c <UART_SetConfig+0x214>
 8007018:	2310      	movs	r3, #16
 800701a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007024:	f040 808e 	bne.w	8007144 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8007028:	7ffb      	ldrb	r3, [r7, #31]
 800702a:	2b08      	cmp	r3, #8
 800702c:	d85e      	bhi.n	80070ec <UART_SetConfig+0x2e4>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x22c>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007059 	.word	0x08007059
 8007038:	08007079 	.word	0x08007079
 800703c:	08007099 	.word	0x08007099
 8007040:	080070ed 	.word	0x080070ed
 8007044:	080070b5 	.word	0x080070b5
 8007048:	080070ed 	.word	0x080070ed
 800704c:	080070ed 	.word	0x080070ed
 8007050:	080070ed 	.word	0x080070ed
 8007054:	080070d5 	.word	0x080070d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007058:	f7fe fce4 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 800705c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	61bb      	str	r3, [r7, #24]
        break;
 8007076:	e03c      	b.n	80070f2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fe fcf6 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800707c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	005a      	lsls	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	441a      	add	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	61bb      	str	r3, [r7, #24]
        break;
 8007096:	e02c      	b.n	80070f2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80070a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6852      	ldr	r2, [r2, #4]
 80070aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	61bb      	str	r3, [r7, #24]
        break;
 80070b2:	e01e      	b.n	80070f2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b4:	f7fe fc40 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80070b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	005a      	lsls	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	61bb      	str	r3, [r7, #24]
        break;
 80070d2:	e00e      	b.n	80070f2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
        break;
 80070ea:	e002      	b.n	80070f2 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
        break;
 80070f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b0f      	cmp	r3, #15
 80070f6:	d916      	bls.n	8007126 <UART_SetConfig+0x31e>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fe:	d212      	bcs.n	8007126 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f023 030f 	bic.w	r3, r3, #15
 8007108:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	b29b      	uxth	r3, r3
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	b29a      	uxth	r2, r3
 8007116:	897b      	ldrh	r3, [r7, #10]
 8007118:	4313      	orrs	r3, r2
 800711a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	897a      	ldrh	r2, [r7, #10]
 8007122:	60da      	str	r2, [r3, #12]
 8007124:	e07e      	b.n	8007224 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	75fb      	strb	r3, [r7, #23]
 800712a:	e07b      	b.n	8007224 <UART_SetConfig+0x41c>
 800712c:	40013800 	.word	0x40013800
 8007130:	40021000 	.word	0x40021000
 8007134:	40004400 	.word	0x40004400
 8007138:	40004800 	.word	0x40004800
 800713c:	40004c00 	.word	0x40004c00
 8007140:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8007144:	7ffb      	ldrb	r3, [r7, #31]
 8007146:	2b08      	cmp	r3, #8
 8007148:	d85b      	bhi.n	8007202 <UART_SetConfig+0x3fa>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x348>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007175 	.word	0x08007175
 8007154:	08007193 	.word	0x08007193
 8007158:	080071b1 	.word	0x080071b1
 800715c:	08007203 	.word	0x08007203
 8007160:	080071cd 	.word	0x080071cd
 8007164:	08007203 	.word	0x08007203
 8007168:	08007203 	.word	0x08007203
 800716c:	08007203 	.word	0x08007203
 8007170:	080071eb 	.word	0x080071eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fe fc56 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8007178:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	085a      	lsrs	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	441a      	add	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	b29b      	uxth	r3, r3
 800718e:	61bb      	str	r3, [r7, #24]
        break;
 8007190:	e03a      	b.n	8007208 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007192:	f7fe fc69 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8007196:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	085a      	lsrs	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	61bb      	str	r3, [r7, #24]
        break;
 80071ae:	e02b      	b.n	8007208 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80071ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6852      	ldr	r2, [r2, #4]
 80071c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	61bb      	str	r3, [r7, #24]
        break;
 80071ca:	e01d      	b.n	8007208 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071cc:	f7fe fbb4 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80071d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085a      	lsrs	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	441a      	add	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	61bb      	str	r3, [r7, #24]
        break;
 80071e8:	e00e      	b.n	8007208 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	61bb      	str	r3, [r7, #24]
        break;
 8007200:	e002      	b.n	8007208 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
        break;
 8007206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	d908      	bls.n	8007220 <UART_SetConfig+0x418>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007214:	d204      	bcs.n	8007220 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	e001      	b.n	8007224 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800733a:	d10a      	bne.n	8007352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800738e:	f7fb fb5f 	bl	8002a50 <HAL_GetTick>
 8007392:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10e      	bne.n	80073c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f82a 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e020      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d10e      	bne.n	80073ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f814 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e00a      	b.n	8007402 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741a:	e05d      	b.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d059      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007424:	f7fb fb14 	bl	8002a50 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <UART_WaitOnFlagUntilTimeout+0x30>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11b      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007448:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e042      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02b      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800748a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748e:	d123      	bne.n	80074d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007498:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e00f      	b.n	80074f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4013      	ands	r3, r2
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	bf0c      	ite	eq
 80074e8:	2301      	moveq	r3, #1
 80074ea:	2300      	movne	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d092      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007516:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007540:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	2b20      	cmp	r3, #32
 800757e:	d01e      	beq.n	80075be <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007596:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7fa fb22 	bl	8001c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fc00 	bl	8006de0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e0:	bf00      	nop
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007600:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b80      	cmp	r3, #128	; 0x80
 800760e:	d109      	bne.n	8007624 <UART_DMAError+0x3c>
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b21      	cmp	r3, #33	; 0x21
 8007614:	d106      	bne.n	8007624 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff6e 	bl	8007500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d109      	bne.n	8007646 <UART_DMAError+0x5e>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b22      	cmp	r3, #34	; 0x22
 8007636:	d106      	bne.n	8007646 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2200      	movs	r2, #0
 800763c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007640:	6978      	ldr	r0, [r7, #20]
 8007642:	f7ff ff72 	bl	800752a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800764a:	f043 0210 	orr.w	r2, r3, #16
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007652:	6978      	ldr	r0, [r7, #20]
 8007654:	f7ff fbce 	bl	8006df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007658:	bf00      	nop
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fbb8 	bl	8006df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fb8b 	bl	8006dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076cc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d2:	2b22      	cmp	r3, #34	; 0x22
 80076d4:	d13a      	bne.n	800774c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076dc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076de:	89bb      	ldrh	r3, [r7, #12]
 80076e0:	b2d9      	uxtb	r1, r3
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	400a      	ands	r2, r1
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d121      	bne.n	800775c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007726:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fa fa5f 	bl	8001c08 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800774a:	e007      	b.n	800775c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	619a      	str	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007772:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007778:	2b22      	cmp	r3, #34	; 0x22
 800777a:	d13a      	bne.n	80077f2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007782:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007788:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800778a:	89ba      	ldrh	r2, [r7, #12]
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	4013      	ands	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d121      	bne.n	8007802 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077cc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fa fa0c 	bl	8001c08 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077f0:	e007      	b.n	8007802 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	619a      	str	r2, [r3, #24]
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007826:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800782a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	b29b      	uxth	r3, r3
 8007838:	43db      	mvns	r3, r3
 800783a:	b29b      	uxth	r3, r3
 800783c:	4013      	ands	r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007854:	b084      	sub	sp, #16
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	f107 0014 	add.w	r0, r7, #20
 8007862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	b004      	add	sp, #16
 8007894:	4770      	bx	lr
	...

08007898 <__libc_init_array>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4e0d      	ldr	r6, [pc, #52]	; (80078d0 <__libc_init_array+0x38>)
 800789c:	4c0d      	ldr	r4, [pc, #52]	; (80078d4 <__libc_init_array+0x3c>)
 800789e:	1ba4      	subs	r4, r4, r6
 80078a0:	10a4      	asrs	r4, r4, #2
 80078a2:	2500      	movs	r5, #0
 80078a4:	42a5      	cmp	r5, r4
 80078a6:	d109      	bne.n	80078bc <__libc_init_array+0x24>
 80078a8:	4e0b      	ldr	r6, [pc, #44]	; (80078d8 <__libc_init_array+0x40>)
 80078aa:	4c0c      	ldr	r4, [pc, #48]	; (80078dc <__libc_init_array+0x44>)
 80078ac:	f000 f820 	bl	80078f0 <_init>
 80078b0:	1ba4      	subs	r4, r4, r6
 80078b2:	10a4      	asrs	r4, r4, #2
 80078b4:	2500      	movs	r5, #0
 80078b6:	42a5      	cmp	r5, r4
 80078b8:	d105      	bne.n	80078c6 <__libc_init_array+0x2e>
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078c0:	4798      	blx	r3
 80078c2:	3501      	adds	r5, #1
 80078c4:	e7ee      	b.n	80078a4 <__libc_init_array+0xc>
 80078c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ca:	4798      	blx	r3
 80078cc:	3501      	adds	r5, #1
 80078ce:	e7f2      	b.n	80078b6 <__libc_init_array+0x1e>
 80078d0:	080079a8 	.word	0x080079a8
 80078d4:	080079a8 	.word	0x080079a8
 80078d8:	080079a8 	.word	0x080079a8
 80078dc:	080079ac 	.word	0x080079ac

080078e0 <memset>:
 80078e0:	4402      	add	r2, r0
 80078e2:	4603      	mov	r3, r0
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d100      	bne.n	80078ea <memset+0xa>
 80078e8:	4770      	bx	lr
 80078ea:	f803 1b01 	strb.w	r1, [r3], #1
 80078ee:	e7f9      	b.n	80078e4 <memset+0x4>

080078f0 <_init>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr

080078fc <_fini>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr
