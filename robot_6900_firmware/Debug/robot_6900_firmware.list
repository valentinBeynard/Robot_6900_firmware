
robot_6900_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000573c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800591c  0800591c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800591c  0800591c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800591c  0800591c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000034  08005958  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  08005958  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015156  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c4e  00000000  00000000  000351ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c8f0  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000114f3  00000000  00000000  00056770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4d37  00000000  00000000  00067c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c99a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  0010ca18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058ac 	.word	0x080058ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	080058ac 	.word	0x080058ac

080001c8 <default_process>:
#include "commands.h"

uint8_t default_process(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	

	return 1;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <check_serial>:

uint8_t check_serial(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state.Robot_State = Running;
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	2201      	movs	r2, #1
 80001ee:	719a      	strb	r2, [r3, #6]

	h_robot6900->robot_state.status_update = 1;
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	715a      	strb	r2, [r3, #5]
	return 1;
 80001f6:	2301      	movs	r3, #1
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <NVIC_command_parser_INT>:
#
############################################################################
*/

void NVIC_command_parser_INT(UART_HandleTypeDef *huart)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	if(CMDs_buffer_size < MAX_COMMAND_STACK_SIZE)
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <NVIC_command_parser_INT+0x50>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b04      	cmp	r3, #4
 8000214:	d817      	bhi.n	8000246 <NVIC_command_parser_INT+0x42>
	{
		CMDs_buffer[CMDs_buffer_size] = Rx_buffer;
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <NVIC_command_parser_INT+0x50>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	b2db      	uxtb	r3, r3
 800021c:	4619      	mov	r1, r3
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <NVIC_command_parser_INT+0x54>)
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <NVIC_command_parser_INT+0x58>)
 8000222:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CMDs_buffer_size++;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <NVIC_command_parser_INT+0x50>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <NVIC_command_parser_INT+0x50>)
 8000232:	701a      	strb	r2, [r3, #0]

		CMDs_buffer_full = 0;
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <NVIC_command_parser_INT+0x5c>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
		// Reactivate receive on Interrupt on 1 byte
		HAL_UART_Receive_IT(huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 800023a:	2205      	movs	r2, #5
 800023c:	4907      	ldr	r1, [pc, #28]	; (800025c <NVIC_command_parser_INT+0x58>)
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f004 fbf0 	bl	8004a24 <HAL_UART_Receive_IT>
	}
	else
	{
		CMDs_buffer_full = 1;
	}
}
 8000244:	e002      	b.n	800024c <NVIC_command_parser_INT+0x48>
		CMDs_buffer_full = 1;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <NVIC_command_parser_INT+0x5c>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000055 	.word	0x20000055
 8000258:	20000084 	.word	0x20000084
 800025c:	20000050 	.word	0x20000050
 8000260:	20000056 	.word	0x20000056

08000264 <uart_init>:
#
############################################################################
*/

void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef* hcrc)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
	// Initiate ptr
	_hcrc = hcrc;
 800026e:	4a08      	ldr	r2, [pc, #32]	; (8000290 <uart_init+0x2c>)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6013      	str	r3, [r2, #0]
	_huart = huart;
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <uart_init+0x30>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]

	// Activate UART Receive Interrupt each 4 bytes received
	HAL_UART_Receive_IT(_huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <uart_init+0x30>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2205      	movs	r2, #5
 8000280:	4905      	ldr	r1, [pc, #20]	; (8000298 <uart_init+0x34>)
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fbce 	bl	8004a24 <HAL_UART_Receive_IT>


}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000060 	.word	0x20000060
 8000294:	2000005c 	.word	0x2000005c
 8000298:	20000050 	.word	0x20000050

0800029c <cmd_parser_process>:

COMMANDS_PARSER_ERROR cmd_parser_process(ROBOT6900_HANDLER* h_robot6900)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	if(CMDs_buffer_size > 0)
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <cmd_parser_process+0x70>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <cmd_parser_process+0x1a>
	{
		current_state = GET_COMMAND;
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <cmd_parser_process+0x74>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e002      	b.n	80002bc <cmd_parser_process+0x20>
	}
	else{
		current_state = WAIT;
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <cmd_parser_process+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
	}

	// Full State Machine Call
	CMD_Parser_Log = (full_state_machine[current_state]).state_process(h_robot6900);
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <cmd_parser_process+0x74>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <cmd_parser_process+0x78>)
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	4413      	add	r3, r2
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	4798      	blx	r3
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <cmd_parser_process+0x7c>)
 80002d2:	701a      	strb	r2, [r3, #0]

	// Process Parser Logs
	if(CMDs_buffer_full == 1)
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <cmd_parser_process+0x80>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10d      	bne.n	80002f8 <cmd_parser_process+0x5c>
	{
//		// Warm user about the Full pipeline
//		HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin, GPIO_PIN_SET);
		// As we process one command in the pipeline, it's no more full. Reactivate NVIC
		HAL_UART_Receive_IT(_huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <cmd_parser_process+0x84>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2205      	movs	r2, #5
 80002e2:	4910      	ldr	r1, [pc, #64]	; (8000324 <cmd_parser_process+0x88>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f004 fb9d 	bl	8004a24 <HAL_UART_Receive_IT>

		// Notify Pipeline is full
		CMD_Parser_Log |= PARSER_PIPELINE_FULL;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <cmd_parser_process+0x7c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <cmd_parser_process+0x7c>)
 80002f6:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, LOG_WARNING_Pin, GPIO_PIN_SET);
//
//	}

	// Update Debug LED state regarding Parser state flags
	generate_parser_flag(h_robot6900);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f919 	bl	8000530 <generate_parser_flag>

	return CMD_Parser_Log;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <cmd_parser_process+0x7c>)
 8000300:	781b      	ldrb	r3, [r3, #0]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000055 	.word	0x20000055
 8000310:	20000057 	.word	0x20000057
 8000314:	080058d4 	.word	0x080058d4
 8000318:	20000000 	.word	0x20000000
 800031c:	20000056 	.word	0x20000056
 8000320:	2000005c 	.word	0x2000005c
 8000324:	20000050 	.word	0x20000050

08000328 <get_command>:

COMMANDS_PARSER_ERROR get_command(ROBOT6900_HANDLER* h_robot6900)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000330:	2301      	movs	r3, #1
 8000332:	75fb      	strb	r3, [r7, #23]
	uint8_t* raw_packet = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
	CMD_PACKET cmd;
	uint8_t cmd_defined = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	75bb      	strb	r3, [r7, #22]

	// Get oldest command in the queue
	raw_packet = CMDs_buffer[0];
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <get_command+0x8c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	613b      	str	r3, [r7, #16]

	// Check raw packet validity and create a cmd defined struct
	parser_log = command_integrity(raw_packet, &cmd);
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	4619      	mov	r1, r3
 8000348:	6938      	ldr	r0, [r7, #16]
 800034a:	f000 f837 	bl	80003bc <command_integrity>
 800034e:	4603      	mov	r3, r0
 8000350:	75fb      	strb	r3, [r7, #23]

	if(parser_log == PARSER_OK)
 8000352:	7dfb      	ldrb	r3, [r7, #23]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d120      	bne.n	800039a <get_command+0x72>
	{
		// Looking if the command is defined
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	757b      	strb	r3, [r7, #21]
 800035c:	e015      	b.n	800038a <get_command+0x62>
		{
			if(cmd.name == dispatch_table[i].name)
 800035e:	7b7a      	ldrb	r2, [r7, #13]
 8000360:	7d7b      	ldrb	r3, [r7, #21]
 8000362:	4915      	ldr	r1, [pc, #84]	; (80003b8 <get_command+0x90>)
 8000364:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000368:	429a      	cmp	r2, r3
 800036a:	d10b      	bne.n	8000384 <get_command+0x5c>
			{
				cmd_defined = 1;
 800036c:	2301      	movs	r3, #1
 800036e:	75bb      	strb	r3, [r7, #22]
				// Process command function
				dispatch_table[i].process(&cmd, h_robot6900);
 8000370:	7d7b      	ldrb	r3, [r7, #21]
 8000372:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <get_command+0x90>)
 8000374:	00db      	lsls	r3, r3, #3
 8000376:	4413      	add	r3, r2
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f107 020c 	add.w	r2, r7, #12
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	4610      	mov	r0, r2
 8000382:	4798      	blx	r3
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000384:	7d7b      	ldrb	r3, [r7, #21]
 8000386:	3301      	adds	r3, #1
 8000388:	757b      	strb	r3, [r7, #21]
 800038a:	7d7b      	ldrb	r3, [r7, #21]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d9e6      	bls.n	800035e <get_command+0x36>
			}
		}

		// Check if command was found
		if(!cmd_defined)
 8000390:	7dbb      	ldrb	r3, [r7, #22]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d101      	bne.n	800039a <get_command+0x72>
		{
			parser_log = PARSER_NO_CMD;
 8000396:	2320      	movs	r3, #32
 8000398:	75fb      	strb	r3, [r7, #23]
		}
	}

	// Remove command from the buffer and shift next one
	parser_log |= update_pipeline();
 800039a:	f000 f853 	bl	8000444 <update_pipeline>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	7dfb      	ldrb	r3, [r7, #23]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	75fb      	strb	r3, [r7, #23]


	return parser_log;
 80003a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3718      	adds	r7, #24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000084 	.word	0x20000084
 80003b8:	080058c4 	.word	0x080058c4

080003bc <command_integrity>:

COMMANDS_PARSER_ERROR command_integrity(uint8_t* _raw_packet, CMD_PACKET* _cmd)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 80003c6:	2301      	movs	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_buffer[2];

	_raw_packet+=1;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	607b      	str	r3, [r7, #4]

	// Parse 32bits raw_data to the packet_structure.
	*(_cmd) = *(CMD_PACKET*)(_raw_packet);
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	6013      	str	r3, [r2, #0]

//	// Avoid 4 first bits SoF
//	_cmd->ID = (_cmd->ID & 0x0F);

	// Check Packet ID
	if(_cmd->ID != rx_last_ID + 1)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <command_integrity+0x80>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d002      	beq.n	80003ee <command_integrity+0x32>
	{
		parser_log = PARSER_WRONG_ID;
 80003e8:	2308      	movs	r3, #8
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e021      	b.n	8000432 <command_integrity+0x76>
	}
	// Check CRC-8
	else
	{
		/* If ID right, update ID flag for next packet */
		if(_cmd->ID == 0xFF)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2bff      	cmp	r3, #255	; 0xff
 80003f4:	d103      	bne.n	80003fe <command_integrity+0x42>
		{
			rx_last_ID = 0;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <command_integrity+0x80>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	e003      	b.n	8000406 <command_integrity+0x4a>
		}
		else
		{
			rx_last_ID = _cmd->ID;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	781a      	ldrb	r2, [r3, #0]
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <command_integrity+0x80>)
 8000404:	701a      	strb	r2, [r3, #0]
		}

		crc_buffer[0] = _cmd->name;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	733b      	strb	r3, [r7, #12]
		crc_buffer[1] = _cmd->data;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	737b      	strb	r3, [r7, #13]
		if( (uint8_t)(HAL_CRC_Calculate(_hcrc, crc_buffer, 2)) != _cmd->crc)
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <command_integrity+0x84>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f107 010c 	add.w	r1, r7, #12
 800041a:	2202      	movs	r2, #2
 800041c:	4618      	mov	r0, r3
 800041e:	f001 ff25 	bl	800226c <HAL_CRC_Calculate>
 8000422:	4603      	mov	r3, r0
 8000424:	b2da      	uxtb	r2, r3
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	78db      	ldrb	r3, [r3, #3]
 800042a:	429a      	cmp	r2, r3
 800042c:	d001      	beq.n	8000432 <command_integrity+0x76>
		{
			parser_log = PARSER_WRONG_CRC;
 800042e:	2310      	movs	r3, #16
 8000430:	73fb      	strb	r3, [r7, #15]
		}
	}

	return parser_log;
 8000432:	7bfb      	ldrb	r3, [r7, #15]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000058 	.word	0x20000058
 8000440:	20000060 	.word	0x20000060

08000444 <update_pipeline>:

COMMANDS_PARSER_ERROR update_pipeline()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	COMMANDS_PARSER_ERROR parser_log = PARSER_INIT;
 800044a:	2300      	movs	r3, #0
 800044c:	71fb      	strb	r3, [r7, #7]

	// Disable NVIC Interrupt before process on pipeline
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 800044e:	2035      	movs	r0, #53	; 0x35
 8000450:	f001 fe8d 	bl	800216e <HAL_NVIC_DisableIRQ>

	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000454:	2300      	movs	r3, #0
 8000456:	71bb      	strb	r3, [r7, #6]
 8000458:	e00d      	b.n	8000476 <update_pipeline+0x32>
	{

		*(CMDs_buffer + i) = *(CMDs_buffer + i + 1);
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	3301      	adds	r3, #1
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <update_pipeline+0x74>)
 8000462:	441a      	add	r2, r3
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4913      	ldr	r1, [pc, #76]	; (80004b8 <update_pipeline+0x74>)
 800046a:	440b      	add	r3, r1
 800046c:	6812      	ldr	r2, [r2, #0]
 800046e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	3301      	adds	r3, #1
 8000474:	71bb      	strb	r3, [r7, #6]
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <update_pipeline+0x78>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	429a      	cmp	r2, r3
 8000480:	d3eb      	bcc.n	800045a <update_pipeline+0x16>
	}

	if(CMDs_buffer_size - 1 >= 0)
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <update_pipeline+0x78>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	3b01      	subs	r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	db07      	blt.n	800049e <update_pipeline+0x5a>
	{
		CMDs_buffer_size -= 1;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <update_pipeline+0x78>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	3b01      	subs	r3, #1
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <update_pipeline+0x78>)
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e004      	b.n	80004a8 <update_pipeline+0x64>
	}
	else
	{
		parser_log = PARSER_UNKNOWN;
 800049e:	2302      	movs	r3, #2
 80004a0:	71fb      	strb	r3, [r7, #7]
		CMDs_buffer_size = 0;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <update_pipeline+0x78>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	}

	// Enable NVIC Interrupt after critical process on pipeline
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 80004a8:	2035      	movs	r0, #53	; 0x35
 80004aa:	f001 fe52 	bl	8002152 <HAL_NVIC_EnableIRQ>

	return parser_log;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000084 	.word	0x20000084
 80004bc:	20000055 	.word	0x20000055

080004c0 <wait>:

COMMANDS_PARSER_ERROR wait(ROBOT6900_HANDLER* h_robot6900)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	return CMD_Parser_Log;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <wait+0x18>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	20000000 	.word	0x20000000

080004dc <parser_return>:

void parser_return(ROBOT6900_HANDLER* h_robot6900)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint8_t tx_pck_size = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]

	/* Clear TX_BUFFER */
	memset(Tx_buffer, 0, TX_BUFFER_SIZE);
 80004e8:	2220      	movs	r2, #32
 80004ea:	2100      	movs	r1, #0
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <parser_return+0x4c>)
 80004ee:	f005 f9d5 	bl	800589c <memset>

	/* Build the Robot State Output Packet */
	if(h_robot6900->robot_state.status_update)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d004      	beq.n	8000504 <parser_return+0x28>
	{
		//tx_pck_size = parser_OUTPUT_status(h_robot6900);
		Tx_buffer[0] = 'G';
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <parser_return+0x4c>)
 80004fc:	2247      	movs	r2, #71	; 0x47
 80004fe:	701a      	strb	r2, [r3, #0]
		tx_pck_size = 1;
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]
	}

	/* Send data if there is data to transmit in the buffer */
	if(tx_pck_size != 0)
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d007      	beq.n	800051a <parser_return+0x3e>
	{
		HAL_UART_Transmit_IT(_huart, &Tx_buffer, tx_pck_size);
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <parser_return+0x50>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	7bfa      	ldrb	r2, [r7, #15]
 8000510:	b292      	uxth	r2, r2
 8000512:	4905      	ldr	r1, [pc, #20]	; (8000528 <parser_return+0x4c>)
 8000514:	4618      	mov	r0, r3
 8000516:	f004 fa29 	bl	800496c <HAL_UART_Transmit_IT>
	}

	/* Clear Robot Update Sate Flag */
	h_robot6900->robot_state.status_update = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	715a      	strb	r2, [r3, #5]

}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000064 	.word	0x20000064
 800052c:	2000005c 	.word	0x2000005c

08000530 <generate_parser_flag>:

	return packet_size;
}

void generate_parser_flag(ROBOT6900_HANDLER* h_robot6900)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	static COMMANDS_PARSER_ERROR previous_log = PARSER_OK;

	// Do not change LEDs statues is parser's flags didn't change
	if(CMD_Parser_Log != previous_log)
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <generate_parser_flag+0xbc>)
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <generate_parser_flag+0xc0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	d04c      	beq.n	80005de <generate_parser_flag+0xae>
	{
		h_robot6900->robot_state.debug_leds = ((CMD_Parser_Log & PARSER_OK) == 1 ? 0x00 : DB_LED3);
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <generate_parser_flag+0xbc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	711a      	strb	r2, [r3, #4]
		h_robot6900->robot_state.debug_leds |= ((CMD_Parser_Log & PARSER_NO_CMD) == PARSER_NO_CMD ? DB_LED7 : 0x00);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	b25a      	sxtb	r2, r3
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <generate_parser_flag+0xbc>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	105b      	asrs	r3, r3, #1
 8000568:	b25b      	sxtb	r3, r3
 800056a:	f003 0310 	and.w	r3, r3, #16
 800056e:	b25b      	sxtb	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b25b      	sxtb	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	711a      	strb	r2, [r3, #4]
		h_robot6900->robot_state.debug_leds |= ((CMD_Parser_Log & PARSER_WRONG_ID) == PARSER_WRONG_ID || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED8 : 0x00);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	b25b      	sxtb	r3, r3
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <generate_parser_flag+0xbc>)
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	f002 0208 	and.w	r2, r2, #8
 8000588:	2a00      	cmp	r2, #0
 800058a:	d105      	bne.n	8000598 <generate_parser_flag+0x68>
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <generate_parser_flag+0xbc>)
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	f002 0210 	and.w	r2, r2, #16
 8000594:	2a00      	cmp	r2, #0
 8000596:	d001      	beq.n	800059c <generate_parser_flag+0x6c>
 8000598:	2220      	movs	r2, #32
 800059a:	e000      	b.n	800059e <generate_parser_flag+0x6e>
 800059c:	2200      	movs	r2, #0
 800059e:	4313      	orrs	r3, r2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	711a      	strb	r2, [r3, #4]
		h_robot6900->robot_state.debug_leds |= ((CMD_Parser_Log & PARSER_PIPELINE_FULL) == PARSER_PIPELINE_FULL || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED9 : 0x00);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <generate_parser_flag+0xbc>)
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	f002 0204 	and.w	r2, r2, #4
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d105      	bne.n	80005c6 <generate_parser_flag+0x96>
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <generate_parser_flag+0xbc>)
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	f002 0210 	and.w	r2, r2, #16
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d001      	beq.n	80005ca <generate_parser_flag+0x9a>
 80005c6:	2240      	movs	r2, #64	; 0x40
 80005c8:	e000      	b.n	80005cc <generate_parser_flag+0x9c>
 80005ca:	2200      	movs	r2, #0
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	711a      	strb	r2, [r3, #4]

		// Update last parser's flag values
		previous_log = CMD_Parser_Log;
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <generate_parser_flag+0xbc>)
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <generate_parser_flag+0xc0>)
 80005dc:	701a      	strb	r2, [r3, #0]
	}

}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000001 	.word	0x20000001

080005f4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_UART_RxCpltCallback+0x20>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d102      	bne.n	800060c <HAL_UART_RxCpltCallback+0x18>
	{
		NVIC_command_parser_INT(huart);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff fdfc 	bl	8000204 <NVIC_command_parser_INT>
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40005000 	.word	0x40005000

08000618 <update_LEDs>:

void update_LEDs(ROBOT6900_HANDLER* h_robot6900)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	static uint16_t LEDs_set[8] = {LD3_Pin, LD4_Pin ,LD5_Pin, LD6_Pin, LD7_Pin, LD8_Pin, LD9_Pin, LD10_Pin};

	for(uint8_t i = 0 ; i < 8 ; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e024      	b.n	8000670 <update_LEDs+0x58>
	{
		if( ((h_robot6900->robot_state.debug_leds) & (0x01 << i)) == (0x01 << i))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	4619      	mov	r1, r3
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	ea01 0203 	and.w	r2, r1, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f303 	lsl.w	r3, r1, r3
 8000640:	429a      	cmp	r2, r3
 8000642:	d109      	bne.n	8000658 <update_LEDs+0x40>
		{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_SET);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <update_LEDs+0x68>)
 8000648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <update_LEDs+0x6c>)
 8000652:	f002 fa81 	bl	8002b58 <HAL_GPIO_WritePin>
 8000656:	e008      	b.n	800066a <update_LEDs+0x52>
		}
		else{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_RESET);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <update_LEDs+0x68>)
 800065c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <update_LEDs+0x6c>)
 8000666:	f002 fa77 	bl	8002b58 <HAL_GPIO_WritePin>
	for(uint8_t i = 0 ; i < 8 ; i++)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	3301      	adds	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d9d7      	bls.n	8000626 <update_LEDs+0xe>
		}
	}
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000018 	.word	0x20000018
 8000684:	48001000 	.word	0x48001000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fdc4 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f834 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fa5a 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000698:	f000 fa3a 	bl	8000b10 <MX_DMA_Init>
  MX_ADC1_Init();
 800069c:	f000 f898 	bl	80007d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006a0:	f000 f932 	bl	8000908 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006a4:	f000 f970 	bl	8000988 <MX_SPI1_Init>
  MX_UART4_Init();
 80006a8:	f000 f9ac 	bl	8000a04 <MX_UART4_Init>
  MX_UART5_Init();
 80006ac:	f000 f9da 	bl	8000a64 <MX_UART5_Init>
  MX_USB_PCD_Init();
 80006b0:	f000 fa0c 	bl	8000acc <MX_USB_PCD_Init>
//  MX_IWDG_Init();
  MX_CRC_Init();
 80006b4:	f000 f8fc 	bl	80008b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  // Initiate LOG LEDs
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f002 fa49 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LOG_WARNING_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f002 fa42 	bl	8002b58 <HAL_GPIO_WritePin>


  uart_init(&huart5, &hcrc);
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <main+0x68>)
 80006d6:	4807      	ldr	r0, [pc, #28]	; (80006f4 <main+0x6c>)
 80006d8:	f7ff fdc4 	bl	8000264 <uart_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  cmd_parser_process(&h_robot6900);
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <main+0x70>)
 80006de:	f7ff fddd 	bl	800029c <cmd_parser_process>
	  update_LEDs(&h_robot6900);
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <main+0x70>)
 80006e4:	f7ff ff98 	bl	8000618 <update_LEDs>
	  parser_return(&h_robot6900);
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <main+0x70>)
 80006ea:	f7ff fef7 	bl	80004dc <parser_return>
	  cmd_parser_process(&h_robot6900);
 80006ee:	e7f5      	b.n	80006dc <main+0x54>
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	20000160 	.word	0x20000160
 80006f8:	20000004 	.word	0x20000004

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09e      	sub	sp, #120	; 0x78
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000706:	2228      	movs	r2, #40	; 0x28
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 f8c6 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	223c      	movs	r2, #60	; 0x3c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f8b8 	bl	800589c <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800072c:	230b      	movs	r3, #11
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000734:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2310      	movs	r3, #16
 8000740:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000754:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fc18 	bl	8002f90 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000766:	f000 faab 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fb0a 	bl	8003da0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 fa95 	bl	8000cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <SystemClock_Config+0xd0>)
 8000798:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80007a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80007ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fd29 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007c0:	f000 fa7e 	bl	8000cc0 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3778      	adds	r7, #120	; 0x78
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	000200b8 	.word	0x000200b8

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_ADC1_Init+0xdc>)
 80007f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_ADC1_Init+0xdc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000800:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_ADC1_Init+0xdc>)
 800080e:	2200      	movs	r2, #0
 8000810:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <MX_ADC1_Init+0xdc>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000822:	2201      	movs	r2, #1
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ADC1_Init+0xdc>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ADC1_Init+0xdc>)
 800083c:	2204      	movs	r2, #4
 800083e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000842:	2200      	movs	r2, #0
 8000844:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000848:	2200      	movs	r2, #0
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <MX_ADC1_Init+0xdc>)
 800084e:	f000 fd49 	bl	80012e4 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 fa32 	bl	8000cc0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000868:	f001 fa08 	bl	8001c7c <HAL_ADCEx_MultiModeConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000872:	f000 fa25 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000876:	2302      	movs	r3, #2
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2301      	movs	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_ADC1_Init+0xdc>)
 8000894:	f000 ff06 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800089e:	f000 fa0f 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001e0 	.word	0x200001e0

080008b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */
	// CRC8 Polynom 0x9b = 155
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
	hcrc.Init.InitValue = 0xFF;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_CRC_Init+0x50>)
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	611a      	str	r2, [r3, #16]

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_CRC_Init+0x50>)
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <MX_CRC_Init+0x54>)
 80008be:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_CRC_Init+0x50>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_CRC_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 155;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_CRC_Init+0x50>)
 80008ce:	229b      	movs	r2, #155	; 0x9b
 80008d0:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_CRC_Init+0x50>)
 80008d4:	2210      	movs	r2, #16
 80008d6:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_CRC_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_CRC_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_CRC_Init+0x50>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_CRC_Init+0x50>)
 80008ec:	f001 fc5a 	bl	80021a4 <HAL_CRC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 f9e3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000013c 	.word	0x2000013c
 8000904:	40023000 	.word	0x40023000

08000908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_I2C1_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_I2C1_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_I2C1_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <MX_I2C1_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_I2C1_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_I2C1_Init+0x74>)
 8000944:	f002 f920 	bl	8002b88 <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 f9b7 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_I2C1_Init+0x74>)
 8000956:	f002 f9a6 	bl	8002ca6 <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 f9ae 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_I2C1_Init+0x74>)
 8000968:	f002 f9e8 	bl	8002d3c <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f9a5 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000e0 	.word	0x200000e0
 8000980:	40005400 	.word	0x40005400
 8000984:	2000090e 	.word	0x2000090e

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2210      	movs	r2, #16
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	f003 fdc0 	bl	800456c <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 f965 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200002b0 	.word	0x200002b0
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_UART4_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_UART4_Init+0x58>)
 8000a48:	f003 ff41 	bl	80048ce <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f935 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000230 	.word	0x20000230
 8000a60:	40004c00 	.word	0x40004c00

08000a64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_UART5_Init+0x64>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_UART5_Init+0x60>)
 8000ab0:	f003 ff0d 	bl	80048ce <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8000aba:	f000 f901 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000160 	.word	0x20000160
 8000ac8:	40005000 	.word	0x40005000

08000acc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <MX_USB_PCD_Init+0x40>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_USB_PCD_Init+0x3c>)
 8000af6:	f002 f96d 	bl	8002dd4 <HAL_PCD_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000b00:	f000 f8de 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000314 	.word	0x20000314
 8000b0c:	40005c00 	.word	0x40005c00

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_DMA_Init+0x38>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	203a      	movs	r0, #58	; 0x3a
 8000b34:	f001 faf1 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000b38:	203a      	movs	r0, #58	; 0x3a
 8000b3a:	f001 fb0a 	bl	8002152 <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b62:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a52      	ldr	r2, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b44      	ldr	r3, [pc, #272]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a34      	ldr	r2, [pc, #208]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000bf8:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000bfa:	f001 ffad 	bl	8002b58 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin|CS_Accelerometer_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c04:	482c      	ldr	r0, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000c06:	f001 ffa7 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin|LOG_WARNING_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f001 ffa0 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000c18:	2337      	movs	r3, #55	; 0x37
 8000c1a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_GPIO_Init+0x170>)
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000c2c:	f001 fe1a 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c30:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000c34:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000c4a:	f001 fe0b 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f001 fdfe 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_FPGA_Pin CS_Accelerometer_Pin */
  GPIO_InitStruct.Pin = CS_FPGA_Pin|CS_Accelerometer_Pin;
 8000c68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000c82:	f001 fdef 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOG_HARDFAULT_Pin LOG_WARNING_Pin */
  GPIO_InitStruct.Pin = LOG_HARDFAULT_Pin|LOG_WARNING_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f001 fddf 	bl	8002864 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	10120000 	.word	0x10120000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f001 f9fc 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d38:	d124      	bne.n	8000d84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_ADC_MspInit+0x74>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f001 fd70 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_CRC_MspInit+0x38>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10b      	bne.n	8000dba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_CRC_MspInit+0x3c>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023000 	.word	0x40023000
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_I2C_MspInit+0x7c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d127      	bne.n	8000e42 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <HAL_I2C_MspInit+0x84>)
 8000e26:	f001 fd1d 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_SPI_MspInit+0x8c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d130      	bne.n	8000edc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_SPI_MspInit+0x90>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000eaa:	23e0      	movs	r3, #224	; 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f001 fccc 	bl	8002864 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2023      	movs	r0, #35	; 0x23
 8000ed2:	f001 f922 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ed6:	2023      	movs	r0, #35	; 0x23
 8000ed8:	f001 f93b 	bl	8002152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013000 	.word	0x40013000
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a54      	ldr	r2, [pc, #336]	; (800105c <HAL_UART_MspInit+0x170>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d150      	bne.n	8000fb0 <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a53      	ldr	r2, [pc, #332]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b51      	ldr	r3, [pc, #324]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b4e      	ldr	r3, [pc, #312]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000f50:	2305      	movs	r3, #5
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4842      	ldr	r0, [pc, #264]	; (8001064 <HAL_UART_MspInit+0x178>)
 8000f5c:	f001 fc82 	bl	8002864 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8000f60:	4b41      	ldr	r3, [pc, #260]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f62:	4a42      	ldr	r2, [pc, #264]	; (800106c <HAL_UART_MspInit+0x180>)
 8000f64:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000f84:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000f92:	4835      	ldr	r0, [pc, #212]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000f94:	f001 fb02 	bl	800259c <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000f9e:	f7ff fe8f 	bl	8000cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a30      	ldr	r2, [pc, #192]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000fa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_UART_MspInit+0x17c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000fae:	e051      	b.n	8001054 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==UART5)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <HAL_UART_MspInit+0x184>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d14c      	bne.n	8001054 <HAL_UART_MspInit+0x168>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_UART_MspInit+0x174>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001014:	2305      	movs	r3, #5
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <HAL_UART_MspInit+0x178>)
 8001020:	f001 fc20 	bl	8002864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001024:	2304      	movs	r3, #4
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001034:	2305      	movs	r3, #5
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <HAL_UART_MspInit+0x188>)
 8001040:	f001 fc10 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2035      	movs	r0, #53	; 0x35
 800104a:	f001 f866 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800104e:	2035      	movs	r0, #53	; 0x35
 8001050:	f001 f87f 	bl	8002152 <HAL_NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004c00 	.word	0x40004c00
 8001060:	40021000 	.word	0x40021000
 8001064:	48000800 	.word	0x48000800
 8001068:	2000009c 	.word	0x2000009c
 800106c:	40020430 	.word	0x40020430
 8001070:	40005000 	.word	0x40005000
 8001074:	48000c00 	.word	0x48000c00

08001078 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_PCD_MspInit+0x80>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d129      	bne.n	80010ee <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_PCD_MspInit+0x84>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_PCD_MspInit+0x84>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_PCD_MspInit+0x84>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80010c4:	230e      	movs	r3, #14
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f001 fbc7 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_PCD_MspInit+0x84>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_PCD_MspInit+0x84>)
 80010dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_PCD_MspInit+0x84>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005c00 	.word	0x40005c00
 80010fc:	40021000 	.word	0x40021000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8a6 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <SPI1_IRQHandler+0x10>)
 8001162:	f003 fa95 	bl	8004690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200002b0 	.word	0x200002b0

08001170 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <UART5_IRQHandler+0x10>)
 8001176:	f003 fce3 	bl	8004b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000160 	.word	0x20000160

08001184 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DMA2_Channel3_IRQHandler+0x10>)
 800118a:	f001 fa8c 	bl	80026a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000009c 	.word	0x2000009c

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <SystemInit+0x28>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SystemInit+0x28>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SystemInit+0x28>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	609a      	str	r2, [r3, #8]
#endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
	ldr	r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopForever+0x12>)
	b	LoopFillZerobss
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011e4:	f842 3b04 	str.w	r3, [r2], #4

080011e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <LoopForever+0x16>)
	cmp	r2, r3
 80011ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ee:	f7ff ffd3 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f004 fb2f 	bl	8005854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f6:	f7ff fa47 	bl	8000688 <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001200:	08005924 	.word	0x08005924
	ldr	r0, =_sdata
 8001204:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001208:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 800120c:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8001210:	20000604 	.word	0x20000604

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 ff6b 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fd4c 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 ff91 	bl	800218a <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 ff4b 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000028 	.word	0x20000028
 800129c:	20000030 	.word	0x20000030
 80012a0:	2000002c 	.word	0x2000002c

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000030 	.word	0x20000030
 80012c8:	20000600 	.word	0x20000600

080012cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000600 	.word	0x20000600

080012e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b09a      	sub	sp, #104	; 0x68
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e1c9      	b.n	8001698 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	d176      	bne.n	8001404 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d152      	bne.n	80013c4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fced 	bl	8000d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d13b      	bne.n	80013c4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fd87 	bl	8001e60 <ADC_Disable>
 8001352:	4603      	mov	r3, r0
 8001354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	d12f      	bne.n	80013c4 <HAL_ADC_Init+0xe0>
 8001364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001368:	2b00      	cmp	r3, #0
 800136a:	d12b      	bne.n	80013c4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800138e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800139e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013a0:	4b86      	ldr	r3, [pc, #536]	; (80015bc <HAL_ADC_Init+0x2d8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a86      	ldr	r2, [pc, #536]	; (80015c0 <HAL_ADC_Init+0x2dc>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9a      	lsrs	r2, r3, #18
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013b6:	e002      	b.n	80013be <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e0:	d110      	bne.n	8001404 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f023 0312 	bic.w	r3, r3, #18
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f043 0201 	orr.w	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8136 	bne.w	800167e <HAL_ADC_Init+0x39a>
 8001412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8131 	bne.w	800167e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8129 	bne.w	800167e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001434:	f043 0202 	orr.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d004      	beq.n	8001450 <HAL_ADC_Init+0x16c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a5e      	ldr	r2, [pc, #376]	; (80015c4 <HAL_ADC_Init+0x2e0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_ADC_Init+0x170>
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_ADC_Init+0x2e4>)
 8001452:	e000      	b.n	8001456 <HAL_ADC_Init+0x172>
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_ADC_Init+0x2e8>)
 8001456:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001460:	d102      	bne.n	8001468 <HAL_ADC_Init+0x184>
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <HAL_ADC_Init+0x2e0>)
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e01a      	b.n	800149e <HAL_ADC_Init+0x1ba>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a55      	ldr	r2, [pc, #340]	; (80015c4 <HAL_ADC_Init+0x2e0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d103      	bne.n	800147a <HAL_ADC_Init+0x196>
 8001472:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e011      	b.n	800149e <HAL_ADC_Init+0x1ba>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d102      	bne.n	800148a <HAL_ADC_Init+0x1a6>
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_ADC_Init+0x2f0>)
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e009      	b.n	800149e <HAL_ADC_Init+0x1ba>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_ADC_Init+0x2f0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d102      	bne.n	800149a <HAL_ADC_Init+0x1b6>
 8001494:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e001      	b.n	800149e <HAL_ADC_Init+0x1ba>
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_ADC_Init+0x1da>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x1da>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_ADC_Init+0x1dc>
 80014be:	2300      	movs	r3, #0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11c      	bne.n	80014fe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d010      	beq.n	80014ec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Init+0x202>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Init+0x202>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_ADC_Init+0x204>
 80014e6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7e5b      	ldrb	r3, [r3, #25]
 8001502:	035b      	lsls	r3, r3, #13
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001508:	2a01      	cmp	r2, #1
 800150a:	d002      	beq.n	8001512 <HAL_ADC_Init+0x22e>
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	e000      	b.n	8001514 <HAL_ADC_Init+0x230>
 8001512:	2200      	movs	r2, #0
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4313      	orrs	r3, r2
 8001522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001524:	4313      	orrs	r3, r2
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d11b      	bne.n	800156a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e5b      	ldrb	r3, [r3, #25]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	3b01      	subs	r3, #1
 8001540:	045a      	lsls	r2, r3, #17
 8001542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001544:	4313      	orrs	r3, r2
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
 800154c:	e00d      	b.n	800156a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001556:	f043 0220 	orr.w	r2, r3, #32
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	2b01      	cmp	r3, #1
 8001570:	d03a      	beq.n	80015e8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_ADC_Init+0x2ec>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d004      	beq.n	8001586 <HAL_ADC_Init+0x2a2>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_ADC_Init+0x2f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d128      	bne.n	80015d8 <HAL_ADC_Init+0x2f4>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800158e:	d012      	beq.n	80015b6 <HAL_ADC_Init+0x2d2>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d00a      	beq.n	80015b0 <HAL_ADC_Init+0x2cc>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015a2:	d002      	beq.n	80015aa <HAL_ADC_Init+0x2c6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	e018      	b.n	80015dc <HAL_ADC_Init+0x2f8>
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	e015      	b.n	80015dc <HAL_ADC_Init+0x2f8>
 80015b0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80015b4:	e012      	b.n	80015dc <HAL_ADC_Init+0x2f8>
 80015b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015ba:	e00f      	b.n	80015dc <HAL_ADC_Init+0x2f8>
 80015bc:	20000028 	.word	0x20000028
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	50000100 	.word	0x50000100
 80015c8:	50000300 	.word	0x50000300
 80015cc:	50000700 	.word	0x50000700
 80015d0:	50000400 	.word	0x50000400
 80015d4:	50000500 	.word	0x50000500
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015e0:	4313      	orrs	r3, r2
 80015e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015e4:	4313      	orrs	r3, r2
 80015e6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d114      	bne.n	8001620 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001604:	f023 0302 	bic.w	r3, r3, #2
 8001608:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	039a      	lsls	r2, r3, #14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4313      	orrs	r3, r2
 800161a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800161c:	4313      	orrs	r3, r2
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_ADC_Init+0x3bc>)
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001630:	430b      	orrs	r3, r1
 8001632:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10c      	bne.n	8001656 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f023 010f 	bic.w	r1, r3, #15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
 8001654:	e007      	b.n	8001666 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020f 	bic.w	r2, r2, #15
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f023 0303 	bic.w	r3, r3, #3
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
 800167c:	e00a      	b.n	8001694 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f023 0312 	bic.w	r3, r3, #18
 8001686:	f043 0210 	orr.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001698:	4618      	mov	r0, r3
 800169a:	3768      	adds	r7, #104	; 0x68
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	fff0c007 	.word	0xfff0c007

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b09b      	sub	sp, #108	; 0x6c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e2cb      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x5ba>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 82af 	bne.w	8001c3c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d81c      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	231f      	movs	r3, #31
 80016fc:	4093      	lsls	r3, r2
 80016fe:	43db      	mvns	r3, r3
 8001700:	4019      	ands	r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e063      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d81e      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3b1e      	subs	r3, #30
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3b1e      	subs	r3, #30
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e040      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b0e      	cmp	r3, #14
 800176c:	d81e      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	3b3c      	subs	r3, #60	; 0x3c
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	3b3c      	subs	r3, #60	; 0x3c
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
 80017aa:	e01d      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	3b5a      	subs	r3, #90	; 0x5a
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	3b5a      	subs	r3, #90	; 0x5a
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80e5 	bne.w	80019c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6999      	ldr	r1, [r3, #24]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b03      	cmp	r3, #3
 800188e:	d84f      	bhi.n	8001930 <HAL_ADC_ConfigChannel+0x28c>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_ADC_ConfigChannel+0x1f4>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018cb 	.word	0x080018cb
 80018a0:	080018ed 	.word	0x080018ed
 80018a4:	0800190f 	.word	0x0800190f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ae:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ba:	430a      	orrs	r2, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c8:	e07e      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d0:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	0691      	lsls	r1, r2, #26
 80018da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018dc:	430a      	orrs	r2, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ea:	e06d      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f2:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	0691      	lsls	r1, r2, #26
 80018fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190c:	e05c      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001914:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_ADC_ConfigChannel+0x488>)
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	0691      	lsls	r1, r2, #26
 800191e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001920:	430a      	orrs	r2, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800192e:	e04b      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	069b      	lsls	r3, r3, #26
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001952:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800195a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001976:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	069b      	lsls	r3, r3, #26
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800199a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	069b      	lsls	r3, r3, #26
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019c0:	e001      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_ADC_ConfigChannel+0x346>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 8131 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d00f      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a16:	e049      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d91c      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6999      	ldr	r1, [r3, #24]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b1b      	subs	r3, #27
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4019      	ands	r1, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6898      	ldr	r0, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1b      	subs	r3, #27
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e01b      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab4:	d004      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0x41c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x420>
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_ADC_ConfigChannel+0x490>)
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x422>
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_ADC_ConfigChannel+0x494>)
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	f040 80ac 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80a5 	bne.w	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b10:	d102      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x474>
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e023      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_ADC_ConfigChannel+0x48c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10c      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x498>
 8001b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e01a      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b2a:	bf00      	nop
 8001b2c:	83fff000 	.word	0x83fff000
 8001b30:	50000100 	.word	0x50000100
 8001b34:	50000300 	.word	0x50000300
 8001b38:	50000700 	.word	0x50000700
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x4a8>
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e009      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d102      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x4b8>
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e001      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4bc>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x4de>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d150      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x504>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x504>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_ADC_ConfigChannel+0x506>
 8001ba8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d13c      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x54e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bbe:	d118      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9a      	lsrs	r2, r3, #18
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be2:	e002      	b.n	8001bea <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f9      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bf0:	e02e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d10b      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x56e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c02:	d106      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c10:	e01e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c24:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c26:	e013      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c3a:	e00a      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c50:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	376c      	adds	r7, #108	; 0x6c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000500 	.word	0x50000500
 8001c74:	20000028 	.word	0x20000028
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b099      	sub	sp, #100	; 0x64
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c94:	d102      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	e01a      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d103      	bne.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ca6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e011      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b0      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0a9      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 808d 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8086 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d040      	beq.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d46:	035b      	lsls	r3, r3, #13
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d15c      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d14b      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001da0:	f023 030f 	bic.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001db4:	e03c      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d112      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e12:	f023 030f 	bic.w	r3, r3, #15
 8001e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e1a:	e009      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e2e:	e000      	b.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3764      	adds	r7, #100	; 0x64
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	50000100 	.word	0x50000100
 8001e50:	50000400 	.word	0x50000400
 8001e54:	50000500 	.word	0x50000500
 8001e58:	50000300 	.word	0x50000300
 8001e5c:	50000700 	.word	0x50000700

08001e60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <ADC_Disable+0x2c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <ADC_Disable+0x2c>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <ADC_Disable+0x2e>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d040      	beq.n	8001f14 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030d 	and.w	r3, r3, #13
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10f      	bne.n	8001ec0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0202 	orr.w	r2, r2, #2
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff fa08 	bl	80012cc <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ebe:	e022      	b.n	8001f06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f043 0210 	orr.w	r2, r3, #16
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e01c      	b.n	8001f16 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001edc:	f7ff f9f6 	bl	80012cc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d90d      	bls.n	8001f06 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f043 0210 	orr.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d0e3      	beq.n	8001edc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db10      	blt.n	8001ff4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <__NVIC_DisableIRQ+0x40>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ff0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff07 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff1c 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff0f 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff1f 	bl	8001fc0 <__NVIC_DisableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff94 	bl	80020c0 <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e054      	b.n	8002260 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7f5b      	ldrb	r3, [r3, #29]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fde2 	bl	8000d90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_CRC_Init+0xc4>)
 80021e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0218 	bic.w	r2, r2, #24
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	e00c      	b.n	800220e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	461a      	mov	r2, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f946 	bl	8002490 <HAL_CRCEx_Polynomial_Set>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e028      	b.n	8002260 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	795b      	ldrb	r3, [r3, #5]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	e004      	b.n	800222c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6912      	ldr	r2, [r2, #16]
 800222a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	04c11db7 	.word	0x04c11db7

0800226c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2202      	movs	r2, #2
 8002280:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d022      	beq.n	80022e0 <HAL_CRC_Calculate+0x74>
 800229a:	2b03      	cmp	r3, #3
 800229c:	d002      	beq.n	80022a4 <HAL_CRC_Calculate+0x38>
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d017      	beq.n	80022d2 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80022a2:	e024      	b.n	80022ee <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00a      	b.n	80022c0 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	441a      	add	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3f0      	bcc.n	80022aa <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	613b      	str	r3, [r7, #16]
      break;
 80022d0:	e00d      	b.n	80022ee <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f811 	bl	80022fe <CRC_Handle_8>
 80022dc:	6138      	str	r0, [r7, #16]
      break;
 80022de:	e006      	b.n	80022ee <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f898 	bl	800241a <CRC_Handle_16>
 80022ea:	6138      	str	r0, [r7, #16]
      break;
 80022ec:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80022f4:	693b      	ldr	r3, [r7, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80022fe:	b480      	push	{r7}
 8002300:	b089      	sub	sp, #36	; 0x24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	e023      	b.n	8002358 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	3301      	adds	r3, #1
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	440b      	add	r3, r1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800232a:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	440b      	add	r3, r1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800233a:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3303      	adds	r3, #3
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	440b      	add	r3, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800234e:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3d6      	bcc.n	8002310 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d04d      	beq.n	8002408 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d116      	bne.n	80023be <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	3301      	adds	r3, #1
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	440b      	add	r3, r1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	8b7a      	ldrh	r2, [r7, #26]
 80023bc:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d11f      	bne.n	8002408 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3301      	adds	r3, #1
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	440b      	add	r3, r1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	8b7a      	ldrh	r2, [r7, #26]
 80023f4:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4413      	add	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800241a:	b480      	push	{r7}
 800241c:	b087      	sub	sp, #28
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e013      	b.n	8002454 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	041a      	lsls	r2, r3, #16
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	440b      	add	r3, r1
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	429a      	cmp	r2, r3
 800245c:	d3e6      	bcc.n	800242c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80024a0:	231f      	movs	r3, #31
 80024a2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80024a4:	bf00      	nop
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	613a      	str	r2, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_CRCEx_Polynomial_Set+0x34>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b18      	cmp	r3, #24
 80024c8:	d846      	bhi.n	8002558 <HAL_CRCEx_Polynomial_Set+0xc8>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	0800255f 	.word	0x0800255f
 80024d4:	08002559 	.word	0x08002559
 80024d8:	08002559 	.word	0x08002559
 80024dc:	08002559 	.word	0x08002559
 80024e0:	08002559 	.word	0x08002559
 80024e4:	08002559 	.word	0x08002559
 80024e8:	08002559 	.word	0x08002559
 80024ec:	08002559 	.word	0x08002559
 80024f0:	0800254d 	.word	0x0800254d
 80024f4:	08002559 	.word	0x08002559
 80024f8:	08002559 	.word	0x08002559
 80024fc:	08002559 	.word	0x08002559
 8002500:	08002559 	.word	0x08002559
 8002504:	08002559 	.word	0x08002559
 8002508:	08002559 	.word	0x08002559
 800250c:	08002559 	.word	0x08002559
 8002510:	08002541 	.word	0x08002541
 8002514:	08002559 	.word	0x08002559
 8002518:	08002559 	.word	0x08002559
 800251c:	08002559 	.word	0x08002559
 8002520:	08002559 	.word	0x08002559
 8002524:	08002559 	.word	0x08002559
 8002528:	08002559 	.word	0x08002559
 800252c:	08002559 	.word	0x08002559
 8002530:	08002535 	.word	0x08002535
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d913      	bls.n	8002562 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800253e:	e010      	b.n	8002562 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b07      	cmp	r3, #7
 8002544:	d90f      	bls.n	8002566 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800254a:	e00c      	b.n	8002566 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	d90b      	bls.n	800256a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002556:	e008      	b.n	800256a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
      break;
 800255c:	e006      	b.n	800256c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800255e:	bf00      	nop
 8002560:	e004      	b.n	800256c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002562:	bf00      	nop
 8002564:	e002      	b.n	800256c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800256a:	bf00      	nop
  }
  if (status == HAL_OK)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 0118 	bic.w	r1, r3, #24
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e037      	b.n	8002622 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8f1 	bl	80027ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}  
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800263c:	2b02      	cmp	r3, #2
 800263e:	d005      	beq.n	800264c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e027      	b.n	800269c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 020e 	bic.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
    } 
  }
  return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2204      	movs	r2, #4
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d024      	beq.n	8002718 <HAL_DMA_IRQHandler+0x72>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01f      	beq.n	8002718 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0204 	bic.w	r2, r2, #4
 80026f4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	2104      	movs	r1, #4
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002716:	e065      	b.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2202      	movs	r2, #2
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02c      	beq.n	8002782 <HAL_DMA_IRQHandler+0xdc>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d027      	beq.n	8002782 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 020a 	bic.w	r2, r2, #10
 800274e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	2102      	movs	r1, #2
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d035      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002780:	e030      	b.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2208      	movs	r2, #8
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d028      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d023      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020e 	bic.w	r2, r2, #14
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
    }
  }
}  
 80027e2:	e7ff      	b.n	80027e4 <HAL_DMA_IRQHandler+0x13e>
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x60>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d80f      	bhi.n	8002820 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <DMA_CalcBaseAndBitshift+0x64>)
 8002808:	4413      	add	r3, r2
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <DMA_CalcBaseAndBitshift+0x68>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <DMA_CalcBaseAndBitshift+0x6c>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800281e:	e00e      	b.n	800283e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <DMA_CalcBaseAndBitshift+0x70>)
 8002828:	4413      	add	r3, r2
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <DMA_CalcBaseAndBitshift+0x68>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <DMA_CalcBaseAndBitshift+0x74>)
 800283c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40020407 	.word	0x40020407
 8002850:	bffdfff8 	.word	0xbffdfff8
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	40020000 	.word	0x40020000
 800285c:	bffdfbf8 	.word	0xbffdfbf8
 8002860:	40020400 	.word	0x40020400

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	e154      	b.n	8002b1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8146 	beq.w	8002b18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d00b      	beq.n	80028ac <HAL_GPIO_Init+0x48>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a0:	2b11      	cmp	r3, #17
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d130      	bne.n	800290e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e2:	2201      	movs	r2, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0201 	and.w	r2, r3, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0xea>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b12      	cmp	r3, #18
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80a0 	beq.w	8002b18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_GPIO_Init+0x2d8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_GPIO_Init+0x2d8>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HAL_GPIO_Init+0x2d8>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f0:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_GPIO_Init+0x2dc>)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a1a:	d019      	beq.n	8002a50 <HAL_GPIO_Init+0x1ec>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a49      	ldr	r2, [pc, #292]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_GPIO_Init+0x1e8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a48      	ldr	r2, [pc, #288]	; (8002b48 <HAL_GPIO_Init+0x2e4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00d      	beq.n	8002a48 <HAL_GPIO_Init+0x1e4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a47      	ldr	r2, [pc, #284]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <HAL_GPIO_Init+0x1e0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a46      	ldr	r2, [pc, #280]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_GPIO_Init+0x1dc>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e008      	b.n	8002a52 <HAL_GPIO_Init+0x1ee>
 8002a40:	2305      	movs	r3, #5
 8002a42:	e006      	b.n	8002a52 <HAL_GPIO_Init+0x1ee>
 8002a44:	2303      	movs	r3, #3
 8002a46:	e004      	b.n	8002a52 <HAL_GPIO_Init+0x1ee>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e002      	b.n	8002a52 <HAL_GPIO_Init+0x1ee>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_GPIO_Init+0x1ee>
 8002a50:	2300      	movs	r3, #0
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	f002 0203 	and.w	r2, r2, #3
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	4093      	lsls	r3, r2
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a62:	4937      	ldr	r1, [pc, #220]	; (8002b40 <HAL_GPIO_Init+0x2dc>)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a94:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002abe:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f aea3 	bne.w	8002874 <HAL_GPIO_Init+0x10>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	48000400 	.word	0x48000400
 8002b48:	48000800 	.word	0x48000800
 8002b4c:	48000c00 	.word	0x48000c00
 8002b50:	48001000 	.word	0x48001000
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e081      	b.n	8002c9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe f90e 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d104      	bne.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	021a      	lsls	r2, r3, #8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69d9      	ldr	r1, [r3, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d138      	bne.n	8002d2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e032      	b.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2224      	movs	r2, #36	; 0x24
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d139      	bne.n	8002dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e033      	b.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af06      	add	r7, sp, #24
 8002dda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0d0      	b.n	8002f88 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe f93c 	bl	8001078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 fce4 	bl	80057da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e04c      	b.n	8002eb2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	3301      	adds	r3, #1
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	b298      	uxth	r0, r3
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	3336      	adds	r3, #54	; 0x36
 8002e56:	4602      	mov	r2, r0
 8002e58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3303      	adds	r3, #3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	333c      	adds	r3, #60	; 0x3c
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3340      	adds	r3, #64	; 0x40
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3ad      	bcc.n	8002e18 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e044      	b.n	8002f4c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3b5      	bcc.n	8002ec2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	687e      	ldr	r6, [r7, #4]
 8002f5e:	466d      	mov	r5, sp
 8002f60:	f106 0410 	add.w	r4, r6, #16
 8002f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	602b      	str	r3, [r5, #0]
 8002f6c:	1d33      	adds	r3, r6, #4
 8002f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f002 fc4d 	bl	8005810 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f000 bef4 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 816a 	beq.w	800328e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fba:	4bb3      	ldr	r3, [pc, #716]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc6:	4bb0      	ldr	r3, [pc, #704]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d159      	bne.n	8003086 <HAL_RCC_OscConfig+0xf6>
 8002fd2:	4bad      	ldr	r3, [pc, #692]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fde:	d152      	bne.n	8003086 <HAL_RCC_OscConfig+0xf6>
 8002fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0x82>
 800300c:	4b9e      	ldr	r3, [pc, #632]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0xae>
 8003012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003016:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800302e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800303a:	4b93      	ldr	r3, [pc, #588]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003042:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003046:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800304a:	fa92 f2a2 	rbit	r2, r2
 800304e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003052:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 810c 	beq.w	800328c <HAL_RCC_OscConfig+0x2fc>
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8106 	bne.w	800328c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f000 be86 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x110>
 8003092:	4b7d      	ldr	r3, [pc, #500]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7c      	ldr	r2, [pc, #496]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e030      	b.n	8003102 <HAL_RCC_OscConfig+0x172>
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x134>
 80030aa:	4b77      	ldr	r3, [pc, #476]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b74      	ldr	r3, [pc, #464]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a73      	ldr	r2, [pc, #460]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01e      	b.n	8003102 <HAL_RCC_OscConfig+0x172>
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ce:	d10c      	bne.n	80030ea <HAL_RCC_OscConfig+0x15a>
 80030d0:	4b6d      	ldr	r3, [pc, #436]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6c      	ldr	r2, [pc, #432]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a69      	ldr	r2, [pc, #420]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e00b      	b.n	8003102 <HAL_RCC_OscConfig+0x172>
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a66      	ldr	r2, [pc, #408]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a63      	ldr	r2, [pc, #396]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 80030fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003102:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f023 020f 	bic.w	r2, r3, #15
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	495d      	ldr	r1, [pc, #372]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d059      	beq.n	80031d4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe f8d4 	bl	80012cc <HAL_GetTick>
 8003124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312a:	f7fe f8cf 	bl	80012cc <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d902      	bls.n	8003140 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	f000 be29 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
 8003140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003144:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003154:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d102      	bne.n	8003172 <HAL_RCC_OscConfig+0x1e2>
 800316c:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x20e>
 8003172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003176:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800318a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800318e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031b2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ab      	beq.n	800312a <HAL_RCC_OscConfig+0x19a>
 80031d2:	e05c      	b.n	800328e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe f87a 	bl	80012cc <HAL_GetTick>
 80031d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031de:	f7fe f875 	bl	80012cc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d902      	bls.n	80031f4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	f000 bdcf 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003208:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_RCC_OscConfig+0x296>
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e015      	b.n	8003252 <HAL_RCC_OscConfig+0x2c2>
 8003226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800323a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800323e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003242:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_RCC_OscConfig+0x2f8>)
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003256:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800325a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800325e:	fa92 f2a2 	rbit	r2, r2
 8003262:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003266:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800326a:	fab2 f282 	clz	r2, r2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f002 021f 	and.w	r2, r2, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ab      	bne.n	80031de <HAL_RCC_OscConfig+0x24e>
 8003286:	e002      	b.n	800328e <HAL_RCC_OscConfig+0x2fe>
 8003288:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 816f 	beq.w	800357c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800329e:	4bd0      	ldr	r3, [pc, #832]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032aa:	4bcd      	ldr	r3, [pc, #820]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d16c      	bne.n	8003390 <HAL_RCC_OscConfig+0x400>
 80032b6:	4bca      	ldr	r3, [pc, #808]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d166      	bne.n	8003390 <HAL_RCC_OscConfig+0x400>
 80032c2:	2302      	movs	r3, #2
 80032c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0x362>
 80032ec:	4bbc      	ldr	r3, [pc, #752]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	e013      	b.n	800331a <HAL_RCC_OscConfig+0x38a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003304:	2302      	movs	r3, #2
 8003306:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800330a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003316:	4bb2      	ldr	r3, [pc, #712]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2202      	movs	r2, #2
 800331c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003320:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003324:	fa92 f2a2 	rbit	r2, r2
 8003328:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800332c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0220 	orr.w	r2, r2, #32
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_RCC_OscConfig+0x3cc>
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d002      	beq.n	800335c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 bd1b 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	21f8      	movs	r1, #248	; 0xf8
 800336c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003374:	fa91 f1a1 	rbit	r1, r1
 8003378:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800337c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003380:	fab1 f181 	clz	r1, r1
 8003384:	b2c9      	uxtb	r1, r1
 8003386:	408b      	lsls	r3, r1
 8003388:	4995      	ldr	r1, [pc, #596]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e0f5      	b.n	800357c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8085 	beq.w	80034a6 <HAL_RCC_OscConfig+0x516>
 800339c:	2301      	movs	r3, #1
 800339e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	2301      	movs	r3, #1
 80033c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd ff80 	bl	80012cc <HAL_GetTick>
 80033cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fd ff7b 	bl	80012cc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	f000 bcd5 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_RCC_OscConfig+0x488>
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x4b0>
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800342a:	2302      	movs	r3, #2
 800342c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003430:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2202      	movs	r2, #2
 8003442:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003446:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800344a:	fa92 f2a2 	rbit	r2, r2
 800344e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003452:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0af      	beq.n	80033d2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	21f8      	movs	r1, #248	; 0xf8
 8003482:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800348a:	fa91 f1a1 	rbit	r1, r1
 800348e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003492:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003496:	fab1 f181 	clz	r1, r1
 800349a:	b2c9      	uxtb	r1, r1
 800349c:	408b      	lsls	r3, r1
 800349e:	4950      	ldr	r1, [pc, #320]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e06a      	b.n	800357c <HAL_RCC_OscConfig+0x5ec>
 80034a6:	2301      	movs	r3, #1
 80034a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fefb 	bl	80012cc <HAL_GetTick>
 80034d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fd fef6 	bl	80012cc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d902      	bls.n	80034f2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	f000 bc50 	b.w	8003d92 <HAL_RCC_OscConfig+0xe02>
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0x592>
 800351c:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e013      	b.n	800354a <HAL_RCC_OscConfig+0x5ba>
 8003522:	2302      	movs	r3, #2
 8003524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003534:	2302      	movs	r3, #2
 8003536:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800353a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x650>)
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2202      	movs	r2, #2
 800354c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003550:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800355c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003560:	fab2 f282 	clz	r2, r2
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f002 021f 	and.w	r2, r2, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1af      	bne.n	80034dc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357c:	1d3b      	adds	r3, r7, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80da 	beq.w	8003740 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d069      	beq.n	800366a <HAL_RCC_OscConfig+0x6da>
 8003596:	2301      	movs	r3, #1
 8003598:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x654>)
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	2301      	movs	r3, #1
 80035be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c0:	f7fd fe84 	bl	80012cc <HAL_GetTick>
 80035c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c8:	e00e      	b.n	80035e8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fd fe7f 	bl	80012cc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d906      	bls.n	80035e8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e3d9      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	10908120 	.word	0x10908120
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035fe:	2202      	movs	r2, #2
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003616:	2202      	movs	r2, #2
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003628:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	4ba5      	ldr	r3, [pc, #660]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 800362c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003632:	2102      	movs	r1, #2
 8003634:	6019      	str	r1, [r3, #0]
 8003636:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f1a3 	rbit	r1, r3
 8003640:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003644:	6019      	str	r1, [r3, #0]
  return result;
 8003646:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0b0      	beq.n	80035ca <HAL_RCC_OscConfig+0x63a>
 8003668:	e06a      	b.n	8003740 <HAL_RCC_OscConfig+0x7b0>
 800366a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003680:	601a      	str	r2, [r3, #0]
  return result;
 8003682:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003686:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <HAL_RCC_OscConfig+0x934>)
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	461a      	mov	r2, r3
 8003698:	2300      	movs	r3, #0
 800369a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fd fe16 	bl	80012cc <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	e009      	b.n	80036ba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fd fe11 	bl	80012cc <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e36b      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 80036ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036d6:	2202      	movs	r2, #2
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f2a3 	rbit	r2, r3
 80036e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036ee:	2202      	movs	r2, #2
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003702:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003706:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800370a:	2102      	movs	r1, #2
 800370c:	6019      	str	r1, [r3, #0]
 800370e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	fa93 f1a3 	rbit	r1, r3
 8003718:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800371c:	6019      	str	r1, [r3, #0]
  return result;
 800371e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1b2      	bne.n	80036a6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8158 	beq.w	8003a00 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b57      	ldr	r3, [pc, #348]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	61d3      	str	r3, [r2, #28]
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f107 0308 	add.w	r3, r7, #8
 8003780:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b4f      	ldr	r3, [pc, #316]	; (80038c8 <HAL_RCC_OscConfig+0x938>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11a      	bne.n	80037ca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003794:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <HAL_RCC_OscConfig+0x938>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <HAL_RCC_OscConfig+0x938>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a0:	f7fd fd94 	bl	80012cc <HAL_GetTick>
 80037a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e009      	b.n	80037be <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fd fd8f 	bl	80012cc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e2e9      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <HAL_RCC_OscConfig+0x938>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x852>
 80037d4:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a39      	ldr	r2, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e02f      	b.n	8003842 <HAL_RCC_OscConfig+0x8b2>
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x876>
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e01d      	b.n	8003842 <HAL_RCC_OscConfig+0x8b2>
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d10c      	bne.n	800382a <HAL_RCC_OscConfig+0x89a>
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a2a      	ldr	r2, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003816:	f043 0304 	orr.w	r3, r3, #4
 800381a:	6213      	str	r3, [r2, #32]
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	e00b      	b.n	8003842 <HAL_RCC_OscConfig+0x8b2>
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d06b      	beq.n	8003924 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fd fd3e 	bl	80012cc <HAL_GetTick>
 8003850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	e00b      	b.n	800386e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fd fd39 	bl	80012cc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e291      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 800386e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003872:	2202      	movs	r2, #2
 8003874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800389c:	601a      	str	r2, [r3, #0]
  return result;
 800389e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d109      	bne.n	80038cc <HAL_RCC_OscConfig+0x93c>
 80038b8:	4b01      	ldr	r3, [pc, #4]	; (80038c0 <HAL_RCC_OscConfig+0x930>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x958>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	10908120 	.word	0x10908120
 80038c8:	40007000 	.word	0x40007000
 80038cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038d0:	2202      	movs	r2, #2
 80038d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	4bbb      	ldr	r3, [pc, #748]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038ec:	2102      	movs	r1, #2
 80038ee:	6011      	str	r1, [r2, #0]
 80038f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	fa92 f1a2 	rbit	r1, r2
 80038fa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038fe:	6011      	str	r1, [r2, #0]
  return result;
 8003900:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f002 021f 	and.w	r2, r2, #31
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f202 	lsl.w	r2, r1, r2
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d099      	beq.n	8003856 <HAL_RCC_OscConfig+0x8c6>
 8003922:	e063      	b.n	80039ec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fd fcd2 	bl	80012cc <HAL_GetTick>
 8003928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392c:	e00b      	b.n	8003946 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fd fccd 	bl	80012cc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e225      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 8003946:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800394a:	2202      	movs	r2, #2
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003974:	601a      	str	r2, [r3, #0]
  return result;
 8003976:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800397a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d102      	bne.n	8003996 <HAL_RCC_OscConfig+0xa06>
 8003990:	4b90      	ldr	r3, [pc, #576]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	e00d      	b.n	80039b2 <HAL_RCC_OscConfig+0xa22>
 8003996:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800399a:	2202      	movs	r2, #2
 800399c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4b89      	ldr	r3, [pc, #548]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039b6:	2102      	movs	r1, #2
 80039b8:	6011      	str	r1, [r2, #0]
 80039ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fa92 f1a2 	rbit	r1, r2
 80039c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039c8:	6011      	str	r1, [r2, #0]
  return result;
 80039ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	fab2 f282 	clz	r2, r2
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	f002 021f 	and.w	r2, r2, #31
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1a0      	bne.n	800392e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4a76      	ldr	r2, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 80039fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 81c2 	beq.w	8003d90 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b71      	ldr	r3, [pc, #452]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	f000 819c 	beq.w	8003d52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f040 8114 	bne.w	8003c4e <HAL_RCC_OscConfig+0xcbe>
 8003a26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	fa93 f2a3 	rbit	r2, r3
 8003a3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a3e:	601a      	str	r2, [r3, #0]
  return result;
 8003a40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	461a      	mov	r2, r3
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fc36 	bl	80012cc <HAL_GetTick>
 8003a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a64:	e009      	b.n	8003a7a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd fc31 	bl	80012cc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e18b      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 8003a7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	fa93 f2a3 	rbit	r2, r3
 8003a8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a92:	601a      	str	r2, [r3, #0]
  return result;
 8003a94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xb24>
 8003aae:	4b49      	ldr	r3, [pc, #292]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e01b      	b.n	8003aec <HAL_RCC_OscConfig+0xb5c>
 8003ab4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fa93 f2a3 	rbit	r2, r3
 8003ae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003af0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003af4:	6011      	str	r1, [r2, #0]
 8003af6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	fa92 f1a2 	rbit	r1, r2
 8003b00:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b04:	6011      	str	r1, [r2, #0]
  return result;
 8003b06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d19e      	bne.n	8003a66 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	4925      	ldr	r1, [pc, #148]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f2a3 	rbit	r2, r3
 8003b58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b5c:	601a      	str	r2, [r3, #0]
  return result;
 8003b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b62:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	461a      	mov	r2, r3
 8003b76:	2301      	movs	r3, #1
 8003b78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fba7 	bl	80012cc <HAL_GetTick>
 8003b7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b82:	e009      	b.n	8003b98 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fba2 	bl	80012cc <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e0fc      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 8003b98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	fa93 f2a3 	rbit	r2, r3
 8003bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bb0:	601a      	str	r2, [r3, #0]
  return result;
 8003bb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xc48>
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <HAL_RCC_OscConfig+0xc44>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	e01e      	b.n	8003c10 <HAL_RCC_OscConfig+0xc80>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <HAL_RCC_OscConfig+0xe0c>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	fa92 f1a2 	rbit	r1, r2
 8003c24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c28:	6011      	str	r1, [r2, #0]
  return result;
 8003c2a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d09b      	beq.n	8003b84 <HAL_RCC_OscConfig+0xbf4>
 8003c4c:	e0a0      	b.n	8003d90 <HAL_RCC_OscConfig+0xe00>
 8003c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c66:	601a      	str	r2, [r3, #0]
  return result;
 8003c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fb22 	bl	80012cc <HAL_GetTick>
 8003c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fd fb1d 	bl	80012cc <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e077      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
 8003ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cba:	601a      	str	r2, [r3, #0]
  return result;
 8003cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_OscConfig+0xd4c>
 8003cd6:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_OscConfig+0xe0c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0xd84>
 8003cdc:	f107 0320 	add.w	r3, r7, #32
 8003ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f107 0320 	add.w	r3, r7, #32
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	fa93 f2a3 	rbit	r2, r3
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f107 0318 	add.w	r3, r7, #24
 8003cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f107 0318 	add.w	r3, r7, #24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	fa93 f2a3 	rbit	r2, r3
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <HAL_RCC_OscConfig+0xe0c>)
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f107 0210 	add.w	r2, r7, #16
 8003d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d1c:	6011      	str	r1, [r2, #0]
 8003d1e:	f107 0210 	add.w	r2, r7, #16
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	fa92 f1a2 	rbit	r1, r2
 8003d28:	f107 020c 	add.w	r2, r7, #12
 8003d2c:	6011      	str	r1, [r2, #0]
  return result;
 8003d2e:	f107 020c 	add.w	r2, r7, #12
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	fab2 f282 	clz	r2, r2
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f042 0220 	orr.w	r2, r2, #32
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f002 021f 	and.w	r2, r2, #31
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d19e      	bne.n	8003c8e <HAL_RCC_OscConfig+0xcfe>
 8003d50:	e01e      	b.n	8003d90 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_RCC_OscConfig+0xe0c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d108      	bne.n	8003d8c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b09e      	sub	sp, #120	; 0x78
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e162      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b90      	ldr	r3, [pc, #576]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	498b      	ldr	r1, [pc, #556]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b89      	ldr	r3, [pc, #548]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e14a      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	497f      	ldr	r1, [pc, #508]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80dc 	beq.w	8003fcc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d13c      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xf6>
 8003e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xa6>
 8003e40:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	e00f      	b.n	8003e66 <HAL_RCC_ClockConfig+0xc6>
 8003e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	667b      	str	r3, [r7, #100]	; 0x64
 8003e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e58:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e62:	4b67      	ldr	r3, [pc, #412]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e6e:	fa92 f2a2 	rbit	r2, r2
 8003e72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e76:	fab2 f282 	clz	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f002 021f 	and.w	r2, r2, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d17b      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0f3      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d13c      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x178>
 8003e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x128>
 8003ec2:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	e00f      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x148>
 8003ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
 8003edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eec:	63ba      	str	r2, [r7, #56]	; 0x38
 8003eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef0:	fa92 f2a2 	rbit	r2, r2
 8003ef4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f002 021f 	and.w	r2, r2, #31
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13a      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b2      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1a0>
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	e00d      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1bc>
 8003f40:	2302      	movs	r3, #2
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	61ba      	str	r2, [r7, #24]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	fa92 f2a2 	rbit	r2, r2
 8003f66:	617a      	str	r2, [r7, #20]
  return result;
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	fab2 f282 	clz	r2, r2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f042 0220 	orr.w	r2, r2, #32
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	f002 021f 	and.w	r2, r2, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e079      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	491a      	ldr	r1, [pc, #104]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7fd f996 	bl	80012cc <HAL_GetTick>
 8003fa0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fd f992 	bl	80012cc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e061      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d214      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	4906      	ldr	r1, [pc, #24]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_RCC_ClockConfig+0x25c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e040      	b.n	800407e <HAL_RCC_ClockConfig+0x2de>
 8003ffc:	40022000 	.word	0x40022000
 8004000:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCC_ClockConfig+0x2e8>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	491a      	ldr	r1, [pc, #104]	; (8004088 <HAL_RCC_ClockConfig+0x2e8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCC_ClockConfig+0x2e8>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4912      	ldr	r1, [pc, #72]	; (8004088 <HAL_RCC_ClockConfig+0x2e8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004042:	f000 f829 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004046:	4601      	mov	r1, r0
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <HAL_RCC_ClockConfig+0x2e8>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	22f0      	movs	r2, #240	; 0xf0
 8004052:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	fa92 f2a2 	rbit	r2, r2
 800405a:	60fa      	str	r2, [r7, #12]
  return result;
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	fab2 f282 	clz	r2, r2
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	40d3      	lsrs	r3, r2
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x2ec>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	fa21 f303 	lsr.w	r3, r1, r3
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_RCC_ClockConfig+0x2f0>)
 8004070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <HAL_RCC_ClockConfig+0x2f4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd f8e4 	bl	8001244 <HAL_InitTick>
  
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3778      	adds	r7, #120	; 0x78
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	080058e4 	.word	0x080058e4
 8004090:	20000028 	.word	0x20000028
 8004094:	2000002c 	.word	0x2000002c

08004098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b08b      	sub	sp, #44	; 0x2c
 800409c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040b2:	4b29      	ldr	r3, [pc, #164]	; (8004158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d002      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x30>
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x36>
 80040c6:	e03c      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c8:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_GetSysClockFreq+0xc4>)
 80040ca:	623b      	str	r3, [r7, #32]
      break;
 80040cc:	e03c      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	fa92 f2a2 	rbit	r2, r2
 80040e0:	607a      	str	r2, [r7, #4]
  return result;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	fab2 f282 	clz	r2, r2
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	40d3      	lsrs	r3, r2
 80040ec:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	220f      	movs	r2, #15
 80040fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	fa92 f2a2 	rbit	r2, r2
 8004104:	60fa      	str	r2, [r7, #12]
  return result;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	40d3      	lsrs	r3, r2
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004120:	4a0e      	ldr	r2, [pc, #56]	; (800415c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	fbb2 f2f3 	udiv	r2, r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
 8004130:	e004      	b.n	800413c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	623b      	str	r3, [r7, #32]
      break;
 8004140:	e002      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004144:	623b      	str	r3, [r7, #32]
      break;
 8004146:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004148:	6a3b      	ldr	r3, [r7, #32]
}
 800414a:	4618      	mov	r0, r3
 800414c:	372c      	adds	r7, #44	; 0x2c
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	007a1200 	.word	0x007a1200
 8004160:	080058fc 	.word	0x080058fc
 8004164:	0800590c 	.word	0x0800590c
 8004168:	003d0900 	.word	0x003d0900

0800416c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000028 	.word	0x20000028

08004184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800418a:	f7ff ffef 	bl	800416c <HAL_RCC_GetHCLKFreq>
 800418e:	4601      	mov	r1, r0
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004198:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800419c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	fa92 f2a2 	rbit	r2, r2
 80041a4:	603a      	str	r2, [r7, #0]
  return result;
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	fab2 f282 	clz	r2, r2
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	40d3      	lsrs	r3, r2
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	080058f4 	.word	0x080058f4

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041ce:	f7ff ffcd 	bl	800416c <HAL_RCC_GetHCLKFreq>
 80041d2:	4601      	mov	r1, r0
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80041dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	fa92 f2a2 	rbit	r2, r2
 80041e8:	603a      	str	r2, [r7, #0]
  return result;
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	fab2 f282 	clz	r2, r2
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	40d3      	lsrs	r3, r2
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041f6:	5cd3      	ldrb	r3, [r2, r3]
 80041f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	080058f4 	.word	0x080058f4

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b092      	sub	sp, #72	; 0x48
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80d7 	beq.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004230:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4a4a      	ldr	r2, [pc, #296]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	61d3      	str	r3, [r2, #28]
 8004248:	4b48      	ldr	r3, [pc, #288]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4b45      	ldr	r3, [pc, #276]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d118      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004266:	4b42      	ldr	r3, [pc, #264]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a41      	ldr	r2, [pc, #260]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004272:	f7fd f82b 	bl	80012cc <HAL_GetTick>
 8004276:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd f827 	bl	80012cc <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e169      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8084 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d07c      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b8:	4b2c      	ldr	r3, [pc, #176]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	461a      	mov	r2, r3
 80042e2:	2301      	movs	r3, #1
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	461a      	mov	r2, r3
 8004306:	2300      	movs	r3, #0
 8004308:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04b      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fc ffd7 	bl	80012cc <HAL_GetTick>
 800431e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	e00a      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fc ffd3 	bl	80012cc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e113      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004338:	2302      	movs	r3, #2
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	2302      	movs	r3, #2
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	61fb      	str	r3, [r7, #28]
  return result;
 8004350:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d108      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004366:	4b01      	ldr	r3, [pc, #4]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	e00d      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
 8004374:	10908100 	.word	0x10908100
 8004378:	2302      	movs	r3, #2
 800437a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2202      	movs	r2, #2
 800438a:	613a      	str	r2, [r7, #16]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	fa92 f2a2 	rbit	r2, r2
 8004392:	60fa      	str	r2, [r7, #12]
  return result;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	fab2 f282 	clz	r2, r2
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	f002 021f 	and.w	r2, r2, #31
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0b7      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80043b2:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	496a      	ldr	r1, [pc, #424]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	f023 0203 	bic.w	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	495d      	ldr	r1, [pc, #372]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004402:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4956      	ldr	r1, [pc, #344]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004420:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	494e      	ldr	r1, [pc, #312]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800443e:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f023 0210 	bic.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4947      	ldr	r1, [pc, #284]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800445c:	4b42      	ldr	r3, [pc, #264]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	493f      	ldr	r1, [pc, #252]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800447a:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f023 0220 	bic.w	r2, r3, #32
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	4938      	ldr	r1, [pc, #224]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004498:	4b33      	ldr	r3, [pc, #204]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4930      	ldr	r1, [pc, #192]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044b6:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	4929      	ldr	r1, [pc, #164]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4921      	ldr	r1, [pc, #132]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	491a      	ldr	r1, [pc, #104]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004510:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	4912      	ldr	r1, [pc, #72]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	490b      	ldr	r1, [pc, #44]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	4903      	ldr	r1, [pc, #12]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3748      	adds	r7, #72	; 0x48
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000

0800456c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e084      	b.n	8004688 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc fc5d 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045be:	d902      	bls.n	80045c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e002      	b.n	80045cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045d4:	d007      	beq.n	80045e6 <HAL_SPI_Init+0x7a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045f6:	d903      	bls.n	8004600 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
 80045fe:	e002      	b.n	8004606 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0204 	and.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	ea42 0103 	orr.w	r1, r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
    return;
 80046d2:	e0d8      	b.n	8004886 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_SPI_IRQHandler+0x66>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	09db      	lsrs	r3, r3, #7
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	4798      	blx	r3
    return;
 80046f4:	e0c7      	b.n	8004886 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_SPI_IRQHandler+0x8c>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	099b      	lsrs	r3, r3, #6
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80b5 	beq.w	8004886 <HAL_SPI_IRQHandler+0x1f6>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80ae 	beq.w	8004886 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d023      	beq.n	800477e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d011      	beq.n	8004766 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	f043 0204 	orr.w	r2, r3, #4
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	e00b      	b.n	800477e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]
        return;
 800477c:	e083      	b.n	8004886 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	f043 0208 	orr.w	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d050      	beq.n	8004884 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_SPI_IRQHandler+0x17e>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d034      	beq.n	8004878 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0203 	bic.w	r2, r2, #3
 800481c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_SPI_IRQHandler+0x1fc>)
 800482c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fef9 	bl	800262a <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	4a0d      	ldr	r2, [pc, #52]	; (800488c <HAL_SPI_IRQHandler+0x1fc>)
 8004858:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fee3 	bl	800262a <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004876:	e003      	b.n	8004880 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f809 	bl	8004890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800487e:	e000      	b.n	8004882 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004880:	bf00      	nop
    return;
 8004882:	bf00      	nop
 8004884:	bf00      	nop
  }
}
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	080048a5 	.word	0x080048a5

08004890 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ffe5 	bl	8004890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e040      	b.n	8004962 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fc fafb 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2224      	movs	r2, #36	; 0x24
 80048fa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa71 	bl	8004df4 <UART_SetConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e022      	b.n	8004962 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fc7f 	bl	8005228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fd06 	bl	800536c <UART_CheckIdleState>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	2b20      	cmp	r3, #32
 8004980:	d144      	bne.n	8004a0c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_UART_Transmit_IT+0x22>
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e03d      	b.n	8004a0e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UART_Transmit_IT+0x34>
 800499c:	2302      	movs	r3, #2
 800499e:	e036      	b.n	8004a0e <HAL_UART_Transmit_IT+0xa2>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d107      	bne.n	80049ea <HAL_UART_Transmit_IT+0x7e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <HAL_UART_Transmit_IT+0xb0>)
 80049e6:	665a      	str	r2, [r3, #100]	; 0x64
 80049e8:	e002      	b.n	80049f0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <HAL_UART_Transmit_IT+0xb4>)
 80049ee:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a06:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	080055cd 	.word	0x080055cd
 8004a20:	08005559 	.word	0x08005559

08004a24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d176      	bne.n	8004b28 <HAL_UART_Receive_IT+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_UART_Receive_IT+0x22>
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06f      	b.n	8004b2a <HAL_UART_Receive_IT+0x106>
    }

    __HAL_LOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_UART_Receive_IT+0x34>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e068      	b.n	8004b2a <HAL_UART_Receive_IT+0x106>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d10e      	bne.n	8004aa4 <HAL_UART_Receive_IT+0x80>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_UART_Receive_IT+0x76>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a98:	e01a      	b.n	8004ad0 <HAL_UART_Receive_IT+0xac>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa2:	e015      	b.n	8004ad0 <HAL_UART_Receive_IT+0xac>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_UART_Receive_IT+0xa4>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_UART_Receive_IT+0x9a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004abc:	e008      	b.n	8004ad0 <HAL_UART_Receive_IT+0xac>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	227f      	movs	r2, #127	; 0x7f
 8004ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ac6:	e003      	b.n	8004ad0 <HAL_UART_Receive_IT+0xac>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2222      	movs	r2, #34	; 0x22
 8004ada:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af4:	d107      	bne.n	8004b06 <HAL_UART_Receive_IT+0xe2>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_UART_Receive_IT+0xe2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <HAL_UART_Receive_IT+0x114>)
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
 8004b04:	e002      	b.n	8004b0c <HAL_UART_Receive_IT+0xe8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <HAL_UART_Receive_IT+0x118>)
 8004b0a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004b22:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	08005721 	.word	0x08005721
 8004b3c:	0800567b 	.word	0x0800567b

08004b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d113      	bne.n	8004b98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8114 	beq.w	8004db6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
      }
      return;
 8004b96:	e10e      	b.n	8004db6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80d6 	beq.w	8004d4c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80cb 	beq.w	8004d4c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_UART_IRQHandler+0x9e>
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd6:	f043 0201 	orr.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <HAL_UART_IRQHandler+0xc6>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <HAL_UART_IRQHandler+0xee>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2204      	movs	r2, #4
 8004c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c26:	f043 0202 	orr.w	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2208      	movs	r2, #8
 8004c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c58:	f043 0208 	orr.w	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00f      	beq.n	8004c8a <HAL_UART_IRQHandler+0x14a>
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8093 	beq.w	8004dba <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d004      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d031      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fc08 	bl	80054ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d123      	bne.n	8004d32 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d013      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <HAL_UART_IRQHandler+0x288>)
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fc8b 	bl	800262a <HAL_DMA_Abort_IT>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d24:	4610      	mov	r0, r2
 8004d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d28:	e00e      	b.n	8004d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f858 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	e00a      	b.n	8004d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f854 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	e006      	b.n	8004d48 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f850 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004d46:	e038      	b.n	8004dba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	bf00      	nop
    return;
 8004d4a:	e036      	b.n	8004dba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_UART_IRQHandler+0x232>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fd2b 	bl	80057c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d70:	e026      	b.n	8004dc0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d017      	beq.n	8004dbe <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
    }
    return;
 8004d96:	e012      	b.n	8004dbe <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00e      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x280>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fc4b 	bl	8005648 <UART_EndTransmit_IT>
    return;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <HAL_UART_IRQHandler+0x280>
      return;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <HAL_UART_IRQHandler+0x280>
    return;
 8004dbe:	bf00      	nop
  }

}
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0800552d 	.word	0x0800552d

08004dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e26:	f023 030c 	bic.w	r3, r3, #12
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4aa9      	ldr	r2, [pc, #676]	; (8005118 <UART_SetConfig+0x324>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d121      	bne.n	8004ebc <UART_SetConfig+0xc8>
 8004e78:	4ba8      	ldr	r3, [pc, #672]	; (800511c <UART_SetConfig+0x328>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d817      	bhi.n	8004eb4 <UART_SetConfig+0xc0>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x98>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004eaf 	.word	0x08004eaf
 8004e98:	08004ea3 	.word	0x08004ea3
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e0b2      	b.n	8005008 <UART_SetConfig+0x214>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e0af      	b.n	8005008 <UART_SetConfig+0x214>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e0ac      	b.n	8005008 <UART_SetConfig+0x214>
 8004eae:	2308      	movs	r3, #8
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e0a9      	b.n	8005008 <UART_SetConfig+0x214>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	bf00      	nop
 8004eba:	e0a5      	b.n	8005008 <UART_SetConfig+0x214>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a97      	ldr	r2, [pc, #604]	; (8005120 <UART_SetConfig+0x32c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d123      	bne.n	8004f0e <UART_SetConfig+0x11a>
 8004ec6:	4b95      	ldr	r3, [pc, #596]	; (800511c <UART_SetConfig+0x328>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed2:	d012      	beq.n	8004efa <UART_SetConfig+0x106>
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed8:	d802      	bhi.n	8004ee0 <UART_SetConfig+0xec>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <UART_SetConfig+0xfa>
 8004ede:	e012      	b.n	8004f06 <UART_SetConfig+0x112>
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee4:	d00c      	beq.n	8004f00 <UART_SetConfig+0x10c>
 8004ee6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eea:	d003      	beq.n	8004ef4 <UART_SetConfig+0x100>
 8004eec:	e00b      	b.n	8004f06 <UART_SetConfig+0x112>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e089      	b.n	8005008 <UART_SetConfig+0x214>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e086      	b.n	8005008 <UART_SetConfig+0x214>
 8004efa:	2304      	movs	r3, #4
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e083      	b.n	8005008 <UART_SetConfig+0x214>
 8004f00:	2308      	movs	r3, #8
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e080      	b.n	8005008 <UART_SetConfig+0x214>
 8004f06:	2310      	movs	r3, #16
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	bf00      	nop
 8004f0c:	e07c      	b.n	8005008 <UART_SetConfig+0x214>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a84      	ldr	r2, [pc, #528]	; (8005124 <UART_SetConfig+0x330>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d123      	bne.n	8004f60 <UART_SetConfig+0x16c>
 8004f18:	4b80      	ldr	r3, [pc, #512]	; (800511c <UART_SetConfig+0x328>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f24:	d012      	beq.n	8004f4c <UART_SetConfig+0x158>
 8004f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2a:	d802      	bhi.n	8004f32 <UART_SetConfig+0x13e>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <UART_SetConfig+0x14c>
 8004f30:	e012      	b.n	8004f58 <UART_SetConfig+0x164>
 8004f32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f36:	d00c      	beq.n	8004f52 <UART_SetConfig+0x15e>
 8004f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f3c:	d003      	beq.n	8004f46 <UART_SetConfig+0x152>
 8004f3e:	e00b      	b.n	8004f58 <UART_SetConfig+0x164>
 8004f40:	2300      	movs	r3, #0
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e060      	b.n	8005008 <UART_SetConfig+0x214>
 8004f46:	2302      	movs	r3, #2
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e05d      	b.n	8005008 <UART_SetConfig+0x214>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e05a      	b.n	8005008 <UART_SetConfig+0x214>
 8004f52:	2308      	movs	r3, #8
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e057      	b.n	8005008 <UART_SetConfig+0x214>
 8004f58:	2310      	movs	r3, #16
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	bf00      	nop
 8004f5e:	e053      	b.n	8005008 <UART_SetConfig+0x214>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a70      	ldr	r2, [pc, #448]	; (8005128 <UART_SetConfig+0x334>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d123      	bne.n	8004fb2 <UART_SetConfig+0x1be>
 8004f6a:	4b6c      	ldr	r3, [pc, #432]	; (800511c <UART_SetConfig+0x328>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f76:	d012      	beq.n	8004f9e <UART_SetConfig+0x1aa>
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7c:	d802      	bhi.n	8004f84 <UART_SetConfig+0x190>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <UART_SetConfig+0x19e>
 8004f82:	e012      	b.n	8004faa <UART_SetConfig+0x1b6>
 8004f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f88:	d00c      	beq.n	8004fa4 <UART_SetConfig+0x1b0>
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8e:	d003      	beq.n	8004f98 <UART_SetConfig+0x1a4>
 8004f90:	e00b      	b.n	8004faa <UART_SetConfig+0x1b6>
 8004f92:	2300      	movs	r3, #0
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e037      	b.n	8005008 <UART_SetConfig+0x214>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e034      	b.n	8005008 <UART_SetConfig+0x214>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e031      	b.n	8005008 <UART_SetConfig+0x214>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e02e      	b.n	8005008 <UART_SetConfig+0x214>
 8004faa:	2310      	movs	r3, #16
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	bf00      	nop
 8004fb0:	e02a      	b.n	8005008 <UART_SetConfig+0x214>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	; (800512c <UART_SetConfig+0x338>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d123      	bne.n	8005004 <UART_SetConfig+0x210>
 8004fbc:	4b57      	ldr	r3, [pc, #348]	; (800511c <UART_SetConfig+0x328>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc8:	d012      	beq.n	8004ff0 <UART_SetConfig+0x1fc>
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fce:	d802      	bhi.n	8004fd6 <UART_SetConfig+0x1e2>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <UART_SetConfig+0x1f0>
 8004fd4:	e012      	b.n	8004ffc <UART_SetConfig+0x208>
 8004fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fda:	d00c      	beq.n	8004ff6 <UART_SetConfig+0x202>
 8004fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe0:	d003      	beq.n	8004fea <UART_SetConfig+0x1f6>
 8004fe2:	e00b      	b.n	8004ffc <UART_SetConfig+0x208>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e00e      	b.n	8005008 <UART_SetConfig+0x214>
 8004fea:	2302      	movs	r3, #2
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e00b      	b.n	8005008 <UART_SetConfig+0x214>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e008      	b.n	8005008 <UART_SetConfig+0x214>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e005      	b.n	8005008 <UART_SetConfig+0x214>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	bf00      	nop
 8005002:	e001      	b.n	8005008 <UART_SetConfig+0x214>
 8005004:	2310      	movs	r3, #16
 8005006:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005010:	f040 808e 	bne.w	8005130 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005014:	7ffb      	ldrb	r3, [r7, #31]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d85e      	bhi.n	80050d8 <UART_SetConfig+0x2e4>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x22c>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005045 	.word	0x08005045
 8005024:	08005065 	.word	0x08005065
 8005028:	08005085 	.word	0x08005085
 800502c:	080050d9 	.word	0x080050d9
 8005030:	080050a1 	.word	0x080050a1
 8005034:	080050d9 	.word	0x080050d9
 8005038:	080050d9 	.word	0x080050d9
 800503c:	080050d9 	.word	0x080050d9
 8005040:	080050c1 	.word	0x080050c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005044:	f7ff f89e 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8005048:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	005a      	lsls	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	b29b      	uxth	r3, r3
 8005060:	61bb      	str	r3, [r7, #24]
        break;
 8005062:	e03c      	b.n	80050de <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7ff f8b0 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005068:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	005a      	lsls	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	61bb      	str	r3, [r7, #24]
        break;
 8005082:	e02c      	b.n	80050de <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800508e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6852      	ldr	r2, [r2, #4]
 8005096:	fbb3 f3f2 	udiv	r3, r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	61bb      	str	r3, [r7, #24]
        break;
 800509e:	e01e      	b.n	80050de <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a0:	f7fe fffa 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 80050a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	005a      	lsls	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	441a      	add	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	61bb      	str	r3, [r7, #24]
        break;
 80050be:	e00e      	b.n	80050de <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	61bb      	str	r3, [r7, #24]
        break;
 80050d6:	e002      	b.n	80050de <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
        break;
 80050dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b0f      	cmp	r3, #15
 80050e2:	d916      	bls.n	8005112 <UART_SetConfig+0x31e>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d212      	bcs.n	8005112 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f023 030f 	bic.w	r3, r3, #15
 80050f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	b29a      	uxth	r2, r3
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	4313      	orrs	r3, r2
 8005106:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	897a      	ldrh	r2, [r7, #10]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e07e      	b.n	8005210 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
 8005116:	e07b      	b.n	8005210 <UART_SetConfig+0x41c>
 8005118:	40013800 	.word	0x40013800
 800511c:	40021000 	.word	0x40021000
 8005120:	40004400 	.word	0x40004400
 8005124:	40004800 	.word	0x40004800
 8005128:	40004c00 	.word	0x40004c00
 800512c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8005130:	7ffb      	ldrb	r3, [r7, #31]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d85b      	bhi.n	80051ee <UART_SetConfig+0x3fa>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x348>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	08005161 	.word	0x08005161
 8005140:	0800517f 	.word	0x0800517f
 8005144:	0800519d 	.word	0x0800519d
 8005148:	080051ef 	.word	0x080051ef
 800514c:	080051b9 	.word	0x080051b9
 8005150:	080051ef 	.word	0x080051ef
 8005154:	080051ef 	.word	0x080051ef
 8005158:	080051ef 	.word	0x080051ef
 800515c:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005160:	f7ff f810 	bl	8004184 <HAL_RCC_GetPCLK1Freq>
 8005164:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085a      	lsrs	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	b29b      	uxth	r3, r3
 800517a:	61bb      	str	r3, [r7, #24]
        break;
 800517c:	e03a      	b.n	80051f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517e:	f7ff f823 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005182:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	085a      	lsrs	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	61bb      	str	r3, [r7, #24]
        break;
 800519a:	e02b      	b.n	80051f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80051a6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	61bb      	str	r3, [r7, #24]
        break;
 80051b6:	e01d      	b.n	80051f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b8:	f7fe ff6e 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 80051bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085a      	lsrs	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	441a      	add	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	61bb      	str	r3, [r7, #24]
        break;
 80051d4:	e00e      	b.n	80051f4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	61bb      	str	r3, [r7, #24]
        break;
 80051ec:	e002      	b.n	80051f4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
        break;
 80051f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d908      	bls.n	800520c <UART_SetConfig+0x418>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d204      	bcs.n	800520c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	e001      	b.n	8005210 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop

08005228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01a      	beq.n	800533e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	d10a      	bne.n	800533e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af02      	add	r7, sp, #8
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800537a:	f7fb ffa7 	bl	80012cc <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d10e      	bne.n	80053ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800538e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f82a 	bl	80053f6 <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e020      	b.n	80053ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d10e      	bne.n	80053d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f814 	bl	80053f6 <UART_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e00a      	b.n	80053ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	e05d      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d059      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fb ff5c 	bl	80012cc <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <UART_WaitOnFlagUntilTimeout+0x30>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d11b      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005434:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e042      	b.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02b      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547a:	d123      	bne.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005484:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005494:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e00f      	b.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d092      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005502:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff fc48 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005564:	2b21      	cmp	r3, #33	; 0x21
 8005566:	d12b      	bne.n	80055c0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d110      	bne.n	8005596 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005582:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005594:	e014      	b.n	80055c0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	b292      	uxth	r2, r2
 80055a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d8:	2b21      	cmp	r3, #33	; 0x21
 80055da:	d12f      	bne.n	800563c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d110      	bne.n	800560a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055f6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005606:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005608:	e018      	b.n	800563c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	881a      	ldrh	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800561c:	b292      	uxth	r2, r2
 800561e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff fbad 	bl	8004dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005688:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	2b22      	cmp	r3, #34	; 0x22
 8005690:	d13a      	bne.n	8005708 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005698:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800569a:	89bb      	ldrh	r3, [r7, #12]
 800569c:	b2d9      	uxtb	r1, r3
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	400a      	ands	r2, r1
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d121      	bne.n	8005718 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fa ff77 	bl	80005f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005706:	e007      	b.n	8005718 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0208 	orr.w	r2, r2, #8
 8005716:	619a      	str	r2, [r3, #24]
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800572e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005734:	2b22      	cmp	r3, #34	; 0x22
 8005736:	d13a      	bne.n	80057ae <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800573e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005746:	89ba      	ldrh	r2, [r7, #12]
 8005748:	89fb      	ldrh	r3, [r7, #14]
 800574a:	4013      	ands	r3, r2
 800574c:	b29a      	uxth	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	1c9a      	adds	r2, r3, #2
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d121      	bne.n	80057be <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005788:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fa ff24 	bl	80005f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057ac:	e007      	b.n	80057be <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0208 	orr.w	r2, r2, #8
 80057bc:	619a      	str	r2, [r3, #24]
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057e2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 0014 	add.w	r0, r7, #20
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	b004      	add	sp, #16
 8005850:	4770      	bx	lr
	...

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4e0d      	ldr	r6, [pc, #52]	; (800588c <__libc_init_array+0x38>)
 8005858:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <__libc_init_array+0x3c>)
 800585a:	1ba4      	subs	r4, r4, r6
 800585c:	10a4      	asrs	r4, r4, #2
 800585e:	2500      	movs	r5, #0
 8005860:	42a5      	cmp	r5, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	4e0b      	ldr	r6, [pc, #44]	; (8005894 <__libc_init_array+0x40>)
 8005866:	4c0c      	ldr	r4, [pc, #48]	; (8005898 <__libc_init_array+0x44>)
 8005868:	f000 f820 	bl	80058ac <_init>
 800586c:	1ba4      	subs	r4, r4, r6
 800586e:	10a4      	asrs	r4, r4, #2
 8005870:	2500      	movs	r5, #0
 8005872:	42a5      	cmp	r5, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800587c:	4798      	blx	r3
 800587e:	3501      	adds	r5, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005886:	4798      	blx	r3
 8005888:	3501      	adds	r5, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	0800591c 	.word	0x0800591c
 8005890:	0800591c 	.word	0x0800591c
 8005894:	0800591c 	.word	0x0800591c
 8005898:	08005920 	.word	0x08005920

0800589c <memset>:
 800589c:	4402      	add	r2, r0
 800589e:	4603      	mov	r3, r0
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	f803 1b01 	strb.w	r1, [r3], #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <_init>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr

080058b8 <_fini>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr
