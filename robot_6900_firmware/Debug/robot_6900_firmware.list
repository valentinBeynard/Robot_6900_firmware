
robot_6900_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009ce0  08009ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd8  08009dd8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08009dd8  08009dd8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dd8  08009dd8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c4  20000034  08009e14  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026f8  08009e14  000226f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e91c  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d3f  00000000  00000000  0003e980  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  000426c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00044040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ecc7  00000000  00000000  000457d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001754b  00000000  00000000  0006449f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000af3e5  00000000  00000000  0007b9ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012adcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d60  00000000  00000000  0012ae4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cc8 	.word	0x08009cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08009cc8 	.word	0x08009cc8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <default_process>:
#include "commands.h"

uint8_t default_process(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	

	return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <switch_ON>:

uint8_t switch_ON(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->Etat_Movement = Mouvement_Post_Launch;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	70da      	strb	r2, [r3, #3]

	h_robot6900->robot_state->status_update = 1;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2201      	movs	r2, #1
 8000b44:	705a      	strb	r2, [r3, #1]
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <start_motor>:

uint8_t start_motor(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->Etat_Movement = Start;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2202      	movs	r2, #2
 8000b64:	70da      	strb	r2, [r3, #3]

	h_robot6900->robot_state->status_update = 1;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	705a      	strb	r2, [r3, #1]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <stop_motor>:

uint8_t stop_motor(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->Etat_Movement = Stopper;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	70da      	strb	r2, [r3, #3]

	//h_robot6900->robot_state->status_update = 1;
	return 1;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <start_lidar>:

uint8_t start_lidar(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->LiDAR_State = LiDAR_ACQ_Const;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	751a      	strb	r2, [r3, #20]

	h_robot6900->robot_state->status_update = 1;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	705a      	strb	r2, [r3, #1]
	return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <washer_brosse>:

uint8_t washer_brosse(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	if(_cmd_pck->data == 0x01)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	789b      	ldrb	r3, [r3, #2]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <washer_brosse+0x1c>
	{
		h_robot6900->robot_state->Etat_Washer = Washer_Brosse_ON;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	711a      	strb	r2, [r3, #4]
 8000bde:	e003      	b.n	8000be8 <washer_brosse+0x24>
	}
	else
	{
		h_robot6900->robot_state->Etat_Washer = Washer_Brosse_OFF;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2202      	movs	r2, #2
 8000be6:	711a      	strb	r2, [r3, #4]
	}

	h_robot6900->robot_state->status_update = 1;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	705a      	strb	r2, [r3, #1]
	return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <washer_pump>:

uint8_t washer_pump(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	if(_cmd_pck->data == 0x01)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <washer_pump+0x1c>
	{
		h_robot6900->robot_state->Etat_Washer = Washer_Pump_ON;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	711a      	strb	r2, [r3, #4]
 8000c18:	e003      	b.n	8000c22 <washer_pump+0x24>
	}
	else
	{
		h_robot6900->robot_state->Etat_Washer = Washer_Pump_OFF;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2204      	movs	r2, #4
 8000c20:	711a      	strb	r2, [r3, #4]
	}


	h_robot6900->robot_state->status_update = 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	705a      	strb	r2, [r3, #1]
	return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <washer_UVC>:

uint8_t washer_UVC(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	if(_cmd_pck->data == 0x01)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <washer_UVC+0x1c>
	{
		h_robot6900->robot_state->Etat_Washer = Washer_UVC_ON;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2205      	movs	r2, #5
 8000c50:	711a      	strb	r2, [r3, #4]
 8000c52:	e003      	b.n	8000c5c <washer_UVC+0x24>
	}
	else
	{
		h_robot6900->robot_state->Etat_Washer = Washer_UVC_OFF;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2206      	movs	r2, #6
 8000c5a:	711a      	strb	r2, [r3, #4]
	}

	h_robot6900->robot_state->status_update = 1;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	705a      	strb	r2, [r3, #1]
	return 1;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <NVIC_command_parser_INT>:
 *
 * Fired each time the UART receives a byte command pck, and fill the command pipeline
 *
 */
void NVIC_command_parser_INT(UART_HandleTypeDef *huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	if(CMDs_buffer_size < MAX_COMMAND_STACK_SIZE)
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <NVIC_command_parser_INT+0x50>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d817      	bhi.n	8000cb6 <NVIC_command_parser_INT+0x42>
	{
		/* Fill pipeline and update ptr */
		CMDs_buffer[CMDs_buffer_size] = Rx_buffer;
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <NVIC_command_parser_INT+0x50>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <NVIC_command_parser_INT+0x54>)
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <NVIC_command_parser_INT+0x58>)
 8000c92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CMDs_buffer_size++;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <NVIC_command_parser_INT+0x50>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <NVIC_command_parser_INT+0x50>)
 8000ca2:	701a      	strb	r2, [r3, #0]

		CMDs_buffer_full = 0;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <NVIC_command_parser_INT+0x5c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]

		// Reactivate receive on Interrupt on 1 byte
		HAL_UART_Receive_IT(huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000caa:	2205      	movs	r2, #5
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <NVIC_command_parser_INT+0x58>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f007 fef8 	bl	8008aa4 <HAL_UART_Receive_IT>
	}
	else
	{
		CMDs_buffer_full = 1;
	}
}
 8000cb4:	e002      	b.n	8000cbc <NVIC_command_parser_INT+0x48>
		CMDs_buffer_full = 1;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <NVIC_command_parser_INT+0x5c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000055 	.word	0x20000055
 8000cc8:	20000318 	.word	0x20000318
 8000ccc:	20000050 	.word	0x20000050
 8000cd0:	20000056 	.word	0x20000056

08000cd4 <NVIC_command_parser_TX_INT>:

void NVIC_command_parser_TX_INT(UART_HandleTypeDef *huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if(tx_is_DAM)
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <NVIC_command_parser_TX_INT+0x34>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d009      	beq.n	8000cfa <NVIC_command_parser_TX_INT+0x26>
	{
		HAL_UART_Transmit(huart, test_rn, 3, 0xFFFF);
 8000ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cea:	2203      	movs	r2, #3
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <NVIC_command_parser_TX_INT+0x38>)
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f007 fde8 	bl	80088c4 <HAL_UART_Transmit>
		tx_is_DAM = 0;
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <NVIC_command_parser_TX_INT+0x34>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
	}
	tx_busy = 0;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <NVIC_command_parser_TX_INT+0x3c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000005a 	.word	0x2000005a
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	2000005b 	.word	0x2000005b

08000d14 <uart_init>:
############################################################################
*/

/* Initial the command parser */
void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef* hcrc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	// Initiate ptr
	_hcrc = hcrc;
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <uart_init+0x5c>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	6013      	str	r3, [r2, #0]
	_huart5 = huart;
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <uart_init+0x60>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]

	for(uint16_t i = 0 ; i < 600 ; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	81fb      	strh	r3, [r7, #14]
 8000d2e:	e010      	b.n	8000d52 <uart_init+0x3e>
	{
		_data_test_tx[i] = (i  % 0xFF);
 8000d30:	89fa      	ldrh	r2, [r7, #14]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <uart_init+0x64>)
 8000d34:	fba3 1302 	umull	r1, r3, r3, r2
 8000d38:	09d9      	lsrs	r1, r3, #7
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	1a5b      	subs	r3, r3, r1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	b2d1      	uxtb	r1, r2
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <uart_init+0x68>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0 ; i < 600 ; i++)
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000d58:	d3ea      	bcc.n	8000d30 <uart_init+0x1c>
	}

	// Activate UART Receive Interrupt each 4 bytes received
	HAL_UART_Receive_IT(_huart5, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <uart_init+0x60>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2205      	movs	r2, #5
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <uart_init+0x6c>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 fe9e 	bl	8008aa4 <HAL_UART_Receive_IT>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002f4 	.word	0x200002f4
 8000d74:	200002f0 	.word	0x200002f0
 8000d78:	80808081 	.word	0x80808081
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	20000050 	.word	0x20000050

08000d84 <cmd_parser_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR cmd_parser_process(ROBOT6900_HANDLER* h_robot6900)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	if(CMDs_buffer_size > 0)
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <cmd_parser_process+0x70>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <cmd_parser_process+0x1a>
	{
		current_state = GET_COMMAND;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <cmd_parser_process+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e002      	b.n	8000da4 <cmd_parser_process+0x20>
	}
	else{
		current_state = WAIT;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <cmd_parser_process+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
	}

	// Full State Machine Call
	CMD_Parser_Log = (full_state_machine[current_state]).state_process(h_robot6900);
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <cmd_parser_process+0x74>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <cmd_parser_process+0x78>)
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <cmd_parser_process+0x7c>)
 8000dba:	701a      	strb	r2, [r3, #0]

	// Process Parser Logs
	if(CMDs_buffer_full == 1)
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <cmd_parser_process+0x80>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10d      	bne.n	8000de0 <cmd_parser_process+0x5c>
	{
		// As we process one command in the pipeline, it's no more full. Reactivate NVIC
		HAL_UART_Receive_IT(_huart5, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <cmd_parser_process+0x84>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2205      	movs	r2, #5
 8000dca:	4910      	ldr	r1, [pc, #64]	; (8000e0c <cmd_parser_process+0x88>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fe69 	bl	8008aa4 <HAL_UART_Receive_IT>

		// Notify Pipeline is full
		CMD_Parser_Log |= PARSER_PIPELINE_FULL;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <cmd_parser_process+0x7c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <cmd_parser_process+0x7c>)
 8000dde:	701a      	strb	r2, [r3, #0]
	}

	// Update Debug LED state regarding Parser state flags
	generate_parser_flag(h_robot6900);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f96d 	bl	80010c0 <generate_parser_flag>

	return CMD_Parser_Log;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <cmd_parser_process+0x7c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000055 	.word	0x20000055
 8000df8:	20000057 	.word	0x20000057
 8000dfc:	08009d20 	.word	0x08009d20
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000056 	.word	0x20000056
 8000e08:	200002f0 	.word	0x200002f0
 8000e0c:	20000050 	.word	0x20000050

08000e10 <get_command>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR get_command(ROBOT6900_HANDLER* h_robot6900)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
	uint8_t* raw_packet = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
	CMD_PACKET cmd;
	uint8_t cmd_defined = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75bb      	strb	r3, [r7, #22]

	// Get oldest command in the queue
	raw_packet = CMDs_buffer[0];
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <get_command+0x8c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	613b      	str	r3, [r7, #16]

	// Check raw packet validity and create a cmd defined struct
	parser_log = command_integrity(raw_packet, &cmd);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	6938      	ldr	r0, [r7, #16]
 8000e32:	f000 f837 	bl	8000ea4 <command_integrity>
 8000e36:	4603      	mov	r3, r0
 8000e38:	75fb      	strb	r3, [r7, #23]

	// Search for command in the dispatch table
	if(parser_log == PARSER_OK)
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d120      	bne.n	8000e82 <get_command+0x72>
	{
		// Looking if the command is defined
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	757b      	strb	r3, [r7, #21]
 8000e44:	e015      	b.n	8000e72 <get_command+0x62>
		{
			if(cmd.name == dispatch_table[i].name)
 8000e46:	7b7a      	ldrb	r2, [r7, #13]
 8000e48:	7d7b      	ldrb	r3, [r7, #21]
 8000e4a:	4915      	ldr	r1, [pc, #84]	; (8000ea0 <get_command+0x90>)
 8000e4c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d10b      	bne.n	8000e6c <get_command+0x5c>
			{
				cmd_defined = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	75bb      	strb	r3, [r7, #22]
				// Process command function
				dispatch_table[i].process(&cmd, h_robot6900);
 8000e58:	7d7b      	ldrb	r3, [r7, #21]
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <get_command+0x90>)
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	4413      	add	r3, r2
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f107 020c 	add.w	r2, r7, #12
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4798      	blx	r3
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000e6c:	7d7b      	ldrb	r3, [r7, #21]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	757b      	strb	r3, [r7, #21]
 8000e72:	7d7b      	ldrb	r3, [r7, #21]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d9e6      	bls.n	8000e46 <get_command+0x36>
			}
		}

		// Check if command was found
		if(!cmd_defined)
 8000e78:	7dbb      	ldrb	r3, [r7, #22]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <get_command+0x72>
		{
			parser_log = PARSER_NO_CMD;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	75fb      	strb	r3, [r7, #23]
		}
	}

	// Remove command from the buffer and shift next one
	parser_log |= update_pipeline();
 8000e82:	f000 f849 	bl	8000f18 <update_pipeline>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	75fb      	strb	r3, [r7, #23]


	return parser_log;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000318 	.word	0x20000318
 8000ea0:	08009ce0 	.word	0x08009ce0

08000ea4 <command_integrity>:
 * Check command packet integrity (ID and CRC-8)
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR command_integrity(uint8_t* _raw_packet, CMD_PACKET* _cmd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_buffer[2];

	// Avoid SoF byte
	_raw_packet+=1;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]

	// Parse 32bits raw_data to the packet_structure.
	*(_cmd) = *(CMD_PACKET*)(_raw_packet);
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6013      	str	r3, [r2, #0]
//	}
	// Check CRC-8
	//else
	//{
		/* If ID right, update ID flag for next packet */
		if(_cmd->ID == 0xFF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d103      	bne.n	8000ed0 <command_integrity+0x2c>
		{
			rx_last_ID = 0;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <command_integrity+0x6c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e003      	b.n	8000ed8 <command_integrity+0x34>
		}
		else
		{
			rx_last_ID = _cmd->ID;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <command_integrity+0x6c>)
 8000ed6:	701a      	strb	r2, [r3, #0]
		}

		// Calculate 8bits CRC and check for validity
		crc_buffer[0] = _cmd->name;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	733b      	strb	r3, [r7, #12]
		crc_buffer[1] = _cmd->data;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	789b      	ldrb	r3, [r3, #2]
 8000ee2:	737b      	strb	r3, [r7, #13]
		if( (uint8_t)(HAL_CRC_Calculate(_hcrc, crc_buffer, 2)) != _cmd->crc)
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <command_integrity+0x70>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f107 010c 	add.w	r1, r7, #12
 8000eec:	2202      	movs	r2, #2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fbe8 	bl	80056c4 <HAL_CRC_Calculate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	78db      	ldrb	r3, [r3, #3]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d001      	beq.n	8000f04 <command_integrity+0x60>
		{
			parser_log = PARSER_WRONG_CRC;
 8000f00:	2310      	movs	r3, #16
 8000f02:	73fb      	strb	r3, [r7, #15]
		/*
		 * Nothing if CRC wrong
		 */
	//}

	return parser_log;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000058 	.word	0x20000058
 8000f14:	200002f4 	.word	0x200002f4

08000f18 <update_pipeline>:
 * index 0
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR update_pipeline()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	COMMANDS_PARSER_ERROR parser_log = PARSER_INIT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71fb      	strb	r3, [r7, #7]

	// Disable NVIC Interrupt before process on pipeline
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000f22:	2035      	movs	r0, #53	; 0x35
 8000f24:	f004 fb4f 	bl	80055c6 <HAL_NVIC_DisableIRQ>

	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71bb      	strb	r3, [r7, #6]
 8000f2c:	e00d      	b.n	8000f4a <update_pipeline+0x32>
	{

		*(CMDs_buffer + i) = *(CMDs_buffer + i + 1);
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3301      	adds	r3, #1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <update_pipeline+0x74>)
 8000f36:	441a      	add	r2, r3
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4913      	ldr	r1, [pc, #76]	; (8000f8c <update_pipeline+0x74>)
 8000f3e:	440b      	add	r3, r1
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	3301      	adds	r3, #1
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <update_pipeline+0x78>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3eb      	bcc.n	8000f2e <update_pipeline+0x16>
	}

	if(CMDs_buffer_size - 1 >= 0)
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <update_pipeline+0x78>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db07      	blt.n	8000f72 <update_pipeline+0x5a>
	{
		CMDs_buffer_size -= 1;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <update_pipeline+0x78>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <update_pipeline+0x78>)
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e004      	b.n	8000f7c <update_pipeline+0x64>
	}
	else
	{
		parser_log = PARSER_UNKNOWN;
 8000f72:	2302      	movs	r3, #2
 8000f74:	71fb      	strb	r3, [r7, #7]
		CMDs_buffer_size = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <update_pipeline+0x78>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	}

	// Enable NVIC Interrupt after critical process on pipeline
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f7c:	2035      	movs	r0, #53	; 0x35
 8000f7e:	f004 fb14 	bl	80055aa <HAL_NVIC_EnableIRQ>

	return parser_log;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000318 	.word	0x20000318
 8000f90:	20000055 	.word	0x20000055

08000f94 <wait>:
 *
 * Nothing to do.
 *
 */
COMMANDS_PARSER_ERROR wait(ROBOT6900_HANDLER* h_robot6900)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	return CMD_Parser_Log;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <wait+0x18>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000000 	.word	0x20000000

08000fb0 <parser_return>:
 * Check if firmware has to return data to the HOST, and transmit data on UART5
 *
 * Return global robot state, LIDar packet, ect...
 */
void parser_return(ROBOT6900_HANDLER* h_robot6900)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	uint8_t tx_pck_size = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

	/* Clear TX_BUFFER */
	//memset(Tx_buffer, 0, TX_BUFFER_SIZE);

	if(h_robot6900->RPlidar->RPlidar_update)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	7a5b      	ldrb	r3, [r3, #9]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <parser_return+0x1c>
	{
		parser_OUTPUT_RPlidar(h_robot6900);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f808 	bl	8000fdc <parser_OUTPUT_RPlidar>
//	{
//		HAL_UART_Transmit_IT(_huart, &Tx_buffer, tx_pck_size);
//	}

	/* Clear Robot Update Sate Flag */
	h_robot6900->robot_state->status_update = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	705a      	strb	r2, [r3, #1]

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <parser_OUTPUT_RPlidar>:

	return packet_size;
}

uint8_t parser_OUTPUT_RPlidar(ROBOT6900_HANDLER* h_robot6900)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	static uint16_t pck_size = 0;
	static uint8_t _state = 0;

	static uint16_t nbr_chunk = 0;
	static uint16_t current_chunk = 0;
	uint16_t chunk_size = 5 * 6;
 8000fe4:	231e      	movs	r3, #30
 8000fe6:	81fb      	strh	r3, [r7, #14]

	uint16_t tx_size = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81bb      	strh	r3, [r7, #12]

	// Send Pre-packet descriptor
	if(tx_busy == 0)
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d151      	bne.n	800109a <parser_OUTPUT_RPlidar+0xbe>
	{
		pck_size = h_robot6900->RPlidar->data_size;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <parser_OUTPUT_RPlidar+0xcc>)
 8001002:	801a      	strh	r2, [r3, #0]

		/* Init Start of Frame */
		Tx_buffer[0] = (CMD_START_OF_FRAME);
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 8001006:	22a0      	movs	r2, #160	; 0xa0
 8001008:	701a      	strb	r2, [r3, #0]

		Tx_buffer[1] = tx_last_ID;
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <parser_OUTPUT_RPlidar+0xd4>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 8001010:	705a      	strb	r2, [r3, #1]
		/* Init Type of Packet */
		Tx_buffer[2] = TX_TYPE_DESCRIPTOR_PCK;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 8001014:	2202      	movs	r2, #2
 8001016:	709a      	strb	r2, [r3, #2]

		Tx_buffer[3] = (uint8_t)(pck_size & 0x00FF);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <parser_OUTPUT_RPlidar+0xcc>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 8001020:	70da      	strb	r2, [r3, #3]
		Tx_buffer[4] = (uint8_t)((pck_size & 0xFF00) >> 8);
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <parser_OUTPUT_RPlidar+0xcc>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 800102e:	711a      	strb	r2, [r3, #4]

		//HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
		//HAL_UART_Transmit_IT(_huart5, Tx_buffer, 5);//, 0xFFFF);

		HAL_UART_Transmit_IT(_huart5, Tx_buffer, 5);//, 0xFFFF);
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <parser_OUTPUT_RPlidar+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2205      	movs	r2, #5
 8001036:	491d      	ldr	r1, [pc, #116]	; (80010ac <parser_OUTPUT_RPlidar+0xd0>)
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fcd7 	bl	80089ec <HAL_UART_Transmit_IT>
		tx_busy = 1;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
		while(tx_busy) {};
 8001044:	bf00      	nop
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1fa      	bne.n	8001046 <parser_OUTPUT_RPlidar+0x6a>

//			HAL_UART_Transmit_IT(_huart5, test_rn, 3);//, 0xFFFF);
		HAL_UART_Transmit_IT(_huart5, test_rn, 3);//, 0xFFFF);
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <parser_OUTPUT_RPlidar+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2203      	movs	r2, #3
 8001056:	4918      	ldr	r1, [pc, #96]	; (80010b8 <parser_OUTPUT_RPlidar+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 fcc7 	bl	80089ec <HAL_UART_Transmit_IT>
		tx_busy = 1;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		while(tx_busy) {};
 8001064:	bf00      	nop
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1fa      	bne.n	8001066 <parser_OUTPUT_RPlidar+0x8a>

		tx_is_DAM = 1;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <parser_OUTPUT_RPlidar+0xe0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(_huart5, h_robot6900->RPlidar->data, pck_size);
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <parser_OUTPUT_RPlidar+0xd8>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f8d3 1003 	ldr.w	r1, [r3, #3]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <parser_OUTPUT_RPlidar+0xcc>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	f007 fd9a 	bl	8008bc0 <HAL_UART_Transmit_DMA>
		tx_busy = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <parser_OUTPUT_RPlidar+0xc8>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]

		h_robot6900->RPlidar->RPlidar_update = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2200      	movs	r2, #0
 8001098:	725a      	strb	r2, [r3, #9]
//
//	}

	//HAL_UART_Transmit_IT(_huart5, test_rn, 2);

}
 800109a:	bf00      	nop
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000005b 	.word	0x2000005b
 80010a8:	2000005c 	.word	0x2000005c
 80010ac:	200002f8 	.word	0x200002f8
 80010b0:	20000059 	.word	0x20000059
 80010b4:	200002f0 	.word	0x200002f0
 80010b8:	20000004 	.word	0x20000004
 80010bc:	2000005a 	.word	0x2000005a

080010c0 <generate_parser_flag>:

/*
 * Generate the Debug LEDs logics regarding global FSM state (COMMANDS_PARSER_ERROR)
 */
void generate_parser_flag(ROBOT6900_HANDLER* h_robot6900)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	static COMMANDS_PARSER_ERROR previous_log = PARSER_OK;

	// Do not change LEDs statues is parser's flags didn't change
	if(CMD_Parser_Log != previous_log)
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <generate_parser_flag+0xc8>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <generate_parser_flag+0xcc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d052      	beq.n	800117a <generate_parser_flag+0xba>
	{
		h_robot6900->robot_state->debug_leds = ((CMD_Parser_Log & PARSER_OK) == 1 ? 0x00 : DB_LED3);
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <generate_parser_flag+0xc8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_NO_CMD) == PARSER_NO_CMD ? DB_LED7 : 0x00);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <generate_parser_flag+0xc8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	105b      	asrs	r3, r3, #1
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25a      	sxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_WRONG_ID) == PARSER_WRONG_ID || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED8 : 0x00);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <generate_parser_flag+0xc8>)
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	f002 0208 	and.w	r2, r2, #8
 800111e:	2a00      	cmp	r2, #0
 8001120:	d105      	bne.n	800112e <generate_parser_flag+0x6e>
 8001122:	4a19      	ldr	r2, [pc, #100]	; (8001188 <generate_parser_flag+0xc8>)
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	f002 0210 	and.w	r2, r2, #16
 800112a:	2a00      	cmp	r2, #0
 800112c:	d001      	beq.n	8001132 <generate_parser_flag+0x72>
 800112e:	2220      	movs	r2, #32
 8001130:	e000      	b.n	8001134 <generate_parser_flag+0x74>
 8001132:	2200      	movs	r2, #0
 8001134:	4313      	orrs	r3, r2
 8001136:	b25a      	sxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_PIPELINE_FULL) == PARSER_PIPELINE_FULL || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED9 : 0x00);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <generate_parser_flag+0xc8>)
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	f002 0204 	and.w	r2, r2, #4
 8001150:	2a00      	cmp	r2, #0
 8001152:	d105      	bne.n	8001160 <generate_parser_flag+0xa0>
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <generate_parser_flag+0xc8>)
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	f002 0210 	and.w	r2, r2, #16
 800115c:	2a00      	cmp	r2, #0
 800115e:	d001      	beq.n	8001164 <generate_parser_flag+0xa4>
 8001160:	2240      	movs	r2, #64	; 0x40
 8001162:	e000      	b.n	8001166 <generate_parser_flag+0xa6>
 8001164:	2200      	movs	r2, #0
 8001166:	4313      	orrs	r3, r2
 8001168:	b25a      	sxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	701a      	strb	r2, [r3, #0]

		// Update last parser's flag values
		previous_log = CMD_Parser_Log;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <generate_parser_flag+0xc8>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <generate_parser_flag+0xcc>)
 8001178:	701a      	strb	r2, [r3, #0]
	}

}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000000 	.word	0x20000000
 800118c:	20000007 	.word	0x20000007

08001190 <NVIC_RPlidar_INT>:
 *
 * NVIC routine is either reloaded in Simple INT mode or DMA mode, regarding
 * the DMA_Rx flag
 */
void NVIC_RPlidar_INT(UART_HandleTypeDef *huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	/* Switch DMA buffer */
	current_DMA_buffer = (current_DMA_buffer + 1) % RX_NBR_BUFFER;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <NVIC_RPlidar_INT+0x7c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <NVIC_RPlidar_INT+0x80>)
 80011a0:	fb83 3102 	smull	r3, r1, r3, r2
 80011a4:	17d3      	asrs	r3, r2, #31
 80011a6:	1ac9      	subs	r1, r1, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	440b      	add	r3, r1
 80011ae:	1ad1      	subs	r1, r2, r3
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <NVIC_RPlidar_INT+0x7c>)
 80011b4:	701a      	strb	r2, [r3, #0]

	/* Set buffer ready to be process */
	buffer_ready = 1;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <NVIC_RPlidar_INT+0x84>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]


	if(DMA_Rx)
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <NVIC_RPlidar_INT+0x88>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00f      	beq.n	80011e4 <NVIC_RPlidar_INT+0x54>
	{
		/* Reload DMA process with new buffer */
		HAL_UART_Receive_DMA(_huart, RP_Rx_buffer[current_DMA_buffer], DMA_next_packet_size);
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <NVIC_RPlidar_INT+0x8c>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <NVIC_RPlidar_INT+0x7c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	2354      	movs	r3, #84	; 0x54
 80011d0:	fb03 f302 	mul.w	r3, r3, r2
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <NVIC_RPlidar_INT+0x90>)
 80011d6:	1899      	adds	r1, r3, r2
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <NVIC_RPlidar_INT+0x94>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	f007 fd6b 	bl	8008cb8 <HAL_UART_Receive_DMA>
	else
	{
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
	}

}
 80011e2:	e00f      	b.n	8001204 <NVIC_RPlidar_INT+0x74>
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <NVIC_RPlidar_INT+0x8c>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <NVIC_RPlidar_INT+0x7c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2354      	movs	r3, #84	; 0x54
 80011f0:	fb03 f302 	mul.w	r3, r3, r2
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <NVIC_RPlidar_INT+0x90>)
 80011f6:	1899      	adds	r1, r3, r2
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <NVIC_RPlidar_INT+0x98>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	f007 fc50 	bl	8008aa4 <HAL_UART_Receive_IT>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000005f 	.word	0x2000005f
 8001210:	55555556 	.word	0x55555556
 8001214:	20000060 	.word	0x20000060
 8001218:	20000061 	.word	0x20000061
 800121c:	20000330 	.word	0x20000330
 8001220:	20000334 	.word	0x20000334
 8001224:	20000064 	.word	0x20000064
 8001228:	20000062 	.word	0x20000062

0800122c <NVIC_Timout_1ms_INT>:
 * RP_lidar Timer interrupt for Timeout communication
 * and motor RPM calculation if enabled.
 *
 */
void NVIC_Timout_1ms_INT(TIM_HandleTypeDef* htim)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if(RPLidar_1ms_TIM_enable)
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <NVIC_Timout_1ms_INT+0x50>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d019      	beq.n	8001270 <NVIC_Timout_1ms_INT+0x44>
	{
		if(RPM_init == 1)
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <NVIC_Timout_1ms_INT+0x54>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10e      	bne.n	8001262 <NVIC_Timout_1ms_INT+0x36>
		{
			RPM_cnt_1ms += 1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <NVIC_Timout_1ms_INT+0x58>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <NVIC_Timout_1ms_INT+0x58>)
 8001250:	801a      	strh	r2, [r3, #0]
			RPlidar_OUTPUT_cnt += 1;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <NVIC_Timout_1ms_INT+0x5c>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <NVIC_Timout_1ms_INT+0x5c>)
 800125e:	801a      	strh	r2, [r3, #0]
		else
		{
			RPlidar_timeout += 1;
		}
	}
}
 8001260:	e006      	b.n	8001270 <NVIC_Timout_1ms_INT+0x44>
			RPlidar_timeout += 1;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <NVIC_Timout_1ms_INT+0x60>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <NVIC_Timout_1ms_INT+0x60>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000069 	.word	0x20000069
 8001280:	2000006b 	.word	0x2000006b
 8001284:	2000006c 	.word	0x2000006c
 8001288:	20000074 	.word	0x20000074
 800128c:	20000068 	.word	0x20000068

08001290 <RPlidar_init>:
 *
 * Set RP_lidar FSM to initiate state.
 *
 */
void RPlidar_init(ROBOT6900_HANDLER* h_robot6900, UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim7)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	// Initiate ptr
	_huart = huart;
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <RPlidar_init+0x50>)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	6013      	str	r3, [r2, #0]
	_htim7 = htim7;
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <RPlidar_init+0x54>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6013      	str	r3, [r2, #0]

	h_robot6900->RPlidar->data = (uint8_t*)(&RPlidar_data[RPlidar_data_current]);
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <RPlidar_init+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f44f 6264 	mov.w	r2, #3648	; 0xe40
 80012b6:	fb02 f201 	mul.w	r2, r2, r1
 80012ba:	490c      	ldr	r1, [pc, #48]	; (80012ec <RPlidar_init+0x5c>)
 80012bc:	440a      	add	r2, r1
 80012be:	f8c3 2003 	str.w	r2, [r3, #3]

	// Disable Lidar motor
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f004 fefe 	bl	80060cc <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_INIT;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <RPlidar_init+0x60>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000330 	.word	0x20000330
 80012e4:	20000430 	.word	0x20000430
 80012e8:	2000005e 	.word	0x2000005e
 80012ec:	20000434 	.word	0x20000434
 80012f0:	20000066 	.word	0x20000066

080012f4 <RPlidar_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
RPLIDAR_ERROR RPlidar_process(ROBOT6900_HANDLER* h_robot6900)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	// Full State Machine Call
	RPlidar_Log = (RPlidar_FSM[RPlidar_current_state]).state_process(h_robot6900);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <RPlidar_process+0x48>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <RPlidar_process+0x4c>)
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <RPlidar_process+0x50>)
 8001312:	701a      	strb	r2, [r3, #0]

	if(RPlidar_OUTPUT_cnt >= RPLIDAR_OUTPUT_2000ms)
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <RPlidar_process+0x54>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800131e:	d306      	bcc.n	800132e <RPlidar_process+0x3a>
	{
		h_robot6900->RPlidar->RPlidar_update = 1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2201      	movs	r2, #1
 8001326:	725a      	strb	r2, [r3, #9]
		RPlidar_OUTPUT_cnt = 0;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <RPlidar_process+0x54>)
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
	}

	return RPlidar_Log;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <RPlidar_process+0x50>)
 8001330:	781b      	ldrb	r3, [r3, #0]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000066 	.word	0x20000066
 8001340:	08009d30 	.word	0x08009d30
 8001344:	20000067 	.word	0x20000067
 8001348:	20000074 	.word	0x20000074

0800134c <init_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR init_state(ROBOT6900_HANDLER* h_robot6900)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

	// Clear buffers
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e00d      	b.n	8001376 <init_state+0x2a>
	{
		memset(RP_Rx_buffer[i], 0, RX_BUFFER_SIZE);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2254      	movs	r2, #84	; 0x54
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <init_state+0x68>)
 8001364:	4413      	add	r3, r2
 8001366:	2254      	movs	r2, #84	; 0x54
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fca4 	bl	8009cb8 <memset>
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	3301      	adds	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d9ee      	bls.n	800135a <init_state+0xe>
	}

	buffer_ready = 0;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <init_state+0x6c>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	current_DMA_buffer = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <init_state+0x70>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	RPlidar_timeout = 0;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <init_state+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	RPlidar_hard_failure_cnt = 0;
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <init_state+0x78>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]

	// Enable Motor spinning
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f004 fe95 	bl	80060cc <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_GET_HEALTH;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <init_state+0x7c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]

	return RPlidar_Log;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <init_state+0x80>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000334 	.word	0x20000334
 80013b8:	20000060 	.word	0x20000060
 80013bc:	2000005f 	.word	0x2000005f
 80013c0:	20000068 	.word	0x20000068
 80013c4:	2000006a 	.word	0x2000006a
 80013c8:	20000066 	.word	0x20000066
 80013cc:	20000067 	.word	0x20000067

080013d0 <health_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR health_state(ROBOT6900_HANDLER* h_robot6900)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	static uint8_t health_process_step = 0;
	static uint8_t descriptor_received = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 80013d8:	2301      	movs	r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]

	// health packet
	uint8_t health_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]

	// RPlidar status and error carried by the HEALTH descriptor
	uint8_t status = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	737b      	strb	r3, [r7, #13]
	uint16_t error_code = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	817b      	strh	r3, [r7, #10]

	/* First step of the state, just build the packet and send it */
	if(health_process_step == 0)
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <health_state+0x1d4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d128      	bne.n	8001442 <health_state+0x72>
	{
		// Build Health packet
		health_pck[0] = REQUEST_SoF;
 80013f0:	23a5      	movs	r3, #165	; 0xa5
 80013f2:	723b      	strb	r3, [r7, #8]
		health_pck[1] = RP_GET_HEALTH_CMD;
 80013f4:	2352      	movs	r3, #82	; 0x52
 80013f6:	727b      	strb	r3, [r7, #9]



		// Send GET_HEALTH pck
		while(uart_log != HAL_OK)
 80013f8:	e00a      	b.n	8001410 <health_state+0x40>
		{
			uart_log = HAL_UART_Transmit(_huart, health_pck, HEALTH_PCK_SIZE, 0xFFFF);
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <health_state+0x1d8>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f107 0108 	add.w	r1, r7, #8
 8001402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001406:	2202      	movs	r2, #2
 8001408:	f007 fa5c 	bl	80088c4 <HAL_UART_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f1      	bne.n	80013fa <health_state+0x2a>
		}

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 8001416:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <health_state+0x1d8>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	4b64      	ldr	r3, [pc, #400]	; (80015ac <health_state+0x1dc>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	2354      	movs	r3, #84	; 0x54
 8001422:	fb03 f302 	mul.w	r3, r3, r2
 8001426:	4a62      	ldr	r2, [pc, #392]	; (80015b0 <health_state+0x1e0>)
 8001428:	4413      	add	r3, r2
 800142a:	2207      	movs	r2, #7
 800142c:	4619      	mov	r1, r3
 800142e:	f007 fb39 	bl	8008aa4 <HAL_UART_Receive_IT>

		// Prepare NEXT NVIC interurpt for response packet this time
		NVIC_Rx_next_size = HEALTH_RESPONSE_SIZE;
 8001432:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <health_state+0x1e4>)
 8001434:	2203      	movs	r2, #3
 8001436:	701a      	strb	r2, [r3, #0]

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 8001438:	f000 fd58 	bl	8001eec <RPlidar_start_timeout>

		health_process_step = 1;
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <health_state+0x1d4>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
	}

	/* Second step of the state, wait for lidar response and check for Timeout or Protection flag */
	if(health_process_step == 1)
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <health_state+0x1d4>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	f040 80a0 	bne.w	800158c <health_state+0x1bc>
	{
		// Read Descriptor response and Packet Response
		if(buffer_ready == 1)
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <health_state+0x1e8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	f040 808d 	bne.w	8001572 <health_state+0x1a2>
		{
			// Read Packet Descriptor
			if(descriptor_received == 0)
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <health_state+0x1ec>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <health_state+0xa4>
			{
				// Read, check and save descriptor pck
				descriptor_received = RPlidar_get_descriptor_pck();
 8001460:	f000 fdba 	bl	8001fd8 <RPlidar_get_descriptor_pck>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b54      	ldr	r3, [pc, #336]	; (80015bc <health_state+0x1ec>)
 800146a:	701a      	strb	r2, [r3, #0]
				// Prepare NEXT NVIC interurpt for response packet this time
				NVIC_Rx_next_size = RESPONSE_DESCRIPTOR_SIZE;
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <health_state+0x1e4>)
 800146e:	2207      	movs	r2, #7
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e08b      	b.n	800158c <health_state+0x1bc>
			}
			else
			{
				// Read 4th byte of the Health response descriptor, containing status description
				status = AVAILABLE_RX_BUFFER(0);
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <health_state+0x1dc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	1c99      	adds	r1, r3, #2
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <health_state+0x1f0>)
 800147c:	fb83 3201 	smull	r3, r2, r3, r1
 8001480:	17cb      	asrs	r3, r1, #31
 8001482:	1ad2      	subs	r2, r2, r3
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	1aca      	subs	r2, r1, r3
 800148c:	4948      	ldr	r1, [pc, #288]	; (80015b0 <health_state+0x1e0>)
 800148e:	2354      	movs	r3, #84	; 0x54
 8001490:	fb03 f302 	mul.w	r3, r3, r2
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	737b      	strb	r3, [r7, #13]
				// Get error_code in case
				error_code = ((uint16_t)(AVAILABLE_RX_BUFFER(1)) << 8) + AVAILABLE_RX_BUFFER(2);
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <health_state+0x1dc>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	1c99      	adds	r1, r3, #2
 80014a0:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <health_state+0x1f0>)
 80014a2:	fb83 3201 	smull	r3, r2, r3, r1
 80014a6:	17cb      	asrs	r3, r1, #31
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	1aca      	subs	r2, r1, r3
 80014b2:	493f      	ldr	r1, [pc, #252]	; (80015b0 <health_state+0x1e0>)
 80014b4:	2354      	movs	r3, #84	; 0x54
 80014b6:	fb03 f302 	mul.w	r3, r3, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	3301      	adds	r3, #1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b298      	uxth	r0, r3
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <health_state+0x1dc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	1c99      	adds	r1, r3, #2
 80014cc:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <health_state+0x1f0>)
 80014ce:	fb83 3201 	smull	r3, r2, r3, r1
 80014d2:	17cb      	asrs	r3, r1, #31
 80014d4:	1ad2      	subs	r2, r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	1aca      	subs	r2, r1, r3
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <health_state+0x1e0>)
 80014e0:	2354      	movs	r3, #84	; 0x54
 80014e2:	fb03 f302 	mul.w	r3, r3, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	3302      	adds	r3, #2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4403      	add	r3, r0
 80014f0:	817b      	strh	r3, [r7, #10]

				buffer_ready = 0;
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <health_state+0x1e8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]

				// Check Protection error
				if(status == HEALTH_PROTECTION_ERR)
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d126      	bne.n	800154c <health_state+0x17c>
				{
					RPlidar_hard_failure_cnt++;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <health_state+0x1f4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <health_state+0x1f4>)
 8001508:	701a      	strb	r2, [r3, #0]
					if(RPlidar_hard_failure_cnt < HEALTH_HARD_FAILURE_LIMIT)
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <health_state+0x1f4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b09      	cmp	r3, #9
 8001510:	d809      	bhi.n	8001526 <health_state+0x156>
					{
						RPlidar_current_state = RP_RESET;	/* ------------> */
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <health_state+0x1f8>)
 8001514:	2204      	movs	r2, #4
 8001516:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <health_state+0x1d4>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <health_state+0x1ec>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e008      	b.n	8001538 <health_state+0x168>
					}
					else
					{
						RPlidar_current_state = RP_HARD_ERR;	/* ------------> */
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <health_state+0x1f8>)
 8001528:	2203      	movs	r2, #3
 800152a:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <health_state+0x1d4>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <health_state+0x1ec>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
					}

					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	7b7a      	ldrb	r2, [r7, #13]
 800153e:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	897a      	ldrh	r2, [r7, #10]
 8001546:	f8a3 2001 	strh.w	r2, [r3, #1]
 800154a:	e01f      	b.n	800158c <health_state+0x1bc>
				}
				// Evrything's OK, then jump to next state
				else
				{
					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	7b7a      	ldrb	r2, [r7, #13]
 8001552:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	897a      	ldrh	r2, [r7, #10]
 800155a:	f8a3 2001 	strh.w	r2, [r3, #1]

					// Jump to next state
					RPlidar_current_state = RP_START_SCAN;	/* ------------> */
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <health_state+0x1f8>)
 8001560:	2205      	movs	r2, #5
 8001562:	701a      	strb	r2, [r3, #0]
					health_process_step = 0;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <health_state+0x1d4>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
					descriptor_received = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <health_state+0x1ec>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e00c      	b.n	800158c <health_state+0x1bc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 20)
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <health_state+0x1fc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b13      	cmp	r3, #19
 800157a:	d907      	bls.n	800158c <health_state+0x1bc>
			{
				RPlidar_timeout = 0;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <health_state+0x1fc>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 8001582:	f000 fcbf 	bl	8001f04 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <health_state+0x1f8>)
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// If we jump to another step, reinitialize the inside step value to 0
	if(RPlidar_current_state != RP_GET_HEALTH)
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <health_state+0x1f8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d002      	beq.n	800159a <health_state+0x1ca>
	{
		health_process_step = 0;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <health_state+0x1d4>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	}

	return log;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000007f 	.word	0x2000007f
 80015a8:	20000330 	.word	0x20000330
 80015ac:	2000005f 	.word	0x2000005f
 80015b0:	20000334 	.word	0x20000334
 80015b4:	20000062 	.word	0x20000062
 80015b8:	20000060 	.word	0x20000060
 80015bc:	20000080 	.word	0x20000080
 80015c0:	55555556 	.word	0x55555556
 80015c4:	2000006a 	.word	0x2000006a
 80015c8:	20000066 	.word	0x20000066
 80015cc:	20000068 	.word	0x20000068

080015d0 <reset_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR reset_state(ROBOT6900_HANDLER* h_robot6900)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;
	static uint8_t wait_cnt = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 80015d8:	2301      	movs	r3, #1
 80015da:	73bb      	strb	r3, [r7, #14]

	uint8_t reset_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]

	if(reset_process_step == 0)
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <reset_state+0x8c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d118      	bne.n	800161a <reset_state+0x4a>
	{
		// Build Reset packet
		reset_pck[0] = REQUEST_SoF;
 80015e8:	23a5      	movs	r3, #165	; 0xa5
 80015ea:	733b      	strb	r3, [r7, #12]
		reset_pck[1] = RP_RESET_CMD;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	737b      	strb	r3, [r7, #13]

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80015f0:	e00a      	b.n	8001608 <reset_state+0x38>
		{
			uart_log = HAL_UART_Transmit(_huart, reset_pck, RESET_PCK_SIZE, 0xFFFF);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <reset_state+0x90>)
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fe:	2202      	movs	r2, #2
 8001600:	f007 f960 	bl	80088c4 <HAL_UART_Transmit>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f1      	bne.n	80015f2 <reset_state+0x22>
		}

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 800160e:	f000 fc6d 	bl	8001eec <RPlidar_start_timeout>

		reset_process_step = 1;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <reset_state+0x8c>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e01a      	b.n	8001650 <reset_state+0x80>
	}
	else
	{
		// Wait for the 2ms WAIT before the lidar wakes up
		if(RPlidar_timeout)
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <reset_state+0x94>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <reset_state+0x80>
		{
			wait_cnt++;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <reset_state+0x98>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <reset_state+0x98>)
 800162e:	701a      	strb	r2, [r3, #0]
			RPlidar_timeout = 0;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <reset_state+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
			if(wait_cnt >= 20)	// TIMER_INT each 1ms, so wait_cnt > 2 to get 2ms
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <reset_state+0x98>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b13      	cmp	r3, #19
 800163c:	d908      	bls.n	8001650 <reset_state+0x80>
			{
				RPlidar_current_state = RP_GET_HEALTH;	/* ------------> */
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <reset_state+0x9c>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <reset_state+0x8c>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
				wait_cnt = 0;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <reset_state+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return log;
 8001650:	7bbb      	ldrb	r3, [r7, #14]

}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000081 	.word	0x20000081
 8001660:	20000330 	.word	0x20000330
 8001664:	20000068 	.word	0x20000068
 8001668:	20000082 	.word	0x20000082
 800166c:	20000066 	.word	0x20000066

08001670 <start_scan_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR start_scan_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001678:	2301      	movs	r3, #1
 800167a:	75bb      	strb	r3, [r7, #22]

	uint8_t scan_pck[START_SCAN_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	75fb      	strb	r3, [r7, #23]

	/* PCK INITIALISATION AND TX */
	if(reset_process_step == 0)
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <start_scan_state+0xe8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d140      	bne.n	800170a <start_scan_state+0x9a>
	{
		// Build EXPRESS Scan packet
		scan_pck[0] = REQUEST_SoF;
 8001688:	23a5      	movs	r3, #165	; 0xa5
 800168a:	733b      	strb	r3, [r7, #12]
		scan_pck[1] = RP_EXPRESS_SCAN_CMD;
 800168c:	2382      	movs	r3, #130	; 0x82
 800168e:	737b      	strb	r3, [r7, #13]

		scan_pck[2] = 5; // Payload Size
 8001690:	2305      	movs	r3, #5
 8001692:	73bb      	strb	r3, [r7, #14]

		scan_pck[3] = 0; // Working Mode. Set to 0. See datasheet
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
		scan_pck[4] = 0;	// Reserved
 8001698:	2300      	movs	r3, #0
 800169a:	743b      	strb	r3, [r7, #16]
		scan_pck[5] = 0;	// Reserved
 800169c:	2300      	movs	r3, #0
 800169e:	747b      	strb	r3, [r7, #17]
		scan_pck[6] = 0;	// Reserved
 80016a0:	2300      	movs	r3, #0
 80016a2:	74bb      	strb	r3, [r7, #18]
		scan_pck[7] = 0;	// Reserved
 80016a4:	2300      	movs	r3, #0
 80016a6:	74fb      	strb	r3, [r7, #19]

		scan_pck[8] = RPlidar_checksum(scan_pck, START_SCAN_PCK_SIZE - 1); // Checksum
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2108      	movs	r1, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fc72 	bl	8001f98 <RPlidar_checksum>
 80016b4:	4603      	mov	r3, r0
 80016b6:	753b      	strb	r3, [r7, #20]

		// Prepare Rx to switch to DMA mode for constant DATA acquisition
		DMA_Rx = 1;
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <start_scan_state+0xec>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
		DMA_next_packet_size = EXPRESS_SCAN_RESPONSE_SIZE;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <start_scan_state+0xf0>)
 80016c0:	2254      	movs	r2, #84	; 0x54
 80016c2:	801a      	strh	r2, [r3, #0]

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <start_scan_state+0xf4>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <start_scan_state+0xf8>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	2354      	movs	r3, #84	; 0x54
 80016d0:	fb03 f302 	mul.w	r3, r3, r2
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <start_scan_state+0xfc>)
 80016d6:	4413      	add	r3, r2
 80016d8:	2207      	movs	r2, #7
 80016da:	4619      	mov	r1, r3
 80016dc:	f007 f9e2 	bl	8008aa4 <HAL_UART_Receive_IT>

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80016e0:	e00a      	b.n	80016f8 <start_scan_state+0x88>
		{
			uart_log = HAL_UART_Transmit(_huart, scan_pck, START_SCAN_PCK_SIZE, 0xFFFF);
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <start_scan_state+0xf4>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f107 010c 	add.w	r1, r7, #12
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	2209      	movs	r2, #9
 80016f0:	f007 f8e8 	bl	80088c4 <HAL_UART_Transmit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	75fb      	strb	r3, [r7, #23]
		while(uart_log != HAL_OK)
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f1      	bne.n	80016e2 <start_scan_state+0x72>
		}


		// Start Timeout to test COM error
		RPlidar_start_timeout();
 80016fe:	f000 fbf5 	bl	8001eec <RPlidar_start_timeout>

		reset_process_step = 1;
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <start_scan_state+0xe8>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e020      	b.n	800174c <start_scan_state+0xdc>
	}
	/* RECEIVE DESCRIPTOR, CHECK VALIDITY AND TIMEOUT */
	else
	{
		// Check if communication with the lidar timed out
		if(buffer_ready == 1)
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <start_scan_state+0x100>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10b      	bne.n	800172c <start_scan_state+0xbc>
		{
			// Read, check and save descriptor pck. Return 1 if OK
			if(RPlidar_get_descriptor_pck() == 1)
 8001714:	f000 fc60 	bl	8001fd8 <RPlidar_get_descriptor_pck>
 8001718:	4603      	mov	r3, r0
 800171a:	2b01      	cmp	r3, #1
 800171c:	d116      	bne.n	800174c <start_scan_state+0xdc>
			{
				RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <start_scan_state+0x104>)
 8001720:	2206      	movs	r2, #6
 8001722:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <start_scan_state+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e00f      	b.n	800174c <start_scan_state+0xdc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 20)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <start_scan_state+0x108>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b13      	cmp	r3, #19
 8001734:	d90a      	bls.n	800174c <start_scan_state+0xdc>
			{
				RPlidar_timeout = 0;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <start_scan_state+0x108>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 800173c:	f000 fbe2 	bl	8001f04 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <start_scan_state+0x104>)
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <start_scan_state+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return log;
 800174c:	7dbb      	ldrb	r3, [r7, #22]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000083 	.word	0x20000083
 800175c:	20000061 	.word	0x20000061
 8001760:	20000064 	.word	0x20000064
 8001764:	20000330 	.word	0x20000330
 8001768:	2000005f 	.word	0x2000005f
 800176c:	20000334 	.word	0x20000334
 8001770:	20000060 	.word	0x20000060
 8001774:	20000066 	.word	0x20000066
 8001778:	20000068 	.word	0x20000068

0800177c <sampling_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR sampling_state(ROBOT6900_HANDLER* h_robot6900)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	static uint8_t init_process_buffer = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]

	uint8_t timeout_cnt = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	73bb      	strb	r3, [r7, #14]

	/* WAIT FOR EXPRESS SCAN RESPONSE PCK */
	if(buffer_ready == 1)
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <sampling_state+0x78>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d111      	bne.n	80017ba <sampling_state+0x3e>
	{
		// Wait for the 1st buffer to be filled
		if(init_process_buffer == 0)
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <sampling_state+0x7c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <sampling_state+0x30>
		{
			init_process_buffer = 1;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <sampling_state+0x7c>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
			buffer_ready = 0;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <sampling_state+0x78>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e01b      	b.n	80017e4 <sampling_state+0x68>
		}
		// Wait for the 2nd buffer to be filled
		else
		{
			buffer_ready = 0;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <sampling_state+0x78>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
			RPlidar_current_state = RP_PROCESS;	/* ------------> */
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <sampling_state+0x80>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e014      	b.n	80017e4 <sampling_state+0x68>

	}
	else
	{
		// Timeout Check (2ms)
		if(RPlidar_timeout)
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <sampling_state+0x84>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00f      	beq.n	80017e4 <sampling_state+0x68>
		{
			RPlidar_timeout = 0;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <sampling_state+0x84>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			if(timeout_cnt >= 200)
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	2bc7      	cmp	r3, #199	; 0xc7
 80017ce:	d906      	bls.n	80017de <sampling_state+0x62>
			{
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <sampling_state+0x80>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
				init_process_buffer = 0;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <sampling_state+0x7c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <sampling_state+0x68>
			}
			else
			{
				timeout_cnt++;
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	3301      	adds	r3, #1
 80017e2:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	return log;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000060 	.word	0x20000060
 80017f8:	20000084 	.word	0x20000084
 80017fc:	20000066 	.word	0x20000066
 8001800:	20000068 	.word	0x20000068

08001804 <processing_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR processing_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001808:	b089      	sub	sp, #36	; 0x24
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	static uint16_t nbr_scan = 0;
	static uint8_t process_cnt = 0;
	static uint16_t max_ptnumber = 0;
#endif

	uint8_t pck_checksum = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	773b      	strb	r3, [r7, #28]
	uint8_t real_checksum = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	76fb      	strb	r3, [r7, #27]

	uint8_t S_parameter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	76bb      	strb	r3, [r7, #26]

	float start_angle = 0;
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
	float next_start_angle = 0;
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	613b      	str	r3, [r7, #16]

	uint16_t pt_index = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	83fb      	strh	r3, [r7, #30]

	RPLIDAR_ERROR log = RPLIDAR_OK;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]

	/* TODO CHECKSUM TEST */
	real_checksum = RPlidar_checksum(&AVAILABLE_RX_BUFFER(2), EXPRESS_SCAN_RESPONSE_SIZE-2);
 800182e:	4bb2      	ldr	r3, [pc, #712]	; (8001af8 <processing_state+0x2f4>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	1c99      	adds	r1, r3, #2
 8001834:	4bb1      	ldr	r3, [pc, #708]	; (8001afc <processing_state+0x2f8>)
 8001836:	fb83 3201 	smull	r3, r2, r3, r1
 800183a:	17cb      	asrs	r3, r1, #31
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	1aca      	subs	r2, r1, r3
 8001846:	2354      	movs	r3, #84	; 0x54
 8001848:	fb03 f302 	mul.w	r3, r3, r2
 800184c:	3302      	adds	r3, #2
 800184e:	4aac      	ldr	r2, [pc, #688]	; (8001b00 <processing_state+0x2fc>)
 8001850:	4413      	add	r3, r2
 8001852:	2152      	movs	r1, #82	; 0x52
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fb9f 	bl	8001f98 <RPlidar_checksum>
 800185a:	4603      	mov	r3, r0
 800185c:	76fb      	strb	r3, [r7, #27]
	pck_checksum = ( (AVAILABLE_RX_BUFFER(0) & 0x0F) + ((AVAILABLE_RX_BUFFER(1) & 0x0F) << 4) );
 800185e:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <processing_state+0x2f4>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	1c99      	adds	r1, r3, #2
 8001864:	4ba5      	ldr	r3, [pc, #660]	; (8001afc <processing_state+0x2f8>)
 8001866:	fb83 3201 	smull	r3, r2, r3, r1
 800186a:	17cb      	asrs	r3, r1, #31
 800186c:	1ad2      	subs	r2, r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	1aca      	subs	r2, r1, r3
 8001876:	49a2      	ldr	r1, [pc, #648]	; (8001b00 <processing_state+0x2fc>)
 8001878:	2354      	movs	r3, #84	; 0x54
 800187a:	fb03 f302 	mul.w	r3, r3, r2
 800187e:	440b      	add	r3, r1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	b2d8      	uxtb	r0, r3
 8001888:	4b9b      	ldr	r3, [pc, #620]	; (8001af8 <processing_state+0x2f4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	1c99      	adds	r1, r3, #2
 800188e:	4b9b      	ldr	r3, [pc, #620]	; (8001afc <processing_state+0x2f8>)
 8001890:	fb83 3201 	smull	r3, r2, r3, r1
 8001894:	17cb      	asrs	r3, r1, #31
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	1aca      	subs	r2, r1, r3
 80018a0:	4997      	ldr	r1, [pc, #604]	; (8001b00 <processing_state+0x2fc>)
 80018a2:	2354      	movs	r3, #84	; 0x54
 80018a4:	fb03 f302 	mul.w	r3, r3, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	3301      	adds	r3, #1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4403      	add	r3, r0
 80018b4:	773b      	strb	r3, [r7, #28]

	if(real_checksum != pck_checksum)
 80018b6:	7efa      	ldrb	r2, [r7, #27]
 80018b8:	7f3b      	ldrb	r3, [r7, #28]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d002      	beq.n	80018c4 <processing_state+0xc0>
	{
		RPlidar_current_state = RP_COM_ERR;
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <processing_state+0x300>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
	}

	/* Get the and REBUILD the Angle of the current Pi packet */
	start_angle = (OLD_RX_BUFFER(2) +
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <processing_state+0x2f4>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	1c59      	adds	r1, r3, #1
 80018ca:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <processing_state+0x2f8>)
 80018cc:	fb83 3201 	smull	r3, r2, r3, r1
 80018d0:	17cb      	asrs	r3, r1, #31
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	1aca      	subs	r2, r1, r3
 80018dc:	4988      	ldr	r1, [pc, #544]	; (8001b00 <processing_state+0x2fc>)
 80018de:	2354      	movs	r3, #84	; 0x54
 80018e0:	fb03 f302 	mul.w	r3, r3, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	3302      	adds	r3, #2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
			( (uint16_t)( (OLD_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 80018ec:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <processing_state+0x2f4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	1c59      	adds	r1, r3, #1
 80018f2:	4b82      	ldr	r3, [pc, #520]	; (8001afc <processing_state+0x2f8>)
 80018f4:	fb83 3201 	smull	r3, r2, r3, r1
 80018f8:	17cb      	asrs	r3, r1, #31
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	1aca      	subs	r2, r1, r3
 8001904:	497e      	ldr	r1, [pc, #504]	; (8001b00 <processing_state+0x2fc>)
 8001906:	2354      	movs	r3, #84	; 0x54
 8001908:	fb03 f302 	mul.w	r3, r3, r2
 800190c:	440b      	add	r3, r1
 800190e:	3303      	adds	r3, #3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	start_angle = (OLD_RX_BUFFER(2) +
 8001918:	4403      	add	r3, r0
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	edc7 7a05 	vstr	s15, [r7, #20]
	start_angle = start_angle / 64.0;
 8001926:	ed97 7a05 	vldr	s14, [r7, #20]
 800192a:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001b08 <processing_state+0x304>
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001932:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Get the and REBUILD the Angle of the next Pi+1 packet */
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <processing_state+0x2f4>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	1c99      	adds	r1, r3, #2
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <processing_state+0x2f8>)
 800193e:	fb83 3201 	smull	r3, r2, r3, r1
 8001942:	17cb      	asrs	r3, r1, #31
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	1aca      	subs	r2, r1, r3
 800194e:	496c      	ldr	r1, [pc, #432]	; (8001b00 <processing_state+0x2fc>)
 8001950:	2354      	movs	r3, #84	; 0x54
 8001952:	fb03 f302 	mul.w	r3, r3, r2
 8001956:	440b      	add	r3, r1
 8001958:	3302      	adds	r3, #2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
			( (uint16_t)( (AVAILABLE_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 800195e:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <processing_state+0x2f4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	1c99      	adds	r1, r3, #2
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <processing_state+0x2f8>)
 8001966:	fb83 3201 	smull	r3, r2, r3, r1
 800196a:	17cb      	asrs	r3, r1, #31
 800196c:	1ad2      	subs	r2, r2, r3
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	1aca      	subs	r2, r1, r3
 8001976:	4962      	ldr	r1, [pc, #392]	; (8001b00 <processing_state+0x2fc>)
 8001978:	2354      	movs	r3, #84	; 0x54
 800197a:	fb03 f302 	mul.w	r3, r3, r2
 800197e:	440b      	add	r3, r1
 8001980:	3303      	adds	r3, #3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 800198a:	4403      	add	r3, r0
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	edc7 7a04 	vstr	s15, [r7, #16]
	next_start_angle = next_start_angle / 64.0;
 8001998:	ed97 7a04 	vldr	s14, [r7, #16]
 800199c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001b08 <processing_state+0x304>
 80019a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a4:	edc7 7a04 	vstr	s15, [r7, #16]


	/* Calculate the S parameter, in order to detect a new 360 Scan */
	S_parameter = (start_angle > next_start_angle ? 1 : 0);
 80019a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	bfcc      	ite	gt
 80019ba:	2301      	movgt	r3, #1
 80019bc:	2300      	movle	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	76bb      	strb	r3, [r7, #26]

#ifdef RPLIDAR_DEBUG
	process_cnt++;
#endif
	// If new scan detected, refresh data by starting at RPlidar_data[0]
	if(S_parameter == 1)
 80019c2:	7ebb      	ldrb	r3, [r7, #26]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11f      	bne.n	8001a08 <processing_state+0x204>
	{
		RPlidar_RPM = RPlidar_measure_RPM();
 80019c8:	f000 faaa 	bl	8001f20 <RPlidar_measure_RPM>
 80019cc:	eef0 7a40 	vmov.f32	s15, s0
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <processing_state+0x308>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
		// Times 2 since h_robot6900->RPlidar->data is a 16bits ptr instead of 32bits ptr
		h_robot6900->RPlidar->data_size = 6 * current_data_index;
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <processing_state+0x30c>)
 80019d8:	881a      	ldrh	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4611      	mov	r1, r2
 80019e0:	0049      	lsls	r1, r1, #1
 80019e2:	440a      	add	r2, r1
 80019e4:	0052      	lsls	r2, r2, #1
 80019e6:	b292      	uxth	r2, r2
 80019e8:	f8a3 2007 	strh.w	r2, [r3, #7]
		RPlidar_data_current = (RPlidar_data_current+ 1) % 2;
 80019ec:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <processing_state+0x310>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	bfb8      	it	lt
 80019fa:	425b      	neglt	r3, r3
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <processing_state+0x310>)
 8001a00:	701a      	strb	r2, [r3, #0]
		{
			nbr_scan++;
		}
#endif

		current_data_index = 0;
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <processing_state+0x30c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	801a      	strh	r2, [r3, #0]



	/* CALCULATE DATA POINTS using Pi (in LiDAR_process_buffer) and Pi+1 */
	/* Processing de-compressing calculation */
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	777b      	strb	r3, [r7, #29]
 8001a0c:	e20d      	b.n	8001e2a <processing_state+0x626>
	{
		// Point index in the result RPLIDAR_DATA array
		pt_index = (cabin_i * 2);
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	83fb      	strh	r3, [r7, #30]

		// Security check on index
		if(current_data_index + pt_index + 1 >= SAMPLES_PER_360)
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <processing_state+0x30c>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	8bfb      	ldrh	r3, [r7, #30]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3301      	adds	r3, #1
 8001a22:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8001a26:	db04      	blt.n	8001a32 <processing_state+0x22e>
		{
			RPlidar_current_state = RP_COM_ERR;
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <processing_state+0x300>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
			return log;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	e20c      	b.n	8001e4c <processing_state+0x648>
		}

		// Process point 1 in Cabin Ci
		RPlidar_data[RPlidar_data_current][current_data_index + pt_index].distance = F_CABIN_DISTANCE1(cabin_i);
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <processing_state+0x2f4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	1c59      	adds	r1, r3, #1
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <processing_state+0x2f8>)
 8001a3a:	fb83 3201 	smull	r3, r2, r3, r1
 8001a3e:	17cb      	asrs	r3, r1, #31
 8001a40:	1ad2      	subs	r2, r2, r3
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	1aca      	subs	r2, r1, r3
 8001a4a:	7f79      	ldrb	r1, [r7, #29]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3304      	adds	r3, #4
 8001a54:	492a      	ldr	r1, [pc, #168]	; (8001b00 <processing_state+0x2fc>)
 8001a56:	2054      	movs	r0, #84	; 0x54
 8001a58:	fb00 f202 	mul.w	r2, r0, r2
 8001a5c:	440a      	add	r2, r1
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001a68:	b298      	uxth	r0, r3
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <processing_state+0x2f4>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <processing_state+0x2f8>)
 8001a72:	fb83 3201 	smull	r3, r2, r3, r1
 8001a76:	17cb      	asrs	r3, r1, #31
 8001a78:	1ad2      	subs	r2, r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	1aca      	subs	r2, r1, r3
 8001a82:	7f7b      	ldrb	r3, [r7, #29]
 8001a84:	1c59      	adds	r1, r3, #1
 8001a86:	460b      	mov	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	491c      	ldr	r1, [pc, #112]	; (8001b00 <processing_state+0x2fc>)
 8001a8e:	2454      	movs	r4, #84	; 0x54
 8001a90:	fb04 f202 	mul.w	r2, r4, r2
 8001a94:	440a      	add	r2, r1
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <processing_state+0x310>)
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <processing_state+0x30c>)
 8001aa8:	8812      	ldrh	r2, [r2, #0]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	8bfa      	ldrh	r2, [r7, #30]
 8001aae:	440a      	add	r2, r1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	4918      	ldr	r1, [pc, #96]	; (8001b18 <processing_state+0x314>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	f44f 6264 	mov.w	r2, #3648	; 0xe40
 8001ac2:	fb02 f204 	mul.w	r2, r2, r4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	4602      	mov	r2, r0
 8001acc:	801a      	strh	r2, [r3, #0]
		RPlidar_data[RPlidar_data_current][current_data_index + pt_index].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * pt_index - (float)(F_CABIN_DANGLE1(cabin_i));
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7fe fcde 	bl	8000490 <__aeabi_f2d>
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001adc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d81a      	bhi.n	8001b20 <processing_state+0x31c>
 8001aea:	ed97 7a04 	vldr	s14, [r7, #16]
 8001aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	e01d      	b.n	8001b34 <processing_state+0x330>
 8001af8:	2000005f 	.word	0x2000005f
 8001afc:	55555556 	.word	0x55555556
 8001b00:	20000334 	.word	0x20000334
 8001b04:	20000066 	.word	0x20000066
 8001b08:	42800000 	.word	0x42800000
 8001b0c:	20000070 	.word	0x20000070
 8001b10:	20000086 	.word	0x20000086
 8001b14:	2000005e 	.word	0x2000005e
 8001b18:	20000434 	.word	0x20000434
 8001b1c:	43b40000 	.word	0x43b40000
 8001b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b24:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001b1c <processing_state+0x318>
 8001b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f7fe fcaa 	bl	8000490 <__aeabi_f2d>
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4bc5      	ldr	r3, [pc, #788]	; (8001e58 <processing_state+0x654>)
 8001b42:	f7fe fe27 	bl	8000794 <__aeabi_ddiv>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	8bfb      	ldrh	r3, [r7, #30]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc8b 	bl	800046c <__aeabi_i2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fcef 	bl	8000540 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f7fe fb33 	bl	80001d4 <__adddf3>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	461d      	mov	r5, r3
 8001b74:	4626      	mov	r6, r4
 8001b76:	4bb9      	ldr	r3, [pc, #740]	; (8001e5c <processing_state+0x658>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	4bb8      	ldr	r3, [pc, #736]	; (8001e60 <processing_state+0x65c>)
 8001b7e:	fb83 3201 	smull	r3, r2, r3, r1
 8001b82:	17cb      	asrs	r3, r1, #31
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	1aca      	subs	r2, r1, r3
 8001b8e:	7f79      	ldrb	r1, [r7, #29]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3308      	adds	r3, #8
 8001b98:	49b2      	ldr	r1, [pc, #712]	; (8001e64 <processing_state+0x660>)
 8001b9a:	2054      	movs	r0, #84	; 0x54
 8001b9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ba0:	440a      	add	r2, r1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f003 000f 	and.w	r0, r3, #15
 8001baa:	4bac      	ldr	r3, [pc, #688]	; (8001e5c <processing_state+0x658>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	4bab      	ldr	r3, [pc, #684]	; (8001e60 <processing_state+0x65c>)
 8001bb2:	fb83 3201 	smull	r3, r2, r3, r1
 8001bb6:	17cb      	asrs	r3, r1, #31
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	1aca      	subs	r2, r1, r3
 8001bc2:	7f79      	ldrb	r1, [r7, #29]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3304      	adds	r3, #4
 8001bcc:	49a5      	ldr	r1, [pc, #660]	; (8001e64 <processing_state+0x660>)
 8001bce:	2454      	movs	r4, #84	; 0x54
 8001bd0:	fb04 f202 	mul.w	r2, r4, r2
 8001bd4:	440a      	add	r2, r1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001be2:	4303      	orrs	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bec:	ee17 0a90 	vmov	r0, s15
 8001bf0:	f7fe fc4e 	bl	8000490 <__aeabi_f2d>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	4631      	mov	r1, r6
 8001c00:	f7fe fae6 	bl	80001d0 <__aeabi_dsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	4b96      	ldr	r3, [pc, #600]	; (8001e68 <processing_state+0x664>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461d      	mov	r5, r3
 8001c12:	4b96      	ldr	r3, [pc, #600]	; (8001e6c <processing_state+0x668>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	8bfb      	ldrh	r3, [r7, #30]
 8001c1a:	18d4      	adds	r4, r2, r3
 8001c1c:	f7fe ff2a 	bl	8000a74 <__aeabi_d2f>
 8001c20:	4993      	ldr	r1, [pc, #588]	; (8001e70 <processing_state+0x66c>)
 8001c22:	4623      	mov	r3, r4
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4423      	add	r3, r4
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	f44f 6264 	mov.w	r2, #3648	; 0xe40
 8001c2e:	fb02 f205 	mul.w	r2, r2, r5
 8001c32:	4413      	add	r3, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	3302      	adds	r3, #2
 8001c38:	4602      	mov	r2, r0
 8001c3a:	601a      	str	r2, [r3, #0]

		// Process point 2 in Cabin Ci
		RPlidar_data[RPlidar_data_current][current_data_index + pt_index + 1].distance = F_CABIN_DISTANCE2(cabin_i);
 8001c3c:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <processing_state+0x658>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	1c59      	adds	r1, r3, #1
 8001c42:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <processing_state+0x65c>)
 8001c44:	fb83 3201 	smull	r3, r2, r3, r1
 8001c48:	17cb      	asrs	r3, r1, #31
 8001c4a:	1ad2      	subs	r2, r2, r3
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	1aca      	subs	r2, r1, r3
 8001c54:	7f79      	ldrb	r1, [r7, #29]
 8001c56:	460b      	mov	r3, r1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	4981      	ldr	r1, [pc, #516]	; (8001e64 <processing_state+0x660>)
 8001c60:	2054      	movs	r0, #84	; 0x54
 8001c62:	fb00 f202 	mul.w	r2, r0, r2
 8001c66:	440a      	add	r2, r1
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001c72:	b298      	uxth	r0, r3
 8001c74:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <processing_state+0x658>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	1c59      	adds	r1, r3, #1
 8001c7a:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <processing_state+0x65c>)
 8001c7c:	fb83 3201 	smull	r3, r2, r3, r1
 8001c80:	17cb      	asrs	r3, r1, #31
 8001c82:	1ad2      	subs	r2, r2, r3
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	1aca      	subs	r2, r1, r3
 8001c8c:	7f79      	ldrb	r1, [r7, #29]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	3307      	adds	r3, #7
 8001c96:	4973      	ldr	r1, [pc, #460]	; (8001e64 <processing_state+0x660>)
 8001c98:	2454      	movs	r4, #84	; 0x54
 8001c9a:	fb04 f202 	mul.w	r2, r4, r2
 8001c9e:	440a      	add	r2, r1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	019b      	lsls	r3, r3, #6
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4a6f      	ldr	r2, [pc, #444]	; (8001e68 <processing_state+0x664>)
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	4614      	mov	r4, r2
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <processing_state+0x668>)
 8001cb2:	8812      	ldrh	r2, [r2, #0]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	440a      	add	r2, r1
 8001cba:	3201      	adds	r2, #1
 8001cbc:	4403      	add	r3, r0
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	496b      	ldr	r1, [pc, #428]	; (8001e70 <processing_state+0x66c>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	f44f 6264 	mov.w	r2, #3648	; 0xe40
 8001cce:	fb02 f204 	mul.w	r2, r2, r4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	801a      	strh	r2, [r3, #0]
		RPlidar_data[RPlidar_data_current][current_data_index + pt_index + 1].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * (pt_index+1) - (float)(F_CABIN_DANGLE2(cabin_i));
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7fe fbd8 	bl	8000490 <__aeabi_f2d>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	460d      	mov	r5, r1
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d806      	bhi.n	8001d04 <processing_state+0x500>
 8001cf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	e009      	b.n	8001d18 <processing_state+0x514>
 8001d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d08:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001e74 <processing_state+0x670>
 8001d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d18:	ee17 0a90 	vmov	r0, s15
 8001d1c:	f7fe fbb8 	bl	8000490 <__aeabi_f2d>
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <processing_state+0x654>)
 8001d26:	f7fe fd35 	bl	8000794 <__aeabi_ddiv>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4690      	mov	r8, r2
 8001d30:	4699      	mov	r9, r3
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb98 	bl	800046c <__aeabi_i2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4640      	mov	r0, r8
 8001d42:	4649      	mov	r1, r9
 8001d44:	f7fe fbfc 	bl	8000540 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fa40 	bl	80001d4 <__adddf3>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	461d      	mov	r5, r3
 8001d5a:	4626      	mov	r6, r4
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <processing_state+0x658>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	1c59      	adds	r1, r3, #1
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <processing_state+0x65c>)
 8001d64:	fb83 3201 	smull	r3, r2, r3, r1
 8001d68:	17cb      	asrs	r3, r1, #31
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	1aca      	subs	r2, r1, r3
 8001d74:	7f79      	ldrb	r1, [r7, #29]
 8001d76:	460b      	mov	r3, r1
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	4939      	ldr	r1, [pc, #228]	; (8001e64 <processing_state+0x660>)
 8001d80:	2054      	movs	r0, #84	; 0x54
 8001d82:	fb00 f202 	mul.w	r2, r0, r2
 8001d86:	440a      	add	r2, r1
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f003 00f0 	and.w	r0, r3, #240	; 0xf0
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <processing_state+0x658>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <processing_state+0x65c>)
 8001d98:	fb83 3201 	smull	r3, r2, r3, r1
 8001d9c:	17cb      	asrs	r3, r1, #31
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	1aca      	subs	r2, r1, r3
 8001da8:	7f79      	ldrb	r1, [r7, #29]
 8001daa:	460b      	mov	r3, r1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3306      	adds	r3, #6
 8001db2:	492c      	ldr	r1, [pc, #176]	; (8001e64 <processing_state+0x660>)
 8001db4:	2454      	movs	r4, #84	; 0x54
 8001db6:	fb04 f202 	mul.w	r2, r4, r2
 8001dba:	440a      	add	r2, r1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001dc8:	4403      	add	r3, r0
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fb5b 	bl	8000490 <__aeabi_f2d>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	461a      	mov	r2, r3
 8001de0:	4623      	mov	r3, r4
 8001de2:	4628      	mov	r0, r5
 8001de4:	4631      	mov	r1, r6
 8001de6:	f7fe f9f3 	bl	80001d0 <__aeabi_dsub>
 8001dea:	4603      	mov	r3, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	4618      	mov	r0, r3
 8001df0:	4621      	mov	r1, r4
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <processing_state+0x664>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461d      	mov	r5, r3
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <processing_state+0x668>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	8bfb      	ldrh	r3, [r7, #30]
 8001e00:	4413      	add	r3, r2
 8001e02:	1c5c      	adds	r4, r3, #1
 8001e04:	f7fe fe36 	bl	8000a74 <__aeabi_d2f>
 8001e08:	4919      	ldr	r1, [pc, #100]	; (8001e70 <processing_state+0x66c>)
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4423      	add	r3, r4
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	f44f 6264 	mov.w	r2, #3648	; 0xe40
 8001e16:	fb02 f205 	mul.w	r2, r2, r5
 8001e1a:	4413      	add	r3, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3302      	adds	r3, #2
 8001e20:	4602      	mov	r2, r0
 8001e22:	601a      	str	r2, [r3, #0]
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 8001e24:	7f7b      	ldrb	r3, [r7, #29]
 8001e26:	3301      	adds	r3, #1
 8001e28:	777b      	strb	r3, [r7, #29]
 8001e2a:	7f7b      	ldrb	r3, [r7, #29]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	f67f adee 	bls.w	8001a0e <processing_state+0x20a>


	}

	// Save last point index to be added in the array
	current_data_index += pt_index + 1;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <processing_state+0x668>)
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	8bfb      	ldrh	r3, [r7, #30]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <processing_state+0x668>)
 8001e42:	801a      	strh	r2, [r3, #0]
	{
		max_ptnumber = current_data_index;
	}
#endif

	RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <processing_state+0x674>)
 8001e46:	2206      	movs	r2, #6
 8001e48:	701a      	strb	r2, [r3, #0]

	return log;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e56:	bf00      	nop
 8001e58:	40400000 	.word	0x40400000
 8001e5c:	2000005f 	.word	0x2000005f
 8001e60:	55555556 	.word	0x55555556
 8001e64:	20000334 	.word	0x20000334
 8001e68:	2000005e 	.word	0x2000005e
 8001e6c:	20000086 	.word	0x20000086
 8001e70:	20000434 	.word	0x20000434
 8001e74:	43b40000 	.word	0x43b40000
 8001e78:	20000066 	.word	0x20000066

08001e7c <stop_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR stop_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

}
 8001e84:	bf00      	nop
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <COM_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR COM_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100001;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]

	return log;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <hardware_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR hardware_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100010;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

	return log;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <RPlidar_start_timeout>:
 * Start the Timeout Timer counter
 *
 * Set the counter to 0 to ensure the first Int. fired is still 1ms
 */
void RPlidar_start_timeout()
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	//_htim7->Instance->CNT = 0; // Change on 14/01/2021
	//HAL_TIM_Base_Start_IT(_htim7); // Change on 14/01/2021
	RPLidar_1ms_TIM_enable = 1;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <RPlidar_start_timeout+0x14>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20000069 	.word	0x20000069

08001f04 <RPlidar_abord_timeout>:

/*
 * Stop the Timeout Timer counter INT.
 */
void RPlidar_abord_timeout()
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_Stop_IT(_htim7); // Change on 14/01/2021
	RPLidar_1ms_TIM_enable = 0;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <RPlidar_abord_timeout+0x14>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20000069 	.word	0x20000069
 8001f1c:	00000000 	.word	0x00000000

08001f20 <RPlidar_measure_RPM>:
/*
 * Calculate RP_lidar motors speed in Rotation Per Minute,
 * using time taken to acquire a 360 degree scan
 */
float RPlidar_measure_RPM()
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
	float rpm = 0;
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]

	// If RPM measurement was not enabled before
	if(RPM_init == 0)
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <RPlidar_measure_RPM+0x70>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <RPlidar_measure_RPM+0x22>
	{
		RPM_init = 1;
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <RPlidar_measure_RPM+0x70>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
		RPM_cnt_1ms = 0;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <RPlidar_measure_RPM+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e019      	b.n	8001f76 <RPlidar_measure_RPM+0x56>
		//RPlidar_start_timeout(); // Change on 14/01/2021

	}
	else
	{
		rpm = ( (60.0 * 1000.0) / (1.0 * RPM_cnt_1ms));
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <RPlidar_measure_RPM+0x74>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa8f 	bl	800046c <__aeabi_i2d>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	461a      	mov	r2, r3
 8001f54:	4623      	mov	r3, r4
 8001f56:	a10c      	add	r1, pc, #48	; (adr r1, 8001f88 <RPlidar_measure_RPM+0x68>)
 8001f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f5c:	f7fe fc1a 	bl	8000794 <__aeabi_ddiv>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	f7fe fd84 	bl	8000a74 <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	607b      	str	r3, [r7, #4]
		RPM_cnt_1ms = 0;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <RPlidar_measure_RPM+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	801a      	strh	r2, [r3, #0]
//		_htim7->Instance->CNT = 0;
	}

	return rpm;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	ee07 3a90 	vmov	s15, r3
}
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40ed4c00 	.word	0x40ed4c00
 8001f90:	2000006b 	.word	0x2000006b
 8001f94:	2000006c 	.word	0x2000006c

08001f98 <RPlidar_checksum>:
 * Calculate Checksum of a packet of data of length 'packet_size'
 *
 * Bit XOR between all packet bytes
 */
uint8_t RPlidar_checksum(uint8_t* packet, uint8_t packet_size)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0 ; i < packet_size; i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73bb      	strb	r3, [r7, #14]
 8001fac:	e009      	b.n	8001fc2 <RPlidar_checksum+0x2a>
	{
		checksum ^= *(packet + i);
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4053      	eors	r3, r2
 8001fba:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0 ; i < packet_size; i++)
 8001fbc:	7bbb      	ldrb	r3, [r7, #14]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73bb      	strb	r3, [r7, #14]
 8001fc2:	7bba      	ldrb	r2, [r7, #14]
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3f1      	bcc.n	8001fae <RPlidar_checksum+0x16>
	}

	return checksum;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <RPlidar_get_descriptor_pck>:
 *	Check Descriptor packet by looking for SoF1 and SoF2
 *
 *	Update the global RP_lidar descriptor packet
 */
uint8_t RPlidar_get_descriptor_pck()
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
	uint8_t* _descriptor_pck;
	uint8_t validity = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]

	// Read Rx buffer
	_descriptor_pck = &(AVAILABLE_RX_BUFFER(0));
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <RPlidar_get_descriptor_pck+0x70>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	1c99      	adds	r1, r3, #2
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <RPlidar_get_descriptor_pck+0x74>)
 8001fea:	fb83 3201 	smull	r3, r2, r3, r1
 8001fee:	17cb      	asrs	r3, r1, #31
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	1aca      	subs	r2, r1, r3
 8001ffa:	2354      	movs	r3, #84	; 0x54
 8001ffc:	fb03 f302 	mul.w	r3, r3, r2
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <RPlidar_get_descriptor_pck+0x78>)
 8002002:	4413      	add	r3, r2
 8002004:	603b      	str	r3, [r7, #0]
	buffer_ready = 0;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <RPlidar_get_descriptor_pck+0x7c>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]

	// Check is data are the Descriptor Register by matching the SoF1 and SoF2
	if( *(_descriptor_pck) == RESPONSE_DESCRIPTOR_SoF1 && *(_descriptor_pck + 1) == RESPONSE_DESCRIPTOR_SoF2)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2ba5      	cmp	r3, #165	; 0xa5
 8002012:	d107      	bne.n	8002024 <RPlidar_get_descriptor_pck+0x4c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b5a      	cmp	r3, #90	; 0x5a
 800201c:	d102      	bne.n	8002024 <RPlidar_get_descriptor_pck+0x4c>
	{
		validity = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	e001      	b.n	8002028 <RPlidar_get_descriptor_pck+0x50>
	}
	else
	{
		validity = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
	}

	// Save descriptor in memory
	RPlidar_descriptor_pck = *(RPLIDAR_DESCRIPTOR_PCK*)(_descriptor_pck);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <RPlidar_get_descriptor_pck+0x80>)
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6810      	ldr	r0, [r2, #0]
 800202e:	6018      	str	r0, [r3, #0]
 8002030:	8891      	ldrh	r1, [r2, #4]
 8002032:	7992      	ldrb	r2, [r2, #6]
 8002034:	8099      	strh	r1, [r3, #4]
 8002036:	719a      	strb	r2, [r3, #6]

//	memset(&AVAILABLE_RX_BUFFER(0), 0, RESPONSE_DESCRIPTOR_SIZE);


	return validity;
 8002038:	79fb      	ldrb	r3, [r7, #7]
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000005f 	.word	0x2000005f
 800204c:	55555556 	.word	0x55555556
 8002050:	20000334 	.word	0x20000334
 8002054:	20000060 	.word	0x20000060
 8002058:	20000078 	.word	0x20000078

0800205c <HAL_UART_RxCpltCallback>:

/*
 * UARTs Callback function. For HOST XBee, LiDAR UART and Bluetooth
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_UART_RxCpltCallback+0x34>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d103      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x1a>
	{
		NVIC_command_parser_INT(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fe00 	bl	8000c74 <NVIC_command_parser_INT>
	}
	else if(huart->Instance == UART4)
	{
		NVIC_RPlidar_INT(huart);
	}
}
 8002074:	e007      	b.n	8002086 <HAL_UART_RxCpltCallback+0x2a>
	else if(huart->Instance == UART4)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_UART_RxCpltCallback+0x38>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d102      	bne.n	8002086 <HAL_UART_RxCpltCallback+0x2a>
		NVIC_RPlidar_INT(huart);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff f885 	bl	8001190 <NVIC_RPlidar_INT>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013800 	.word	0x40013800
 8002094:	40004c00 	.word	0x40004c00

08002098 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_UART_TxCpltCallback+0x20>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d102      	bne.n	80020b0 <HAL_UART_TxCpltCallback+0x18>
	{
		NVIC_command_parser_TX_INT(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fe12 	bl	8000cd4 <NVIC_command_parser_TX_INT>
	}
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013800 	.word	0x40013800

080020bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10e      	bne.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		h_robot6900.robot_state->time_ms++;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	3201      	adds	r2, #1
 80020d6:	611a      	str	r2, [r3, #16]
		a_test++;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020e4:	801a      	strh	r2, [r3, #0]
		NVIC_Timout_1ms_INT(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff f8a0 	bl	800122c <NVIC_Timout_1ms_INT>
	}
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40001400 	.word	0x40001400
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000088 	.word	0x20000088

08002100 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d102      	bne.n	8002118 <HAL_ADC_ConvCpltCallback+0x18>
	{
		ADC_Conversion_INT(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 fa2e 	bl	8003574 <ADC_Conversion_INT>
	}
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <update_LEDs>:
 * Update the LEDs debug wheels (8 LEDs) on the stm32f3Discovery Board
 *
 * See attached Debug_LED excel for debug codes
 */
void update_LEDs(ROBOT6900_HANDLER* h_robot6900)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	static uint16_t LEDs_set[8] = {LD3_Pin, LD4_Pin ,LD5_Pin, LD6_Pin, LD7_Pin, LD8_Pin, LD9_Pin, LD10_Pin};

	for(uint8_t i = 0 ; i < 8 ; i++)
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e025      	b.n	800217a <update_LEDs+0x5a>
	{
		if( ((h_robot6900->robot_state->debug_leds) & (0x01 << i)) == (0x01 << i))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2201      	movs	r2, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	ea01 0203 	and.w	r2, r1, r3
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	429a      	cmp	r2, r3
 800214c:	d109      	bne.n	8002162 <update_LEDs+0x42>
		{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_SET);
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <update_LEDs+0x68>)
 8002152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002156:	2201      	movs	r2, #1
 8002158:	4619      	mov	r1, r3
 800215a:	480c      	ldr	r0, [pc, #48]	; (800218c <update_LEDs+0x6c>)
 800215c:	f003 ffb6 	bl	80060cc <HAL_GPIO_WritePin>
 8002160:	e008      	b.n	8002174 <update_LEDs+0x54>
		}
		else{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_RESET);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	4a08      	ldr	r2, [pc, #32]	; (8002188 <update_LEDs+0x68>)
 8002166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800216a:	2200      	movs	r2, #0
 800216c:	4619      	mov	r1, r3
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <update_LEDs+0x6c>)
 8002170:	f003 ffac 	bl	80060cc <HAL_GPIO_WritePin>
	for(uint8_t i = 0 ; i < 8 ; i++)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b07      	cmp	r3, #7
 800217e:	d9d6      	bls.n	800212e <update_LEDs+0xe>
		}
	}
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000018 	.word	0x20000018
 800218c:	48001000 	.word	0x48001000

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	h_robot6900.robot_state->time_ms = 0;
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <main+0xa8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	741a      	strb	r2, [r3, #16]
 800219c:	2200      	movs	r2, #0
 800219e:	745a      	strb	r2, [r3, #17]
 80021a0:	2200      	movs	r2, #0
 80021a2:	749a      	strb	r2, [r3, #18]
 80021a4:	2200      	movs	r2, #0
 80021a6:	74da      	strb	r2, [r3, #19]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a8:	f001 fc84 	bl	8003ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ac:	f000 f852 	bl	8002254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b0:	f000 fade 	bl	8002770 <MX_GPIO_Init>
  MX_DMA_Init();
 80021b4:	f000 faaa 	bl	800270c <MX_DMA_Init>
  MX_ADC1_Init();
 80021b8:	f000 f8b4 	bl	8002324 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021bc:	f000 f95c 	bl	8002478 <MX_I2C1_Init>
  MX_SPI1_Init();
 80021c0:	f000 f9a2 	bl	8002508 <MX_SPI1_Init>
  MX_UART4_Init();
 80021c4:	f000 fa14 	bl	80025f0 <MX_UART4_Init>
  MX_USB_PCD_Init();
 80021c8:	f000 fa7e 	bl	80026c8 <MX_USB_PCD_Init>
  MX_IWDG_Init();
 80021cc:	f000 f994 	bl	80024f8 <MX_IWDG_Init>
  MX_CRC_Init();
 80021d0:	f000 f926 	bl	8002420 <MX_CRC_Init>
  MX_TIM7_Init();
 80021d4:	f000 f9d6 	bl	8002584 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80021d8:	f000 fa3e 	bl	8002658 <MX_USART1_UART_Init>
  // Initiate LOG LEDs
  //HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(GPIOA, LOG_WARNING_Pin, GPIO_PIN_RESET);

  /* Initialise Command parser peripheral. (FSM + CRC + UART5) */
  uart_init(&huart1, &hcrc);
 80021dc:	4917      	ldr	r1, [pc, #92]	; (800223c <main+0xac>)
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <main+0xb0>)
 80021e0:	f7fe fd98 	bl	8000d14 <uart_init>
  spi_driver_init(&hspi1);
 80021e4:	4817      	ldr	r0, [pc, #92]	; (8002244 <main+0xb4>)
 80021e6:	f001 fae5 	bl	80037b4 <spi_driver_init>

  /* Initialise RPlidar peripheral (FSM + UART4) */
  RPlidar_init(&h_robot6900, &huart4, &htim7);
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <main+0xb8>)
 80021ec:	4917      	ldr	r1, [pc, #92]	; (800224c <main+0xbc>)
 80021ee:	4812      	ldr	r0, [pc, #72]	; (8002238 <main+0xa8>)
 80021f0:	f7ff f84e 	bl	8001290 <RPlidar_init>

  washer_init(&hadc1);
 80021f4:	4816      	ldr	r0, [pc, #88]	; (8002250 <main+0xc0>)
 80021f6:	f001 fb7f 	bl	80038f8 <washer_init>

  init_current_probes(&hadc1);
 80021fa:	4815      	ldr	r0, [pc, #84]	; (8002250 <main+0xc0>)
 80021fc:	f001 f9e2 	bl	80035c4 <init_current_probes>

//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim7);
 8002200:	4811      	ldr	r0, [pc, #68]	; (8002248 <main+0xb8>)
 8002202:	f006 f871 	bl	80082e8 <HAL_TIM_Base_Start_IT>

  disable_UVC();
 8002206:	f001 fc1f 	bl	8003a48 <disable_UVC>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*Command parser FSM */
	  cmd_parser_process(&h_robot6900);
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <main+0xa8>)
 800220c:	f7fe fdba 	bl	8000d84 <cmd_parser_process>

	  /* RPlidar FSM */
	  RPlidar_process(&h_robot6900);
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <main+0xa8>)
 8002212:	f7ff f86f 	bl	80012f4 <RPlidar_process>

	  /* Robot Mouvment */
	  movement_process(&h_robot6900);
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <main+0xa8>)
 8002218:	f000 fe9a 	bl	8002f50 <movement_process>

	  /* Washer Handler */
	  washer_process(&h_robot6900);
 800221c:	4806      	ldr	r0, [pc, #24]	; (8002238 <main+0xa8>)
 800221e:	f001 fb7d 	bl	800391c <washer_process>

	  current_probes_process(&h_robot6900);
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <main+0xa8>)
 8002224:	f001 f9f4 	bl	8003610 <current_probes_process>

	  /* Debug LEDs state */
	  update_LEDs(&h_robot6900);
 8002228:	4803      	ldr	r0, [pc, #12]	; (8002238 <main+0xa8>)
 800222a:	f7ff ff79 	bl	8002120 <update_LEDs>

	  /* General shell returning data to the HOST */
	  parser_return(&h_robot6900);
 800222e:	4802      	ldr	r0, [pc, #8]	; (8002238 <main+0xa8>)
 8002230:	f7fe febe 	bl	8000fb0 <parser_return>
  {
 8002234:	e7e9      	b.n	800220a <main+0x7a>
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008
 800223c:	20002154 	.word	0x20002154
 8002240:	20002218 	.word	0x20002218
 8002244:	20002318 	.word	0x20002318
 8002248:	20002680 	.word	0x20002680
 800224c:	20002298 	.word	0x20002298
 8002250:	200021bc 	.word	0x200021bc

08002254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b09e      	sub	sp, #120	; 0x78
 8002258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800225e:	2228      	movs	r2, #40	; 0x28
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f007 fd28 	bl	8009cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	223c      	movs	r2, #60	; 0x3c
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f007 fd1a 	bl	8009cb8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002284:	230b      	movs	r3, #11
 8002286:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002288:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002292:	2301      	movs	r3, #1
 8002294:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002296:	2310      	movs	r3, #16
 8002298:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800229a:	2301      	movs	r3, #1
 800229c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f926 	bl	8006504 <HAL_RCC_OscConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80022be:	f000 fb3f 	bl	8002940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c2:	230f      	movs	r3, #15
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c6:	2302      	movs	r3, #2
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 f818 	bl	8007314 <HAL_RCC_ClockConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022ea:	f000 fb29 	bl	8002940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <SystemClock_Config+0xcc>)
 80022f0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80022fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f005 fa3a 	bl	8007780 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002312:	f000 fb15 	bl	8002940 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	3778      	adds	r7, #120	; 0x78
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	00020029 	.word	0x00020029

08002324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <MX_ADC1_Init+0xf8>)
 8002348:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800234c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <MX_ADC1_Init+0xf8>)
 8002350:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <MX_ADC1_Init+0xf8>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <MX_ADC1_Init+0xf8>)
 800235e:	2201      	movs	r2, #1
 8002360:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <MX_ADC1_Init+0xf8>)
 8002364:	2201      	movs	r2, #1
 8002366:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <MX_ADC1_Init+0xf8>)
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <MX_ADC1_Init+0xf8>)
 8002372:	2200      	movs	r2, #0
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <MX_ADC1_Init+0xf8>)
 8002378:	2201      	movs	r2, #1
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <MX_ADC1_Init+0xf8>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <MX_ADC1_Init+0xf8>)
 8002384:	2202      	movs	r2, #2
 8002386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <MX_ADC1_Init+0xf8>)
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <MX_ADC1_Init+0xf8>)
 8002392:	2208      	movs	r2, #8
 8002394:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_ADC1_Init+0xf8>)
 8002398:	2200      	movs	r2, #0
 800239a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_ADC1_Init+0xf8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023a2:	481e      	ldr	r0, [pc, #120]	; (800241c <MX_ADC1_Init+0xf8>)
 80023a4:	f001 fc00 	bl	8003ba8 <HAL_ADC_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80023ae:	f000 fac7 	bl	8002940 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4817      	ldr	r0, [pc, #92]	; (800241c <MX_ADC1_Init+0xf8>)
 80023be:	f002 fd7d 	bl	8004ebc <HAL_ADCEx_MultiModeConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80023c8:	f000 faba 	bl	8002940 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80023cc:	2303      	movs	r3, #3
 80023ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023d0:	2301      	movs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_ADC1_Init+0xf8>)
 80023ea:	f002 fa7b 	bl	80048e4 <HAL_ADC_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80023f4:	f000 faa4 	bl	8002940 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_ADC1_Init+0xf8>)
 8002406:	f002 fa6d 	bl	80048e4 <HAL_ADC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8002410:	f000 fa96 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200021bc 	.word	0x200021bc

08002420 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* Initializing CRC Initial value for crc-8bit calculation */
  hcrc.Init.InitValue = 0xFF;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_CRC_Init+0x50>)
 8002426:	22ff      	movs	r2, #255	; 0xff
 8002428:	611a      	str	r2, [r3, #16]

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_CRC_Init+0x50>)
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <MX_CRC_Init+0x54>)
 800242e:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_CRC_Init+0x50>)
 8002432:	2201      	movs	r2, #1
 8002434:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_CRC_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 155;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_CRC_Init+0x50>)
 800243e:	229b      	movs	r2, #155	; 0x9b
 8002440:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_CRC_Init+0x50>)
 8002444:	2210      	movs	r2, #16
 8002446:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_CRC_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_CRC_Init+0x50>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_CRC_Init+0x50>)
 8002456:	2201      	movs	r2, #1
 8002458:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_CRC_Init+0x50>)
 800245c:	f003 f8ce 	bl	80055fc <HAL_CRC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8002466:	f000 fa6b 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20002154 	.word	0x20002154
 8002474:	40023000 	.word	0x40023000

08002478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_I2C1_Init+0x74>)
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <MX_I2C1_Init+0x78>)
 8002480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_I2C1_Init+0x74>)
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <MX_I2C1_Init+0x7c>)
 8002486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_I2C1_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_I2C1_Init+0x74>)
 8002490:	2201      	movs	r2, #1
 8002492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_I2C1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_I2C1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_I2C1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_I2C1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_I2C1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <MX_I2C1_Init+0x74>)
 80024b4:	f003 fe22 	bl	80060fc <HAL_I2C_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024be:	f000 fa3f 	bl	8002940 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <MX_I2C1_Init+0x74>)
 80024c6:	f003 fea8 	bl	800621a <HAL_I2CEx_ConfigAnalogFilter>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024d0:	f000 fa36 	bl	8002940 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024d4:	2100      	movs	r1, #0
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_I2C1_Init+0x74>)
 80024d8:	f003 feea 	bl	80062b0 <HAL_I2CEx_ConfigDigitalFilter>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024e2:	f000 fa2d 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200020f8 	.word	0x200020f8
 80024f0:	40005400 	.word	0x40005400
 80024f4:	2000090e 	.word	0x2000090e

080024f8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <MX_SPI1_Init+0x74>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <MX_SPI1_Init+0x78>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_SPI1_Init+0x74>)
 8002514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <MX_SPI1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <MX_SPI1_Init+0x74>)
 8002522:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002526:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_SPI1_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_SPI1_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_SPI1_Init+0x74>)
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_SPI1_Init+0x74>)
 800253e:	2210      	movs	r2, #16
 8002540:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_SPI1_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_SPI1_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_SPI1_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_SPI1_Init+0x74>)
 8002556:	2207      	movs	r2, #7
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_SPI1_Init+0x74>)
 8002562:	2208      	movs	r2, #8
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_SPI1_Init+0x74>)
 8002568:	f005 faba 	bl	8007ae0 <HAL_SPI_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002572:	f000 f9e5 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20002318 	.word	0x20002318
 8002580:	40013000 	.word	0x40013000

08002584 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <MX_TIM7_Init+0x64>)
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <MX_TIM7_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <MX_TIM7_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 47999;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025a8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80025ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025b6:	f005 fe6b 	bl	8008290 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025c0:	f000 f9be 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025d2:	f006 f88b 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f000 f9b0 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20002680 	.word	0x20002680
 80025ec:	40001400 	.word	0x40001400

080025f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025f4:	4b16      	ldr	r3, [pc, #88]	; (8002650 <MX_UART4_Init+0x60>)
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <MX_UART4_Init+0x64>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <MX_UART4_Init+0x60>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_UART4_Init+0x60>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_UART4_Init+0x60>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_UART4_Init+0x60>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_UART4_Init+0x60>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <MX_UART4_Init+0x60>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_UART4_Init+0x60>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <MX_UART4_Init+0x60>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_UART4_Init+0x60>)
 800262e:	2220      	movs	r2, #32
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <MX_UART4_Init+0x60>)
 8002634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_UART4_Init+0x60>)
 800263c:	f006 f8f4 	bl	8008828 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8002646:	f000 f97b 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20002298 	.word	0x20002298
 8002654:	40004c00 	.word	0x40004c00

08002658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 800265e:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <MX_USART1_UART_Init+0x6c>)
 8002660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 8002696:	2230      	movs	r2, #48	; 0x30
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 800269c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 80026a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <MX_USART1_UART_Init+0x68>)
 80026ac:	f006 f8bc 	bl	8008828 <HAL_UART_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80026b6:	f000 f943 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20002218 	.word	0x20002218
 80026c4:	40013800 	.word	0x40013800

080026c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <MX_USB_PCD_Init+0x40>)
 80026d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026d4:	2208      	movs	r2, #8
 80026d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026da:	2202      	movs	r2, #2
 80026dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026e0:	2202      	movs	r2, #2
 80026e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <MX_USB_PCD_Init+0x3c>)
 80026f2:	f003 fe29 	bl	8006348 <HAL_PCD_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80026fc:	f000 f920 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000237c 	.word	0x2000237c
 8002708:	40005c00 	.word	0x40005c00

0800270c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_DMA_Init+0x60>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <MX_DMA_Init+0x60>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6153      	str	r3, [r2, #20]
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_DMA_Init+0x60>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_DMA_Init+0x60>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <MX_DMA_Init+0x60>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6153      	str	r3, [r2, #20]
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <MX_DMA_Init+0x60>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	200e      	movs	r0, #14
 8002748:	f002 ff13 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800274c:	200e      	movs	r0, #14
 800274e:	f002 ff2c 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	203a      	movs	r0, #58	; 0x3a
 8002758:	f002 ff0b 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800275c:	203a      	movs	r0, #58	; 0x3a
 800275e:	f002 ff24 	bl	80055aa <HAL_NVIC_EnableIRQ>

}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	4b68      	ldr	r3, [pc, #416]	; (8002928 <MX_GPIO_Init+0x1b8>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4a67      	ldr	r2, [pc, #412]	; (8002928 <MX_GPIO_Init+0x1b8>)
 800278c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002790:	6153      	str	r3, [r2, #20]
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <MX_GPIO_Init+0x1b8>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	4b62      	ldr	r3, [pc, #392]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4a61      	ldr	r2, [pc, #388]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027a8:	6153      	str	r3, [r2, #20]
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4a5b      	ldr	r2, [pc, #364]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b56      	ldr	r3, [pc, #344]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4a55      	ldr	r2, [pc, #340]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	6153      	str	r3, [r2, #20]
 80027da:	4b53      	ldr	r3, [pc, #332]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e6:	4b50      	ldr	r3, [pc, #320]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4a4f      	ldr	r2, [pc, #316]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f0:	6153      	str	r3, [r2, #20]
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <MX_GPIO_Init+0x1b8>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <MX_GPIO_Init+0x1b8>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4a49      	ldr	r2, [pc, #292]	; (8002928 <MX_GPIO_Init+0x1b8>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002808:	6153      	str	r3, [r2, #20]
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <MX_GPIO_Init+0x1b8>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002816:	2200      	movs	r2, #0
 8002818:	f64f 7108 	movw	r1, #65288	; 0xff08
 800281c:	4843      	ldr	r0, [pc, #268]	; (800292c <MX_GPIO_Init+0x1bc>)
 800281e:	f003 fc55 	bl	80060cc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, brosse_Pin|relais_Pin, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002828:	4841      	ldr	r0, [pc, #260]	; (8002930 <MX_GPIO_Init+0x1c0>)
 800282a:	f003 fc4f 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin|CS_Accelerometer_Pin, GPIO_PIN_SET);
 800282e:	2201      	movs	r2, #1
 8002830:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002834:	483f      	ldr	r0, [pc, #252]	; (8002934 <MX_GPIO_Init+0x1c4>)
 8002836:	f003 fc49 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UVC_Enable_GPIO_Port, UVC_Enable_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002840:	483d      	ldr	r0, [pc, #244]	; (8002938 <MX_GPIO_Init+0x1c8>)
 8002842:	f003 fc43 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_ENABLE_Pin|RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800284c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002850:	f003 fc3c 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002854:	2337      	movs	r3, #55	; 0x37
 8002856:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <MX_GPIO_Init+0x1cc>)
 800285a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4831      	ldr	r0, [pc, #196]	; (800292c <MX_GPIO_Init+0x1bc>)
 8002868:	f003 fab6 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800286c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002870:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002872:	2301      	movs	r3, #1
 8002874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	4829      	ldr	r0, [pc, #164]	; (800292c <MX_GPIO_Init+0x1bc>)
 8002886:	f003 faa7 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : brosse_Pin relais_Pin */
  GPIO_InitStruct.Pin = brosse_Pin|relais_Pin;
 800288a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002890:	2311      	movs	r3, #17
 8002892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	4823      	ldr	r0, [pc, #140]	; (8002930 <MX_GPIO_Init+0x1c0>)
 80028a4:	f003 fa98 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f003 fa8b 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_FPGA_Pin CS_Accelerometer_Pin */
  GPIO_InitStruct.Pin = CS_FPGA_Pin|CS_Accelerometer_Pin;
 80028c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c8:	2301      	movs	r3, #1
 80028ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	4816      	ldr	r0, [pc, #88]	; (8002934 <MX_GPIO_Init+0x1c4>)
 80028dc:	f003 fa7c 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UVC_Enable_Pin */
  GPIO_InitStruct.Pin = UVC_Enable_Pin;
 80028e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e6:	2301      	movs	r3, #1
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UVC_Enable_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	4619      	mov	r1, r3
 80028f8:	480f      	ldr	r0, [pc, #60]	; (8002938 <MX_GPIO_Init+0x1c8>)
 80028fa:	f003 fa6d 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_ENABLE_Pin RPLIDAR_EN_Pin */
  GPIO_InitStruct.Pin = BT_ENABLE_Pin|RPLIDAR_EN_Pin;
 80028fe:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291a:	f003 fa5d 	bl	8005dd8 <HAL_GPIO_Init>

}
 800291e:	bf00      	nop
 8002920:	3730      	adds	r7, #48	; 0x30
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	48001000 	.word	0x48001000
 8002930:	48001400 	.word	0x48001400
 8002934:	48000c00 	.word	0x48000c00
 8002938:	48000800 	.word	0x48000800
 800293c:	10120000 	.word	0x10120000

08002940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_MspInit+0x44>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_MspInit+0x44>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6193      	str	r3, [r2, #24]
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_MspInit+0x44>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_MspInit+0x44>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_MspInit+0x44>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_MspInit+0x44>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002986:	2007      	movs	r0, #7
 8002988:	f002 fde8 	bl	800555c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b8:	d144      	bne.n	8002a44 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6153      	str	r3, [r2, #20]
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	6153      	str	r3, [r2, #20]
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029f4:	6153      	str	r3, [r2, #20]
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_ADC_MspInit+0xb4>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = MOTOR_CURRENT_1_Pin|MOTOR_CURRENT_2_Pin|GPIO_PIN_3;
 8002a02:	230e      	movs	r3, #14
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a06:	2303      	movs	r3, #3
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f003 f9de 	bl	8005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4808      	ldr	r0, [pc, #32]	; (8002a50 <HAL_ADC_MspInit+0xb8>)
 8002a30:	f003 f9d2 	bl	8005dd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	2012      	movs	r0, #18
 8002a3a:	f002 fd9a 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a3e:	2012      	movs	r0, #18
 8002a40:	f002 fdb3 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	48001400 	.word	0x48001400

08002a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_CRC_MspInit+0x38>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10b      	bne.n	8002a7e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_CRC_MspInit+0x3c>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_CRC_MspInit+0x3c>)
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a70:	6153      	str	r3, [r2, #20]
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_CRC_MspInit+0x3c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023000 	.word	0x40023000
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_I2C_MspInit+0x7c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d127      	bne.n	8002b06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6153      	str	r3, [r2, #20]
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad2:	2312      	movs	r3, #18
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480b      	ldr	r0, [pc, #44]	; (8002b18 <HAL_I2C_MspInit+0x84>)
 8002aea:	f003 f975 	bl	8005dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af8:	61d3      	str	r3, [r2, #28]
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40005400 	.word	0x40005400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400

08002b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_SPI_MspInit+0x8c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b48:	6193      	str	r3, [r2, #24]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6153      	str	r3, [r2, #20]
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002b6e:	23e0      	movs	r3, #224	; 0xe0
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b7e:	2305      	movs	r3, #5
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f003 f924 	bl	8005dd8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2023      	movs	r0, #35	; 0x23
 8002b96:	f002 fcec 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b9a:	2023      	movs	r0, #35	; 0x23
 8002b9c:	f002 fd05 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ba0:	bf00      	nop
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013000 	.word	0x40013000
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_TIM_Base_MspInit+0x44>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d113      	bne.n	8002bea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bc8:	f043 0320 	orr.w	r3, r3, #32
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_TIM_Base_MspInit+0x48>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2037      	movs	r0, #55	; 0x37
 8002be0:	f002 fcc7 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002be4:	2037      	movs	r0, #55	; 0x37
 8002be6:	f002 fce0 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40001400 	.word	0x40001400
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	; 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5e      	ldr	r2, [pc, #376]	; (8002d94 <HAL_UART_MspInit+0x198>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d158      	bne.n	8002cd0 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c40:	6153      	str	r3, [r2, #20]
 8002c42:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002c60:	2305      	movs	r3, #5
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	484c      	ldr	r0, [pc, #304]	; (8002d9c <HAL_UART_MspInit+0x1a0>)
 8002c6c:	f003 f8b4 	bl	8005dd8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c72:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_UART_MspInit+0x1a8>)
 8002c74:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002c9c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002ca0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002ca2:	483f      	ldr	r0, [pc, #252]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002ca4:	f002 fea6 	bl	80059f4 <HAL_DMA_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002cae:	f7ff fe47 	bl	8002940 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002cb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002cb8:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <HAL_UART_MspInit+0x1a4>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2034      	movs	r0, #52	; 0x34
 8002cc4:	f002 fc55 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cc8:	2034      	movs	r0, #52	; 0x34
 8002cca:	f002 fc6e 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cce:	e05c      	b.n	8002d8a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <HAL_UART_MspInit+0x1ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d157      	bne.n	8002d8a <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6193      	str	r3, [r2, #24]
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	6153      	str	r3, [r2, #20]
 8002cfe:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_BT_TX_Pin|USART_BT_RX_Pin;
 8002d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2a:	f003 f855 	bl	8005dd8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d30:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_UART_MspInit+0x1b4>)
 8002d32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d36:	2210      	movs	r2, #16
 8002d38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d5e:	4813      	ldr	r0, [pc, #76]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d60:	f002 fe48 	bl	80059f4 <HAL_DMA_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002d6a:	f7ff fde9 	bl	8002940 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d72:	669a      	str	r2, [r3, #104]	; 0x68
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_UART_MspInit+0x1b0>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2025      	movs	r0, #37	; 0x25
 8002d80:	f002 fbf7 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d84:	2025      	movs	r0, #37	; 0x25
 8002d86:	f002 fc10 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3730      	adds	r7, #48	; 0x30
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40004c00 	.word	0x40004c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	48000800 	.word	0x48000800
 8002da0:	200020b4 	.word	0x200020b4
 8002da4:	40020430 	.word	0x40020430
 8002da8:	40013800 	.word	0x40013800
 8002dac:	20002178 	.word	0x20002178
 8002db0:	40020044 	.word	0x40020044

08002db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_PCD_MspInit+0x80>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d129      	bne.n	8002e2a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	6153      	str	r3, [r2, #20]
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002dee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002e00:	230e      	movs	r3, #14
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0e:	f002 ffe3 	bl	8005dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e1c:	61d3      	str	r3, [r2, #28]
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_PCD_MspInit+0x84>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40005c00 	.word	0x40005c00
 8002e38:	40021000 	.word	0x40021000

08002e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4e:	e7fe      	b.n	8002e4e <HardFault_Handler+0x4>

08002e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <MemManage_Handler+0x4>

08002e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <BusFault_Handler+0x4>

08002e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <UsageFault_Handler+0x4>

08002e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e90:	f000 fe56 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <DMA1_Channel4_IRQHandler+0x10>)
 8002e9e:	f002 fe8d 	bl	8005bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20002178 	.word	0x20002178

08002eac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <ADC1_2_IRQHandler+0x10>)
 8002eb2:	f001 f9e3 	bl	800427c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200021bc 	.word	0x200021bc

08002ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <SPI1_IRQHandler+0x10>)
 8002ec6:	f004 ff23 	bl	8007d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20002318 	.word	0x20002318

08002ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART1_IRQHandler+0x10>)
 8002eda:	f005 ff71 	bl	8008dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20002218 	.word	0x20002218

08002ee8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <UART4_IRQHandler+0x10>)
 8002eee:	f005 ff67 	bl	8008dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20002298 	.word	0x20002298

08002efc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <TIM7_IRQHandler+0x10>)
 8002f02:	f005 fa1b 	bl	800833c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20002680 	.word	0x20002680

08002f10 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <DMA2_Channel3_IRQHandler+0x10>)
 8002f16:	f002 fe51 	bl	8005bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200020b4 	.word	0x200020b4

08002f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <SystemInit+0x28>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <SystemInit+0x28>)
 8002f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SystemInit+0x28>)
 8002f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <movement_process>:
uint8_t motor_0_duty = DEFAULT_MOTORS_DUTY;
uint8_t motor_1_duty = DEFAULT_MOTORS_DUTY;


MVT_HDL_DRIVER_ERROR movement_process(ROBOT6900_HANDLER* h_robot6900)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	// Full State Machine Call
	MVT_HDL_Parser_Log = (mvt_handler_fsm[MVT_HDL_current_state]).state_process(h_robot6900);
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <movement_process+0x34>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <movement_process+0x38>)
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <movement_process+0x3c>)
 8002f6e:	701a      	strb	r2, [r3, #0]


	// Update Debug LED state regarding Parser state flags
	generate_parser_flag(h_robot6900);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe f8a5 	bl	80010c0 <generate_parser_flag>

	return MVT_HDL_Parser_Log;
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <movement_process+0x3c>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000008b 	.word	0x2000008b
 8002f88:	08009d90 	.word	0x08009d90
 8002f8c:	2000008a 	.word	0x2000008a

08002f90 <mvh_hdl_idle>:

MVT_HDL_DRIVER_ERROR mvh_hdl_idle(ROBOT6900_HANDLER* h_robot6900)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	MVT_HDL_DRIVER_ERROR mvt_hdl_log = MVT_HDL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]

	if(h_robot6900->robot_state->Etat_Movement == Mouvement_Post_Launch)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10d      	bne.n	8002fc2 <mvh_hdl_idle+0x32>
	{
		h_robot6900->robot_state->motor_0_duty = DEFAULT_MOTORS_DUTY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2205      	movs	r2, #5
 8002fac:	715a      	strb	r2, [r3, #5]
		h_robot6900->robot_state->motor_1_duty = DEFAULT_MOTORS_DUTY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	719a      	strb	r2, [r3, #6]

		MVT_HDL_current_state = MVT_HDL_INIT;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <mvh_hdl_idle+0x48>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
		mvt_hdl_log = MVT_HDL_WAINTING;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e002      	b.n	8002fc8 <mvh_hdl_idle+0x38>
	}
	else
	{
		MVT_HDL_current_state = MVT_HDL_WAIT;
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <mvh_hdl_idle+0x48>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
	}

	return mvt_hdl_log;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	2000008b 	.word	0x2000008b

08002fdc <mvh_hdl_init>:

MVT_HDL_DRIVER_ERROR mvh_hdl_init(ROBOT6900_HANDLER* h_robot6900)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	MVT_HDL_DRIVER_ERROR mvt_hdl_log = MVT_HDL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_OK;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	75bb      	strb	r3, [r7, #22]

	uint8_t sub_state = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	757b      	strb	r3, [r7, #21]
	uint8_t param_data[2 * 2 * 3];

	// Create Data packets

	// Stop M0
	param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 8002ff0:	23a1      	movs	r3, #161	; 0xa1
 8002ff2:	727b      	strb	r3, [r7, #9]
	param_data[0] = (FPGA_CMD_V_STOP << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 8002ff4:	2080      	movs	r0, #128	; 0x80
 8002ff6:	f000 fc39 	bl	800386c <FPGA_frame_checker>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	723b      	strb	r3, [r7, #8]
	// Stop M1
	param_data[3] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 8002ffe:	23a9      	movs	r3, #169	; 0xa9
 8003000:	72fb      	strb	r3, [r7, #11]
	param_data[2] = (FPGA_CMD_V_STOP << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 8003002:	2080      	movs	r0, #128	; 0x80
 8003004:	f000 fc32 	bl	800386c <FPGA_frame_checker>
 8003008:	4603      	mov	r3, r0
 800300a:	72bb      	strb	r3, [r7, #10]

	// DIR M0 = 0
	param_data[5] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 800300c:	23a2      	movs	r3, #162	; 0xa2
 800300e:	737b      	strb	r3, [r7, #13]
	param_data[4] = (FPGA_CMD_V_DIR0 << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 8003010:	2080      	movs	r0, #128	; 0x80
 8003012:	f000 fc2b 	bl	800386c <FPGA_frame_checker>
 8003016:	4603      	mov	r3, r0
 8003018:	733b      	strb	r3, [r7, #12]
	// DIR M1 = 0
	param_data[7] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 800301a:	23aa      	movs	r3, #170	; 0xaa
 800301c:	73fb      	strb	r3, [r7, #15]
	param_data[6] = (FPGA_CMD_V_DIR1 << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 800301e:	2080      	movs	r0, #128	; 0x80
 8003020:	f000 fc24 	bl	800386c <FPGA_frame_checker>
 8003024:	4603      	mov	r3, r0
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	73bb      	strb	r3, [r7, #14]

	// DUTY M0 = 0
	param_data[9] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 800302e:	23a7      	movs	r3, #167	; 0xa7
 8003030:	747b      	strb	r3, [r7, #17]
	param_data[8] = (DEFAULT_MOTORS_DUTY << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003032:	f44f 7060 	mov.w	r0, #896	; 0x380
 8003036:	f000 fc19 	bl	800386c <FPGA_frame_checker>
 800303a:	4603      	mov	r3, r0
 800303c:	f043 030a 	orr.w	r3, r3, #10
 8003040:	b2db      	uxtb	r3, r3
 8003042:	743b      	strb	r3, [r7, #16]
	// DUTY M1 = 0
	param_data[11] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 8003044:	23af      	movs	r3, #175	; 0xaf
 8003046:	74fb      	strb	r3, [r7, #19]
	param_data[10] = (DEFAULT_MOTORS_DUTY << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003048:	f44f 7060 	mov.w	r0, #896	; 0x380
 800304c:	f000 fc0e 	bl	800386c <FPGA_frame_checker>
 8003050:	4603      	mov	r3, r0
 8003052:	f043 030a 	orr.w	r3, r3, #10
 8003056:	b2db      	uxtb	r3, r3
 8003058:	74bb      	strb	r3, [r7, #18]
//	param_data[14] = (FPGA_CMD_V_START << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker

	// Send SPI Packets
	do
	{
		spi_log = spi_request(SPI_RQT_FPGA, param_data, 2 * 3);
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	2206      	movs	r2, #6
 8003060:	4619      	mov	r1, r3
 8003062:	2001      	movs	r0, #1
 8003064:	f000 fbb6 	bl	80037d4 <spi_request>
 8003068:	4603      	mov	r3, r0
 800306a:	75bb      	strb	r3, [r7, #22]
	}while(spi_log != SPI_DONE);
 800306c:	7dbb      	ldrb	r3, [r7, #22]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d1f3      	bne.n	800305a <mvh_hdl_init+0x7e>

	MVT_HDL_current_state = MVT_HDL_ARMED;
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <mvh_hdl_init+0xa8>)
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
	//MVT_HDL_current_state = MVT_HDL_RUN;


	return mvt_hdl_log;
 8003078:	7dfb      	ldrb	r3, [r7, #23]

}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000008b 	.word	0x2000008b

08003088 <mvh_hdl_armed>:

MVT_HDL_DRIVER_ERROR mvh_hdl_armed(ROBOT6900_HANDLER* h_robot6900)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	MVT_HDL_DRIVER_ERROR mvt_hdl_log = MVT_HDL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_OK;
 8003094:	2302      	movs	r3, #2
 8003096:	73bb      	strb	r3, [r7, #14]

	uint8_t sub_state = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	737b      	strb	r3, [r7, #13]
	uint8_t param_data[2 * 2];

	if(h_robot6900->robot_state->Etat_Movement == Start)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	78db      	ldrb	r3, [r3, #3]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d123      	bne.n	80030ee <mvh_hdl_armed+0x66>
	{

		// Start M0
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 80030a6:	23a1      	movs	r3, #161	; 0xa1
 80030a8:	727b      	strb	r3, [r7, #9]
		param_data[0] = (FPGA_CMD_V_START << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 80030aa:	2080      	movs	r0, #128	; 0x80
 80030ac:	f000 fbde 	bl	800386c <FPGA_frame_checker>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	723b      	strb	r3, [r7, #8]
		// Start M1
		param_data[3] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 80030ba:	23a9      	movs	r3, #169	; 0xa9
 80030bc:	72fb      	strb	r3, [r7, #11]
		param_data[2] = (FPGA_CMD_V_START << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 80030be:	2080      	movs	r0, #128	; 0x80
 80030c0:	f000 fbd4 	bl	800386c <FPGA_frame_checker>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	72bb      	strb	r3, [r7, #10]


		// Send SPI Packets
		do
		{
			spi_log = spi_request(SPI_RQT_FPGA, param_data, 2 * 2);
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	2204      	movs	r2, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	2001      	movs	r0, #1
 80030d8:	f000 fb7c 	bl	80037d4 <spi_request>
 80030dc:	4603      	mov	r3, r0
 80030de:	73bb      	strb	r3, [r7, #14]
		}while(spi_log != SPI_DRIVER_DONE);
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d1f3      	bne.n	80030ce <mvh_hdl_armed+0x46>

		MVT_HDL_current_state = MVT_HDL_RUN;
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <mvh_hdl_armed+0x7c>)
 80030e8:	2203      	movs	r2, #3
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e004      	b.n	80030f8 <mvh_hdl_armed+0x70>

	}
	else
	{
		MVT_HDL_current_state = MVT_HDL_ARMED;
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <mvh_hdl_armed+0x7c>)
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
		mvt_hdl_log = MVT_HDL_WAINTING;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
	}

	return mvt_hdl_log;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000008b 	.word	0x2000008b

08003108 <mvh_hdl_running>:

MVT_HDL_DRIVER_ERROR mvh_hdl_running(ROBOT6900_HANDLER* h_robot6900)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	MVT_HDL_DRIVER_ERROR mvt_hdl_log = MVT_HDL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]

	if(h_robot6900->robot_state->Etat_Movement != Stopper)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d006      	beq.n	800312c <mvh_hdl_running+0x24>
	{
		motor_ramp(h_robot6900);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f828 	bl	8003174 <motor_ramp>
		MVT_HDL_current_state = MVT_HDL_RUN;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <mvh_hdl_running+0x34>)
 8003126:	2203      	movs	r2, #3
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e002      	b.n	8003132 <mvh_hdl_running+0x2a>
	}
	else
	{
		MVT_HDL_current_state = MVT_HDL_STOP;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <mvh_hdl_running+0x34>)
 800312e:	2204      	movs	r2, #4
 8003130:	701a      	strb	r2, [r3, #0]
	}


	return mvt_hdl_log;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000008b 	.word	0x2000008b

08003140 <mvh_hdl_stop>:

MVT_HDL_DRIVER_ERROR mvh_hdl_stop(ROBOT6900_HANDLER* h_robot6900)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	decelerrate(h_robot6900, MOTOR_BOTH, &h_robot6900->robot_state->motor_0_duty);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	3305      	adds	r3, #5
 800314e:	461a      	mov	r2, r3
 8003150:	2109      	movs	r1, #9
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f88a 	bl	800326c <decelerrate>
	motor_start_stop(MOTOR_BOTH, FPGA_CMD_V_STOP);
 8003158:	2100      	movs	r1, #0
 800315a:	2009      	movs	r0, #9
 800315c:	f000 f9a7 	bl	80034ae <motor_start_stop>

	MVT_HDL_current_state = MVT_HDL_WAIT;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <mvh_hdl_stop+0x30>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
}
 8003166:	bf00      	nop
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	2000008b 	.word	0x2000008b

08003174 <motor_ramp>:

void motor_ramp(ROBOT6900_HANDLER* h_robot6900)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	static uint32_t last_ramp_time_ms = 0;
	// Motor spinning direction during previous ramp
	static uint8_t last_dir = FPGA_CMD_V_DIR0;

	// Checking time. Duty cycle changing each RAMP_INT_MS milliseconds (5000)
	if(ABS(h_robot6900->robot_state->time_ms, last_ramp_time_ms) > RAMP_INT_MS)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <motor_ramp+0xf0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d80d      	bhi.n	80031a6 <motor_ramp+0x32>
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <motor_ramp+0xf0>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	bf8c      	ite	hi
 800319e:	2301      	movhi	r3, #1
 80031a0:	2300      	movls	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e00c      	b.n	80031c0 <motor_ramp+0x4c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <motor_ramp+0xf0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	bf8c      	ite	hi
 80031ba:	2301      	movhi	r3, #1
 80031bc:	2300      	movls	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d04b      	beq.n	800325c <motor_ramp+0xe8>
	{

		// Max duty cycle of 60%
		if(h_robot6900->robot_state->motor_0_duty >= 60)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	795b      	ldrb	r3, [r3, #5]
 80031ca:	2b3b      	cmp	r3, #59	; 0x3b
 80031cc:	d92a      	bls.n	8003224 <motor_ramp+0xb0>
		{
			// Prepare next ramp sequence

			// Decelerating motor by decreasing duty
			decelerrate(h_robot6900, MOTOR_BOTH, &(h_robot6900->robot_state->motor_0_duty));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	3305      	adds	r3, #5
 80031d4:	461a      	mov	r2, r3
 80031d6:	2109      	movs	r1, #9
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f847 	bl	800326c <decelerrate>
			// Send SPI Stop motors command
			motor_start_stop(MOTOR_BOTH, FPGA_CMD_V_STOP);
 80031de:	2100      	movs	r1, #0
 80031e0:	2009      	movs	r0, #9
 80031e2:	f000 f964 	bl	80034ae <motor_start_stop>
			// Hard coded delay to avoid inertia issue with spinning motors
			motor_delay(h_robot6900, MOTOR_DELAY_MS);
 80031e6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f867 	bl	80032be <motor_delay>
			// Change motors spinning direction
			last_dir = (last_dir == FPGA_CMD_V_DIR0 ? FPGA_CMD_V_DIR1 : FPGA_CMD_V_DIR0);
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <motor_ramp+0xf4>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <motor_ramp+0xf4>)
 8003202:	701a      	strb	r2, [r3, #0]
			motor_set_dir(MOTOR_BOTH, last_dir);
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <motor_ramp+0xf4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	2009      	movs	r0, #9
 800320c:	f000 f8e2 	bl	80033d4 <motor_set_dir>
			// Hard coded delay to avoid inertia issue with spinning motors
			motor_delay(h_robot6900, MOTOR_DELAY_MS);
 8003210:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f852 	bl	80032be <motor_delay>
			// Send SPI Start motors command
			motor_start_stop(MOTOR_BOTH, FPGA_CMD_V_START);
 800321a:	2101      	movs	r1, #1
 800321c:	2009      	movs	r0, #9
 800321e:	f000 f946 	bl	80034ae <motor_start_stop>
 8003222:	e00f      	b.n	8003244 <motor_ramp+0xd0>
		}
		else
		{
			// Accelerate motors increasing duty
			h_robot6900->robot_state->motor_0_duty += RAMP_DUTY_OFFSET;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	795a      	ldrb	r2, [r3, #5]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	3205      	adds	r2, #5
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	715a      	strb	r2, [r3, #5]
			h_robot6900->robot_state->motor_1_duty += RAMP_DUTY_OFFSET;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	799a      	ldrb	r2, [r3, #6]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	3205      	adds	r2, #5
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	719a      	strb	r2, [r3, #6]
		}

		// Update last ramp timer
		last_ramp_time_ms = h_robot6900->robot_state->time_ms;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	4a06      	ldr	r2, [pc, #24]	; (8003264 <motor_ramp+0xf0>)
 800324c:	6013      	str	r3, [r2, #0]

		// Send SPI command for duty cycle on both motors
		motor_set_duty(MOTOR_BOTH, h_robot6900->robot_state->motor_0_duty);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	795b      	ldrb	r3, [r3, #5]
 8003254:	4619      	mov	r1, r3
 8003256:	2009      	movs	r0, #9
 8003258:	f000 f856 	bl	8003308 <motor_set_duty>

	}


}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000008c 	.word	0x2000008c
 8003268:	20000090 	.word	0x20000090

0800326c <decelerrate>:

void decelerrate(ROBOT6900_HANDLER* h_robot6900, MOTOR_ID _motor_id, uint8_t* _duty)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	460b      	mov	r3, r1
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	72fb      	strb	r3, [r7, #11]
	do
	{
		*_duty -= DECELERATE_DUTY_OFFSET;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	3b02      	subs	r3, #2
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	701a      	strb	r2, [r3, #0]
		motor_set_duty(MOTOR_BOTH, *_duty);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	2009      	movs	r0, #9
 800328e:	f000 f83b 	bl	8003308 <motor_set_duty>
		motor_delay(h_robot6900, 500);
 8003292:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f811 	bl	80032be <motor_delay>
	}while(*_duty > DECELERATE_DUTY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d8ea      	bhi.n	800327a <decelerrate+0xe>

	motor_start_stop(MOTOR_BOTH, FPGA_CMD_V_STOP);
 80032a4:	2100      	movs	r1, #0
 80032a6:	2009      	movs	r0, #9
 80032a8:	f000 f901 	bl	80034ae <motor_start_stop>

	//h_robot6900->robot_state->motor_0_duty = *_duty;
	h_robot6900->robot_state->motor_1_duty = *_duty;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	719a      	strb	r2, [r3, #6]
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <motor_delay>:

void motor_delay(ROBOT6900_HANDLER* h_robot6900, uint32_t _delay)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
	uint32_t _time = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
	_time = h_robot6900->robot_state->time_ms;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	60fb      	str	r3, [r7, #12]

	// Delay
	do{}while(ABS(h_robot6900->robot_state->time_ms, _time) < _delay);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d305      	bcc.n	80032ec <motor_delay+0x2e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	e004      	b.n	80032f6 <motor_delay+0x38>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d3eb      	bcc.n	80032d4 <motor_delay+0x16>
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <motor_set_duty>:

void motor_set_duty(MOTOR_ID _motor_id, uint8_t _duty)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	460a      	mov	r2, r1
 8003312:	71fb      	strb	r3, [r7, #7]
 8003314:	4613      	mov	r3, r2
 8003316:	71bb      	strb	r3, [r7, #6]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_OK;
 8003318:	2302      	movs	r3, #2
 800331a:	73bb      	strb	r3, [r7, #14]

	uint8_t param_data[4];
	uint8_t _size = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]


	if(_motor_id == MOTOR0)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <motor_set_duty+0x42>
	{
		param_data[0] = (_duty << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003326:	79bb      	ldrb	r3, [r7, #6]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	b25c      	sxtb	r4, r3
 800332c:	f44f 7060 	mov.w	r0, #896	; 0x380
 8003330:	f000 fa9c 	bl	800386c <FPGA_frame_checker>
 8003334:	4603      	mov	r3, r0
 8003336:	b25b      	sxtb	r3, r3
 8003338:	4323      	orrs	r3, r4
 800333a:	b25b      	sxtb	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	723b      	strb	r3, [r7, #8]
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 8003340:	23a7      	movs	r3, #167	; 0xa7
 8003342:	727b      	strb	r3, [r7, #9]
		_size = 1;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e034      	b.n	80033b4 <motor_set_duty+0xac>
	}
	else if(_motor_id == MOTOR1)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d111      	bne.n	8003374 <motor_set_duty+0x6c>
	{
		param_data[0] = (_duty << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003350:	79bb      	ldrb	r3, [r7, #6]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	b25c      	sxtb	r4, r3
 8003356:	f44f 7060 	mov.w	r0, #896	; 0x380
 800335a:	f000 fa87 	bl	800386c <FPGA_frame_checker>
 800335e:	4603      	mov	r3, r0
 8003360:	b25b      	sxtb	r3, r3
 8003362:	4323      	orrs	r3, r4
 8003364:	b25b      	sxtb	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	723b      	strb	r3, [r7, #8]
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 800336a:	23af      	movs	r3, #175	; 0xaf
 800336c:	727b      	strb	r3, [r7, #9]
		_size = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e01f      	b.n	80033b4 <motor_set_duty+0xac>
	}
	else
	{
		param_data[0] = (_duty << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003374:	79bb      	ldrb	r3, [r7, #6]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	b25c      	sxtb	r4, r3
 800337a:	f44f 7060 	mov.w	r0, #896	; 0x380
 800337e:	f000 fa75 	bl	800386c <FPGA_frame_checker>
 8003382:	4603      	mov	r3, r0
 8003384:	b25b      	sxtb	r3, r3
 8003386:	4323      	orrs	r3, r4
 8003388:	b25b      	sxtb	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	723b      	strb	r3, [r7, #8]
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 800338e:	23a7      	movs	r3, #167	; 0xa7
 8003390:	727b      	strb	r3, [r7, #9]

		param_data[2] = (_duty << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_DUTY_CYCLE) << 7 );	// Payload and Frame Checker
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b25c      	sxtb	r4, r3
 8003398:	f44f 7060 	mov.w	r0, #896	; 0x380
 800339c:	f000 fa66 	bl	800386c <FPGA_frame_checker>
 80033a0:	4603      	mov	r3, r0
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	4323      	orrs	r3, r4
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	72bb      	strb	r3, [r7, #10]
		param_data[3] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_DUTY_CYCLE;	// SFD + MOTOT_ID + CMD
 80033ac:	23af      	movs	r3, #175	; 0xaf
 80033ae:	72fb      	strb	r3, [r7, #11]


		_size = 2;
 80033b0:	2302      	movs	r3, #2
 80033b2:	73fb      	strb	r3, [r7, #15]


	// Send SPI Packets
	do
	{
		spi_log = spi_request(SPI_RQT_FPGA, param_data, _size);
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4619      	mov	r1, r3
 80033bc:	2001      	movs	r0, #1
 80033be:	f000 fa09 	bl	80037d4 <spi_request>
 80033c2:	4603      	mov	r3, r0
 80033c4:	73bb      	strb	r3, [r7, #14]
	}while(spi_log != SPI_DRIVER_DONE);
 80033c6:	7bbb      	ldrb	r3, [r7, #14]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d1f3      	bne.n	80033b4 <motor_set_duty+0xac>

}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <motor_set_dir>:

void motor_set_dir(MOTOR_ID _motor_id, uint8_t _dir)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71bb      	strb	r3, [r7, #6]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_OK;
 80033e4:	2302      	movs	r3, #2
 80033e6:	73bb      	strb	r3, [r7, #14]

	uint8_t param_data[4];
	uint8_t _size = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]


	if(_motor_id == MOTOR0)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <motor_set_dir+0x42>
	{
		// DIR M0 = 0
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 80033f2:	23a2      	movs	r3, #162	; 0xa2
 80033f4:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_dir << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_ROT_DIRECTION) << 7 );	// Payload and Frame Checker
 80033f6:	79bb      	ldrb	r3, [r7, #6]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	b25c      	sxtb	r4, r3
 80033fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003400:	f000 fa34 	bl	800386c <FPGA_frame_checker>
 8003404:	4603      	mov	r3, r0
 8003406:	b25b      	sxtb	r3, r3
 8003408:	4323      	orrs	r3, r4
 800340a:	b25b      	sxtb	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	723b      	strb	r3, [r7, #8]
		_size = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	e03b      	b.n	800348e <motor_set_dir+0xba>
	}
	else if(_motor_id == MOTOR1)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d111      	bne.n	8003440 <motor_set_dir+0x6c>
	{
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 800341c:	23aa      	movs	r3, #170	; 0xaa
 800341e:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_dir << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_ROT_DIRECTION) << 7 );	// Payload and Frame Checker
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	b25c      	sxtb	r4, r3
 8003426:	f44f 7080 	mov.w	r0, #256	; 0x100
 800342a:	f000 fa1f 	bl	800386c <FPGA_frame_checker>
 800342e:	4603      	mov	r3, r0
 8003430:	b25b      	sxtb	r3, r3
 8003432:	4323      	orrs	r3, r4
 8003434:	b25b      	sxtb	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	723b      	strb	r3, [r7, #8]
		_size = 1;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e026      	b.n	800348e <motor_set_dir+0xba>
	}
	else
	{
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 8003440:	23a2      	movs	r3, #162	; 0xa2
 8003442:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_dir << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_ROT_DIRECTION) << 7 );	// Payload and Frame Checker
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	b25c      	sxtb	r4, r3
 800344a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800344e:	f000 fa0d 	bl	800386c <FPGA_frame_checker>
 8003452:	4603      	mov	r3, r0
 8003454:	b25b      	sxtb	r3, r3
 8003456:	4323      	orrs	r3, r4
 8003458:	b25b      	sxtb	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	723b      	strb	r3, [r7, #8]

		_dir = (_dir == 1 ? 0 : 1);
 800345e:	79bb      	ldrb	r3, [r7, #6]
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	71bb      	strb	r3, [r7, #6]
		param_data[3] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 800346c:	23aa      	movs	r3, #170	; 0xaa
 800346e:	72fb      	strb	r3, [r7, #11]
		param_data[2] = ( _dir << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_ROT_DIRECTION) << 7 );	// Payload and Frame Checker
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b25c      	sxtb	r4, r3
 8003476:	f44f 7080 	mov.w	r0, #256	; 0x100
 800347a:	f000 f9f7 	bl	800386c <FPGA_frame_checker>
 800347e:	4603      	mov	r3, r0
 8003480:	b25b      	sxtb	r3, r3
 8003482:	4323      	orrs	r3, r4
 8003484:	b25b      	sxtb	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	72bb      	strb	r3, [r7, #10]
		_size = 2;
 800348a:	2302      	movs	r3, #2
 800348c:	73fb      	strb	r3, [r7, #15]


	// Send SPI Packets
	do
	{
		spi_log = spi_request(SPI_RQT_FPGA, param_data, _size);
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	4619      	mov	r1, r3
 8003496:	2001      	movs	r0, #1
 8003498:	f000 f99c 	bl	80037d4 <spi_request>
 800349c:	4603      	mov	r3, r0
 800349e:	73bb      	strb	r3, [r7, #14]
	}while(spi_log != SPI_DRIVER_DONE);
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d1f3      	bne.n	800348e <motor_set_dir+0xba>

}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}

080034ae <motor_start_stop>:

void motor_start_stop(MOTOR_ID _motor_id, uint8_t _start)
{
 80034ae:	b590      	push	{r4, r7, lr}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	460a      	mov	r2, r1
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71bb      	strb	r3, [r7, #6]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_OK;
 80034be:	2302      	movs	r3, #2
 80034c0:	73bb      	strb	r3, [r7, #14]

	uint8_t param_data[4];
	uint8_t _size = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]


	if(_motor_id == MOTOR0)
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d110      	bne.n	80034ee <motor_start_stop+0x40>
	{
		// DIR M0 = 0
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 80034cc:	23a1      	movs	r3, #161	; 0xa1
 80034ce:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_start << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 80034d0:	79bb      	ldrb	r3, [r7, #6]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	b25c      	sxtb	r4, r3
 80034d6:	2080      	movs	r0, #128	; 0x80
 80034d8:	f000 f9c8 	bl	800386c <FPGA_frame_checker>
 80034dc:	4603      	mov	r3, r0
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	4323      	orrs	r3, r4
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	723b      	strb	r3, [r7, #8]
		_size = 1;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e031      	b.n	8003552 <motor_start_stop+0xa4>
	}
	else if(_motor_id == MOTOR1)
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d110      	bne.n	8003516 <motor_start_stop+0x68>
	{
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 80034f4:	23a9      	movs	r3, #169	; 0xa9
 80034f6:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_start << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	b25c      	sxtb	r4, r3
 80034fe:	2080      	movs	r0, #128	; 0x80
 8003500:	f000 f9b4 	bl	800386c <FPGA_frame_checker>
 8003504:	4603      	mov	r3, r0
 8003506:	b25b      	sxtb	r3, r3
 8003508:	4323      	orrs	r3, r4
 800350a:	b25b      	sxtb	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	723b      	strb	r3, [r7, #8]
		_size = 1;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e01d      	b.n	8003552 <motor_start_stop+0xa4>
	}
	else
	{
		param_data[1] = FPGA_SFD | FPGA_CMD_MOTOR_ID_0 | FPGA_CMD_START_STOP;	// SFD + MOTOT_ID + CMD
 8003516:	23a1      	movs	r3, #161	; 0xa1
 8003518:	727b      	strb	r3, [r7, #9]
		param_data[0] = (_start << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 800351a:	79bb      	ldrb	r3, [r7, #6]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	b25c      	sxtb	r4, r3
 8003520:	2080      	movs	r0, #128	; 0x80
 8003522:	f000 f9a3 	bl	800386c <FPGA_frame_checker>
 8003526:	4603      	mov	r3, r0
 8003528:	b25b      	sxtb	r3, r3
 800352a:	4323      	orrs	r3, r4
 800352c:	b25b      	sxtb	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	723b      	strb	r3, [r7, #8]

		param_data[3] = FPGA_SFD | FPGA_CMD_MOTOR_ID_1 | FPGA_CMD_ROT_DIRECTION;	// SFD + MOTOT_ID + CMD
 8003532:	23aa      	movs	r3, #170	; 0xaa
 8003534:	72fb      	strb	r3, [r7, #11]
		param_data[2] = (_start << 1 ) | FPGA_frame_checker(  ((0xFFFF) & FPGA_CMD_START_STOP) << 7 );	// Payload and Frame Checker
 8003536:	79bb      	ldrb	r3, [r7, #6]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	b25c      	sxtb	r4, r3
 800353c:	2080      	movs	r0, #128	; 0x80
 800353e:	f000 f995 	bl	800386c <FPGA_frame_checker>
 8003542:	4603      	mov	r3, r0
 8003544:	b25b      	sxtb	r3, r3
 8003546:	4323      	orrs	r3, r4
 8003548:	b25b      	sxtb	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	72bb      	strb	r3, [r7, #10]
		_size = 2;
 800354e:	2302      	movs	r3, #2
 8003550:	73fb      	strb	r3, [r7, #15]


	// Send SPI Packets
	do
	{
		spi_log = spi_request(SPI_RQT_FPGA, param_data, _size);
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	4619      	mov	r1, r3
 800355a:	2001      	movs	r0, #1
 800355c:	f000 f93a 	bl	80037d4 <spi_request>
 8003560:	4603      	mov	r3, r0
 8003562:	73bb      	strb	r3, [r7, #14]
	}while(spi_log != SPI_DRIVER_DONE);
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d1f3      	bne.n	8003552 <motor_start_stop+0xa4>

}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
	...

08003574 <ADC_Conversion_INT>:

uint16_t adc_values[4];
uint8_t are_ready = 0;

void ADC_Conversion_INT(ADC_HandleTypeDef* hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

	adc_values[0] = HAL_ADC_GetValue(_hadc1);
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <ADC_Conversion_INT+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fe6e 	bl	8004262 <HAL_ADC_GetValue>
 8003586:	4603      	mov	r3, r0
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <ADC_Conversion_INT+0x48>)
 800358c:	801a      	strh	r2, [r3, #0]
	adc_values[1] = HAL_ADC_GetValue(_hadc1);
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <ADC_Conversion_INT+0x44>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fe65 	bl	8004262 <HAL_ADC_GetValue>
 8003598:	4603      	mov	r3, r0
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <ADC_Conversion_INT+0x48>)
 800359e:	805a      	strh	r2, [r3, #2]
	//adc_values[2] = HAL_ADC_GetValue(_hadc1);
	//adc_values[3] = HAL_ADC_GetValue(_hadc1);

	HAL_ADC_Stop_IT(_hadc1);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <ADC_Conversion_INT+0x44>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fe1f 	bl	80041e8 <HAL_ADC_Stop_IT>
	are_ready = 1;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <ADC_Conversion_INT+0x4c>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200026c0 	.word	0x200026c0
 80035bc:	200026c4 	.word	0x200026c4
 80035c0:	20000091 	.word	0x20000091

080035c4 <init_current_probes>:

void init_current_probes(ADC_HandleTypeDef* hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	_hadc1 = hadc;
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <init_current_probes+0x40>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6013      	str	r3, [r2, #0]

	adc_values[0] = 0;
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <init_current_probes+0x44>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	801a      	strh	r2, [r3, #0]
	adc_values[1] = 0;
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <init_current_probes+0x44>)
 80035da:	2200      	movs	r2, #0
 80035dc:	805a      	strh	r2, [r3, #2]
	adc_values[2] = 0;
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <init_current_probes+0x44>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	809a      	strh	r2, [r3, #4]
	adc_values[3] = 0;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <init_current_probes+0x44>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	80da      	strh	r2, [r3, #6]

	HAL_ADC_GetValue(_hadc1);
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <init_current_probes+0x40>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fe37 	bl	8004262 <HAL_ADC_GetValue>

	are_ready = 0;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <init_current_probes+0x48>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200026c0 	.word	0x200026c0
 8003608:	200026c4 	.word	0x200026c4
 800360c:	20000091 	.word	0x20000091

08003610 <current_probes_process>:

void current_probes_process(ROBOT6900_HANDLER* h_robot6900)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	static uint16_t _delay = 0;

	if(ABS(h_robot6900->robot_state->time_ms, _delay) >= CURRENT_PROBES_READ_DELAY_MS)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4a58      	ldr	r2, [pc, #352]	; (8003780 <current_probes_process+0x170>)
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	4293      	cmp	r3, r2
 8003624:	d80e      	bhi.n	8003644 <current_probes_process+0x34>
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <current_probes_process+0x170>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003638:	4293      	cmp	r3, r2
 800363a:	bf8c      	ite	hi
 800363c:	2301      	movhi	r3, #1
 800363e:	2300      	movls	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e00c      	b.n	800365e <current_probes_process+0x4e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4a4d      	ldr	r2, [pc, #308]	; (8003780 <current_probes_process+0x170>)
 800364c:	8812      	ldrh	r2, [r2, #0]
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003654:	4293      	cmp	r3, r2
 8003656:	bf8c      	ite	hi
 8003658:	2301      	movhi	r3, #1
 800365a:	2300      	movls	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <current_probes_process+0x6a>
	{
		//HAL_ADC_PollForConversion(_hadc1, HAL_MAX_DELAY);
		HAL_ADC_Start_IT(_hadc1);
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <current_probes_process+0x174>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc7e 	bl	8003f68 <HAL_ADC_Start_IT>
		_delay = h_robot6900->robot_state->time_ms;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	b29a      	uxth	r2, r3
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <current_probes_process+0x170>)
 8003676:	801a      	strh	r2, [r3, #0]
			h_robot6900->robot_state->motor_0_current_mA = TO_CURRENT_MA(adc_values[0]);
			h_robot6900->robot_state->motor_1_current_mA = TO_CURRENT_MA(adc_values[1]);
			are_ready = 0;
		}
	}
}
 8003678:	e072      	b.n	8003760 <current_probes_process+0x150>
		if(are_ready)
 800367a:	4b43      	ldr	r3, [pc, #268]	; (8003788 <current_probes_process+0x178>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06e      	beq.n	8003760 <current_probes_process+0x150>
			h_robot6900->robot_state->motor_0_current_mA = TO_CURRENT_MA(adc_values[0]);
 8003682:	4b42      	ldr	r3, [pc, #264]	; (800378c <current_probes_process+0x17c>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fef0 	bl	800046c <__aeabi_i2d>
 800368c:	a336      	add	r3, pc, #216	; (adr r3, 8003768 <current_probes_process+0x158>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc ff55 	bl	8000540 <__aeabi_dmul>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	4618      	mov	r0, r3
 800369c:	4621      	mov	r1, r4
 800369e:	a334      	add	r3, pc, #208	; (adr r3, 8003770 <current_probes_process+0x160>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fd f876 	bl	8000794 <__aeabi_ddiv>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	4618      	mov	r0, r3
 80036ae:	4621      	mov	r1, r4
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <current_probes_process+0x180>)
 80036b6:	f7fc ff43 	bl	8000540 <__aeabi_dmul>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	4618      	mov	r0, r3
 80036c0:	4621      	mov	r1, r4
 80036c2:	a32d      	add	r3, pc, #180	; (adr r3, 8003778 <current_probes_process+0x168>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fd f864 	bl	8000794 <__aeabi_ddiv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	4618      	mov	r0, r3
 80036d2:	4621      	mov	r1, r4
 80036d4:	f7fd f9ce 	bl	8000a74 <__aeabi_d2f>
 80036d8:	ee07 0a90 	vmov	s15, r0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e4:	ee17 2a90 	vmov	r2, s15
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f8a3 2007 	strh.w	r2, [r3, #7]
			h_robot6900->robot_state->motor_1_current_mA = TO_CURRENT_MA(adc_values[1]);
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <current_probes_process+0x17c>)
 80036f0:	885b      	ldrh	r3, [r3, #2]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc feba 	bl	800046c <__aeabi_i2d>
 80036f8:	a31b      	add	r3, pc, #108	; (adr r3, 8003768 <current_probes_process+0x158>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc ff1f 	bl	8000540 <__aeabi_dmul>
 8003702:	4603      	mov	r3, r0
 8003704:	460c      	mov	r4, r1
 8003706:	4618      	mov	r0, r3
 8003708:	4621      	mov	r1, r4
 800370a:	a319      	add	r3, pc, #100	; (adr r3, 8003770 <current_probes_process+0x160>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fd f840 	bl	8000794 <__aeabi_ddiv>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <current_probes_process+0x180>)
 8003722:	f7fc ff0d 	bl	8000540 <__aeabi_dmul>
 8003726:	4603      	mov	r3, r0
 8003728:	460c      	mov	r4, r1
 800372a:	4618      	mov	r0, r3
 800372c:	4621      	mov	r1, r4
 800372e:	a312      	add	r3, pc, #72	; (adr r3, 8003778 <current_probes_process+0x168>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f7fd f82e 	bl	8000794 <__aeabi_ddiv>
 8003738:	4603      	mov	r3, r0
 800373a:	460c      	mov	r4, r1
 800373c:	4618      	mov	r0, r3
 800373e:	4621      	mov	r1, r4
 8003740:	f7fd f998 	bl	8000a74 <__aeabi_d2f>
 8003744:	ee07 0a90 	vmov	s15, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003750:	ee17 2a90 	vmov	r2, s15
 8003754:	b292      	uxth	r2, r2
 8003756:	f8a3 2009 	strh.w	r2, [r3, #9]
			are_ready = 0;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <current_probes_process+0x178>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	66666666 	.word	0x66666666
 800376c:	400a6666 	.word	0x400a6666
 8003770:	00000000 	.word	0x00000000
 8003774:	40affe00 	.word	0x40affe00
 8003778:	9999999a 	.word	0x9999999a
 800377c:	3fc99999 	.word	0x3fc99999
 8003780:	20000092 	.word	0x20000092
 8003784:	200026c0 	.word	0x200026c0
 8003788:	20000091 	.word	0x20000091
 800378c:	200026c4 	.word	0x200026c4
 8003790:	408f4000 	.word	0x408f4000

08003794 <HAL_SPI_TxCpltCallback>:
#	NVIC Interrupt routines
#
############################################################################
*/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	spi_data_ready = 1;
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_SPI_TxCpltCallback+0x1c>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000095 	.word	0x20000095

080037b4 <spi_driver_init>:
#
############################################################################
*/

void spi_driver_init(SPI_HandleTypeDef *hspi1)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	// Initiate ptr
	_hspi1 = hspi1;
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <spi_driver_init+0x1c>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
	// Test FPGA Data
//	fpga_data[0] = FPGA_SFD | FPGA_CMD_START_STOP;	// SFD and CMD
//	fpga_data[1] = 0x02 | FPGA_frame_checker( ( ((0xFFFF) & FPGA_CMD_START_STOP) << 7 ) | 0x02);	// Payload and Frame Checker


}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200026cc 	.word	0x200026cc

080037d4 <spi_request>:

SPI_DRIVER_ERROR spi_request(SPI_RQT_TYPE* _request_type, uint8_t* _data, uint8_t size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
	SPI_DRIVER_ERROR spi_log = SPI_DRIVER_BUSY;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]

	// Request new SPI transfer
	if(spi_driver_current_state == SPI_READY)
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <spi_request+0x88>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d113      	bne.n	8003816 <spi_request+0x42>
	{
		// Select Slave
		//select_Slave(_request_type, 0);
		HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin, GPIO_PIN_RESET);
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037f4:	481a      	ldr	r0, [pc, #104]	; (8003860 <spi_request+0x8c>)
 80037f6:	f002 fc69 	bl	80060cc <HAL_GPIO_WritePin>

		// Start SPI exchange in NVIC mode
//		HAL_SPI_TransmitReceive_IT(_hspi1, _data, getBuffer(_request_type), size);
		HAL_SPI_Transmit_IT(_hspi1, _data, size);
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <spi_request+0x90>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	79fa      	ldrb	r2, [r7, #7]
 8003800:	b292      	uxth	r2, r2
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f004 f9fd 	bl	8007c04 <HAL_SPI_Transmit_IT>

		spi_log = SPI_DRIVER_BUSY;
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]
		spi_driver_current_state = SPI_PROCESSING;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <spi_request+0x88>)
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e01c      	b.n	8003850 <spi_request+0x7c>
	}
	else if(spi_driver_current_state == SPI_PROCESSING)
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <spi_request+0x88>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d113      	bne.n	8003846 <spi_request+0x72>
	{
		// Data finally received
		if(spi_data_ready == 1)
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <spi_request+0x94>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d113      	bne.n	8003850 <spi_request+0x7c>
		{
			// Deselect the Slave
			//select_Slave(_request_type, 1);
			HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin, GPIO_PIN_SET);
 8003828:	2201      	movs	r2, #1
 800382a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800382e:	480c      	ldr	r0, [pc, #48]	; (8003860 <spi_request+0x8c>)
 8003830:	f002 fc4c 	bl	80060cc <HAL_GPIO_WritePin>

			// Reset flag
			spi_data_ready = 0;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <spi_request+0x94>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
			// Set SPI Handler work task to DONE
			spi_driver_current_state = SPI_DONE;
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <spi_request+0x88>)
 800383c:	2202      	movs	r2, #2
 800383e:	701a      	strb	r2, [r3, #0]

			spi_log = SPI_DRIVER_DONE;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
 8003844:	e004      	b.n	8003850 <spi_request+0x7c>
		}

	}
	else
	{
		spi_log = SPI_DRIVER_OK;
 8003846:	2302      	movs	r3, #2
 8003848:	75fb      	strb	r3, [r7, #23]
		// Set SPI Handler available for new transfer
		spi_driver_current_state = SPI_READY;
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <spi_request+0x88>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
	}

	return spi_log;
 8003850:	7dfb      	ldrb	r3, [r7, #23]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000094 	.word	0x20000094
 8003860:	48000c00 	.word	0x48000c00
 8003864:	200026cc 	.word	0x200026cc
 8003868:	20000095 	.word	0x20000095

0800386c <FPGA_frame_checker>:

/*
 * Process bit parity for Frame Checker bit on FPGA packet
 * Bit parity on 10 bits value x
 */
uint8_t FPGA_frame_checker(uint16_t x){
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
			(x>>5) ^
			(x>>4) ^
			(x>>3) ^
			(x>>2) ^
			(x>>1) ^
			(x) ) & 1;
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	0a5b      	lsrs	r3, r3, #9
 800387a:	b29b      	uxth	r3, r3
 800387c:	b2da      	uxtb	r2, r3
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4053      	eors	r3, r2
 8003888:	b2da      	uxtb	r2, r3
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	09db      	lsrs	r3, r3, #7
 800388e:	b29b      	uxth	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4053      	eors	r3, r2
 8003894:	b2da      	uxtb	r2, r3
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	b29b      	uxth	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4053      	eors	r3, r2
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4053      	eors	r3, r2
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4053      	eors	r3, r2
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4053      	eors	r3, r2
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4053      	eors	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4053      	eors	r3, r2
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4053      	eors	r3, r2
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <washer_init>:
ADC_HandleTypeDef* _hadc1;

uint16_t humid;

void washer_init(ADC_HandleTypeDef* p_hadc1)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	_hadc1 = p_hadc1;
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <washer_init+0x20>)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6013      	str	r3, [r2, #0]

	initialiser_pompe();
 8003906:	f000 f835 	bl	8003974 <initialiser_pompe>
	initialiser_brosse();
 800390a:	f000 f83f 	bl	800398c <initialiser_brosse>

	//HAL_ADC_Start(_hadc1);
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200026c0 	.word	0x200026c0

0800391c <washer_process>:

void washer_process(ROBOT6900_HANDLER* h_robot6900)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	static uint16_t _delay = 0;
	static uint8_t enable = 0;
	static uint8_t _mode = 0;

	if(h_robot6900->robot_state->Etat_Washer != Washer_Stop)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <washer_process+0x3a>
//				enable = 0;
//			}
//			_delay = h_robot6900->robot_state->time_ms;
//		}

		if(h_robot6900->robot_state->Etat_Washer == Washer_Brosse_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <washer_process+0x22>
		{
			activer_brosse();
 8003938:	f000 f862 	bl	8003a00 <activer_brosse>
 800393c:	e001      	b.n	8003942 <washer_process+0x26>
		}
		else
		{
			desactiver_brosse();
 800393e:	f000 f86b 	bl	8003a18 <desactiver_brosse>
		}

		if(h_robot6900->robot_state->Etat_Washer == Washer_Pump_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d102      	bne.n	8003952 <washer_process+0x36>
		{
			demarrer_pompe();
 800394c:	f000 f82c 	bl	80039a8 <demarrer_pompe>
 8003950:	e001      	b.n	8003956 <washer_process+0x3a>
		}
		else
		{
			eteindre_pompe();
 8003952:	f000 f849 	bl	80039e8 <eteindre_pompe>
		}
	}

	if(h_robot6900->robot_state->Etat_Washer == Washer_UVC_ON)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	791b      	ldrb	r3, [r3, #4]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d102      	bne.n	8003966 <washer_process+0x4a>
	{
		enable_UVC();
 8003960:	f000 f866 	bl	8003a30 <enable_UVC>
	}
	else
	{
		disable_UVC();
	}
}
 8003964:	e001      	b.n	800396a <washer_process+0x4e>
		disable_UVC();
 8003966:	f000 f86f 	bl	8003a48 <disable_UVC>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <initialiser_pompe>:
	HAL_ADC_PollForConversion(_hadc1, HAL_MAX_DELAY);
	humid = HAL_ADC_GetValue(_hadc1);
}

void initialiser_pompe()
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(relais_GPIO_Port , relais_Pin , GPIO_PIN_SET); //relais off initialement
 8003978:	2201      	movs	r2, #1
 800397a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800397e:	4802      	ldr	r0, [pc, #8]	; (8003988 <initialiser_pompe+0x14>)
 8003980:	f002 fba4 	bl	80060cc <HAL_GPIO_WritePin>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	48001400 	.word	0x48001400

0800398c <initialiser_brosse>:

void initialiser_brosse()
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(brosse_GPIO_Port , brosse_Pin , GPIO_PIN_RESET); //brosse inactive initialement
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003996:	4802      	ldr	r0, [pc, #8]	; (80039a0 <initialiser_brosse+0x14>)
 8003998:	f002 fb98 	bl	80060cc <HAL_GPIO_WritePin>
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	48001400 	.word	0x48001400
 80039a4:	00000000 	.word	0x00000000

080039a8 <demarrer_pompe>:

void demarrer_pompe()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  if (humid < 3000.0)
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <demarrer_pompe+0x38>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fd5b 	bl	800046c <__aeabi_i2d>
 80039b6:	a308      	add	r3, pc, #32	; (adr r3, 80039d8 <demarrer_pompe+0x30>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fd f832 	bl	8000a24 <__aeabi_dcmplt>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d100      	bne.n	80039c8 <demarrer_pompe+0x20>
  }
  else
  {
		  //HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,1); //Allumer LED: reservoir vide
  }
}
 80039c6:	e005      	b.n	80039d4 <demarrer_pompe+0x2c>
		  HAL_GPIO_WritePin(relais_GPIO_Port , relais_Pin , GPIO_PIN_RESET); //relais ferme: Allumer pompe
 80039c8:	2200      	movs	r2, #0
 80039ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039ce:	4805      	ldr	r0, [pc, #20]	; (80039e4 <demarrer_pompe+0x3c>)
 80039d0:	f002 fb7c 	bl	80060cc <HAL_GPIO_WritePin>
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00000000 	.word	0x00000000
 80039dc:	40a77000 	.word	0x40a77000
 80039e0:	200026f2 	.word	0x200026f2
 80039e4:	48001400 	.word	0x48001400

080039e8 <eteindre_pompe>:

void eteindre_pompe()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(relais_GPIO_Port , relais_Pin , GPIO_PIN_SET); //relais ouvert: Eteindre pompe
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039f2:	4802      	ldr	r0, [pc, #8]	; (80039fc <eteindre_pompe+0x14>)
 80039f4:	f002 fb6a 	bl	80060cc <HAL_GPIO_WritePin>
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	48001400 	.word	0x48001400

08003a00 <activer_brosse>:

void activer_brosse()
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(brosse_GPIO_Port , brosse_Pin , GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a0a:	4802      	ldr	r0, [pc, #8]	; (8003a14 <activer_brosse+0x14>)
 8003a0c:	f002 fb5e 	bl	80060cc <HAL_GPIO_WritePin>
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	48001400 	.word	0x48001400

08003a18 <desactiver_brosse>:

void desactiver_brosse()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(brosse_GPIO_Port , brosse_Pin ,GPIO_PIN_RESET);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a22:	4802      	ldr	r0, [pc, #8]	; (8003a2c <desactiver_brosse+0x14>)
 8003a24:	f002 fb52 	bl	80060cc <HAL_GPIO_WritePin>
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	48001400 	.word	0x48001400

08003a30 <enable_UVC>:

void enable_UVC()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UVC_Enable_GPIO_Port , UVC_Enable_Pin , GPIO_PIN_SET);
 8003a34:	2201      	movs	r2, #1
 8003a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a3a:	4802      	ldr	r0, [pc, #8]	; (8003a44 <enable_UVC+0x14>)
 8003a3c:	f002 fb46 	bl	80060cc <HAL_GPIO_WritePin>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	48000800 	.word	0x48000800

08003a48 <disable_UVC>:

void disable_UVC()
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UVC_Enable_GPIO_Port , UVC_Enable_Pin ,GPIO_PIN_RESET);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a52:	4802      	ldr	r0, [pc, #8]	; (8003a5c <disable_UVC+0x14>)
 8003a54:	f002 fb3a 	bl	80060cc <HAL_GPIO_WritePin>
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	48000800 	.word	0x48000800

08003a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a66:	e003      	b.n	8003a70 <LoopCopyDataInit>

08003a68 <CopyDataInit>:
  bkpt #0

.size  HardFault_Handler, .-HardFault_Handler
*/
CopyDataInit:
	ldr	r3, =_sidata
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a6e:	3104      	adds	r1, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a70:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a78:	d3f6      	bcc.n	8003a68 <CopyDataInit>
	ldr	r2, =_sbss
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a7c:	e002      	b.n	8003a84 <LoopFillZerobss>

08003a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a80:	f842 3b04 	str.w	r3, [r2], #4

08003a84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <LoopForever+0x16>)
	cmp	r2, r3
 8003a86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a88:	d3f9      	bcc.n	8003a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a8a:	f7ff fa4b 	bl	8002f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a8e:	f006 f8ef 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a92:	f7fe fb7d 	bl	8002190 <main>

08003a96 <LoopForever>:

LoopForever:
    b LoopForever
 8003a96:	e7fe      	b.n	8003a96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a98:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003a9c:	08009de0 	.word	0x08009de0
	ldr	r0, =_sdata
 8003aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003aa4:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8003aa8:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8003aac:	200026f8 	.word	0x200026f8

08003ab0 <ADC3_IRQHandler>:


    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ab0:	e7fe      	b.n	8003ab0 <ADC3_IRQHandler>
	...

08003ab4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_Init+0x28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_Init+0x28>)
 8003abe:	f043 0310 	orr.w	r3, r3, #16
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f001 fd49 	bl	800555c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f000 f808 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7fe ff3e 	bl	8002950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000

08003ae0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_InitTick+0x54>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_InitTick+0x58>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 fd6f 	bl	80055e2 <HAL_SYSTICK_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00e      	b.n	8003b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d80a      	bhi.n	8003b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	2200      	movs	r2, #0
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f001 fd29 	bl	8005572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <HAL_InitTick+0x5c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000028 	.word	0x20000028
 8003b38:	20000030 	.word	0x20000030
 8003b3c:	2000002c 	.word	0x2000002c

08003b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000030 	.word	0x20000030
 8003b64:	200026f4 	.word	0x200026f4

08003b68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	200026f4 	.word	0x200026f4

08003b80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b09a      	sub	sp, #104	; 0x68
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e1c9      	b.n	8003f5c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d176      	bne.n	8003cc8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d152      	bne.n	8003c88 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fe fecb 	bl	8002998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13b      	bne.n	8003c88 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f001 faa3 	bl	800515c <ADC_Disable>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12f      	bne.n	8003c88 <HAL_ADC_Init+0xe0>
 8003c28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d12b      	bne.n	8003c88 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c38:	f023 0302 	bic.w	r3, r3, #2
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c52:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c62:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c64:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <HAL_ADC_Init+0x2d8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a86      	ldr	r2, [pc, #536]	; (8003e84 <HAL_ADC_Init+0x2dc>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	0c9a      	lsrs	r2, r3, #18
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c7a:	e002      	b.n	8003c82 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f9      	bne.n	8003c7c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca4:	d110      	bne.n	8003cc8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f023 0312 	bic.w	r3, r3, #18
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8136 	bne.w	8003f42 <HAL_ADC_Init+0x39a>
 8003cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8131 	bne.w	8003f42 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 8129 	bne.w	8003f42 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cf8:	f043 0202 	orr.w	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d08:	d004      	beq.n	8003d14 <HAL_ADC_Init+0x16c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5e      	ldr	r2, [pc, #376]	; (8003e88 <HAL_ADC_Init+0x2e0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_Init+0x170>
 8003d14:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <HAL_ADC_Init+0x2e4>)
 8003d16:	e000      	b.n	8003d1a <HAL_ADC_Init+0x172>
 8003d18:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_ADC_Init+0x2e8>)
 8003d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d24:	d102      	bne.n	8003d2c <HAL_ADC_Init+0x184>
 8003d26:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <HAL_ADC_Init+0x2e0>)
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e01a      	b.n	8003d62 <HAL_ADC_Init+0x1ba>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a55      	ldr	r2, [pc, #340]	; (8003e88 <HAL_ADC_Init+0x2e0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d103      	bne.n	8003d3e <HAL_ADC_Init+0x196>
 8003d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e011      	b.n	8003d62 <HAL_ADC_Init+0x1ba>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_ADC_Init+0x2ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d102      	bne.n	8003d4e <HAL_ADC_Init+0x1a6>
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_ADC_Init+0x2f0>)
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e009      	b.n	8003d62 <HAL_ADC_Init+0x1ba>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <HAL_ADC_Init+0x2f0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <HAL_ADC_Init+0x1b6>
 8003d58:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <HAL_ADC_Init+0x2ec>)
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e001      	b.n	8003d62 <HAL_ADC_Init+0x1ba>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d108      	bne.n	8003d82 <HAL_ADC_Init+0x1da>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_Init+0x1da>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_ADC_Init+0x1dc>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11c      	bne.n	8003dc2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d010      	beq.n	8003db0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_ADC_Init+0x202>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Init+0x202>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_ADC_Init+0x204>
 8003daa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7e5b      	ldrb	r3, [r3, #25]
 8003dc6:	035b      	lsls	r3, r3, #13
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dcc:	2a01      	cmp	r2, #1
 8003dce:	d002      	beq.n	8003dd6 <HAL_ADC_Init+0x22e>
 8003dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_Init+0x230>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003de8:	4313      	orrs	r3, r2
 8003dea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d11b      	bne.n	8003e2e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7e5b      	ldrb	r3, [r3, #25]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	3b01      	subs	r3, #1
 8003e04:	045a      	lsls	r2, r3, #17
 8003e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e10:	e00d      	b.n	8003e2e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e1a:	f043 0220 	orr.w	r2, r3, #32
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f043 0201 	orr.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d03a      	beq.n	8003eac <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_ADC_Init+0x2ec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_ADC_Init+0x2a2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_ADC_Init+0x2f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d128      	bne.n	8003e9c <HAL_ADC_Init+0x2f4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003e52:	d012      	beq.n	8003e7a <HAL_ADC_Init+0x2d2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5c:	d00a      	beq.n	8003e74 <HAL_ADC_Init+0x2cc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003e66:	d002      	beq.n	8003e6e <HAL_ADC_Init+0x2c6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	e018      	b.n	8003ea0 <HAL_ADC_Init+0x2f8>
 8003e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e72:	e015      	b.n	8003ea0 <HAL_ADC_Init+0x2f8>
 8003e74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003e78:	e012      	b.n	8003ea0 <HAL_ADC_Init+0x2f8>
 8003e7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003e7e:	e00f      	b.n	8003ea0 <HAL_ADC_Init+0x2f8>
 8003e80:	20000028 	.word	0x20000028
 8003e84:	431bde83 	.word	0x431bde83
 8003e88:	50000100 	.word	0x50000100
 8003e8c:	50000300 	.word	0x50000300
 8003e90:	50000700 	.word	0x50000700
 8003e94:	50000400 	.word	0x50000400
 8003e98:	50000500 	.word	0x50000500
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d114      	bne.n	8003ee4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec8:	f023 0302 	bic.w	r3, r3, #2
 8003ecc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7e1b      	ldrb	r3, [r3, #24]
 8003ed2:	039a      	lsls	r2, r3, #14
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_ADC_Init+0x3bc>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10c      	bne.n	8003f1a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f023 010f 	bic.w	r1, r3, #15
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
 8003f18:	e007      	b.n	8003f2a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 020f 	bic.w	r2, r2, #15
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f023 0303 	bic.w	r3, r3, #3
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f40:	e00a      	b.n	8003f58 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f023 0312 	bic.w	r3, r3, #18
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003f58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3768      	adds	r7, #104	; 0x68
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	fff0c007 	.word	0xfff0c007

08003f68 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8123 	bne.w	80041ca <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_Start_IT+0x2a>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e11e      	b.n	80041d0 <HAL_ADC_Start_IT+0x268>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 f880 	bl	80050a0 <ADC_Enable>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 810a 	bne.w	80041c0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc8:	d004      	beq.n	8003fd4 <HAL_ADC_Start_IT+0x6c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a82      	ldr	r2, [pc, #520]	; (80041d8 <HAL_ADC_Start_IT+0x270>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d106      	bne.n	8003fe2 <HAL_ADC_Start_IT+0x7a>
 8003fd4:	4b81      	ldr	r3, [pc, #516]	; (80041dc <HAL_ADC_Start_IT+0x274>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_ADC_Start_IT+0x9a>
 8003fe0:	e005      	b.n	8003fee <HAL_ADC_Start_IT+0x86>
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_ADC_Start_IT+0x278>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_ADC_Start_IT+0x9a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ff6:	d004      	beq.n	8004002 <HAL_ADC_Start_IT+0x9a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a79      	ldr	r2, [pc, #484]	; (80041e4 <HAL_ADC_Start_IT+0x27c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d115      	bne.n	800402e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d036      	beq.n	800408a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004024:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800402c:	e02d      	b.n	800408a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004042:	d004      	beq.n	800404e <HAL_ADC_Start_IT+0xe6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a63      	ldr	r2, [pc, #396]	; (80041d8 <HAL_ADC_Start_IT+0x270>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10a      	bne.n	8004064 <HAL_ADC_Start_IT+0xfc>
 800404e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_ADC_Start_IT+0x10e>
 8004064:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <HAL_ADC_Start_IT+0x27c>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004082:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d106      	bne.n	80040a6 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f023 0206 	bic.w	r2, r3, #6
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44
 80040a4:	e002      	b.n	80040ac <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	221c      	movs	r2, #28
 80040ba:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d110      	bne.n	80040e6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	605a      	str	r2, [r3, #4]
          break;
 80040e4:	e008      	b.n	80040f8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 020c 	orr.w	r2, r2, #12
 80040f4:	605a      	str	r2, [r3, #4]
          break;
 80040f6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004118:	d004      	beq.n	8004124 <HAL_ADC_Start_IT+0x1bc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <HAL_ADC_Start_IT+0x270>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d106      	bne.n	8004132 <HAL_ADC_Start_IT+0x1ca>
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_ADC_Start_IT+0x274>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2b00      	cmp	r3, #0
 800412e:	d03e      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 8004130:	e005      	b.n	800413e <HAL_ADC_Start_IT+0x1d6>
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_ADC_Start_IT+0x278>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	2b00      	cmp	r3, #0
 800413c:	d037      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004146:	d004      	beq.n	8004152 <HAL_ADC_Start_IT+0x1ea>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_ADC_Start_IT+0x270>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d106      	bne.n	8004160 <HAL_ADC_Start_IT+0x1f8>
 8004152:	4b22      	ldr	r3, [pc, #136]	; (80041dc <HAL_ADC_Start_IT+0x274>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2b05      	cmp	r3, #5
 800415c:	d027      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 800415e:	e005      	b.n	800416c <HAL_ADC_Start_IT+0x204>
 8004160:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <HAL_ADC_Start_IT+0x278>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2b05      	cmp	r3, #5
 800416a:	d020      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADC_Start_IT+0x218>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_ADC_Start_IT+0x270>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d106      	bne.n	800418e <HAL_ADC_Start_IT+0x226>
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <HAL_ADC_Start_IT+0x274>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b09      	cmp	r3, #9
 800418a:	d010      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 800418c:	e005      	b.n	800419a <HAL_ADC_Start_IT+0x232>
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_ADC_Start_IT+0x278>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2b09      	cmp	r3, #9
 8004198:	d009      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a2:	d004      	beq.n	80041ae <HAL_ADC_Start_IT+0x246>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_ADC_Start_IT+0x27c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10f      	bne.n	80041ce <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0204 	orr.w	r2, r2, #4
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	e006      	b.n	80041ce <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041c8:	e001      	b.n	80041ce <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	50000100 	.word	0x50000100
 80041dc:	50000300 	.word	0x50000300
 80041e0:	50000700 	.word	0x50000700
 80041e4:	50000400 	.word	0x50000400

080041e8 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_Stop_IT+0x1a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e02b      	b.n	800425a <HAL_ADC_Stop_IT+0x72>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800420a:	216c      	movs	r1, #108	; 0x6c
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f805 	bl	800521c <ADC_ConversionStop>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d119      	bne.n	8004250 <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 021c 	bic.w	r2, r2, #28
 800422a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 ff95 	bl	800515c <ADC_Disable>
 8004232:	4603      	mov	r3, r0
 8004234:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d106      	bne.n	80042ac <HAL_ADC_IRQHandler+0x30>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d00f      	beq.n	80042cc <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	f040 80c0 	bne.w	800443c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	f040 80b8 	bne.w	800443c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ec:	d004      	beq.n	80042f8 <HAL_ADC_IRQHandler+0x7c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a95      	ldr	r2, [pc, #596]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d106      	bne.n	8004306 <HAL_ADC_IRQHandler+0x8a>
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2b00      	cmp	r3, #0
 8004302:	d03e      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004304:	e005      	b.n	8004312 <HAL_ADC_IRQHandler+0x96>
 8004306:	4b92      	ldr	r3, [pc, #584]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2b00      	cmp	r3, #0
 8004310:	d037      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800431a:	d004      	beq.n	8004326 <HAL_ADC_IRQHandler+0xaa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a89      	ldr	r2, [pc, #548]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d106      	bne.n	8004334 <HAL_ADC_IRQHandler+0xb8>
 8004326:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2b05      	cmp	r3, #5
 8004330:	d027      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004332:	e005      	b.n	8004340 <HAL_ADC_IRQHandler+0xc4>
 8004334:	4b86      	ldr	r3, [pc, #536]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2b05      	cmp	r3, #5
 800433e:	d020      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004348:	d004      	beq.n	8004354 <HAL_ADC_IRQHandler+0xd8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7e      	ldr	r2, [pc, #504]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d106      	bne.n	8004362 <HAL_ADC_IRQHandler+0xe6>
 8004354:	4b7d      	ldr	r3, [pc, #500]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2b09      	cmp	r3, #9
 800435e:	d010      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004360:	e005      	b.n	800436e <HAL_ADC_IRQHandler+0xf2>
 8004362:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2b09      	cmp	r3, #9
 800436c:	d009      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004376:	d004      	beq.n	8004382 <HAL_ADC_IRQHandler+0x106>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a75      	ldr	r2, [pc, #468]	; (8004554 <HAL_ADC_IRQHandler+0x2d8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d104      	bne.n	800438c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e00f      	b.n	80043ac <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004394:	d004      	beq.n	80043a0 <HAL_ADC_IRQHandler+0x124>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6b      	ldr	r2, [pc, #428]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d102      	bne.n	80043a6 <HAL_ADC_IRQHandler+0x12a>
 80043a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043a4:	e000      	b.n	80043a8 <HAL_ADC_IRQHandler+0x12c>
 80043a6:	4b6b      	ldr	r3, [pc, #428]	; (8004554 <HAL_ADC_IRQHandler+0x2d8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d139      	bne.n	800442e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d134      	bne.n	800442e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d12d      	bne.n	800442e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11a      	bne.n	8004416 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 020c 	bic.w	r2, r2, #12
 80043ee:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d112      	bne.n	800442e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
 8004414:	e00b      	b.n	800442e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f043 0210 	orr.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fe66 	bl	8002100 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	220c      	movs	r2, #12
 800443a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b20      	cmp	r3, #32
 8004448:	d106      	bne.n	8004458 <HAL_ADC_IRQHandler+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b20      	cmp	r3, #32
 8004456:	d00f      	beq.n	8004478 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	f040 813c 	bne.w	80046e0 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	f040 8134 	bne.w	80046e0 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800448c:	d004      	beq.n	8004498 <HAL_ADC_IRQHandler+0x21c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d106      	bne.n	80044a6 <HAL_ADC_IRQHandler+0x22a>
 8004498:	4b2c      	ldr	r3, [pc, #176]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d03e      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 80044a4:	e005      	b.n	80044b2 <HAL_ADC_IRQHandler+0x236>
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d037      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ba:	d004      	beq.n	80044c6 <HAL_ADC_IRQHandler+0x24a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a21      	ldr	r2, [pc, #132]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d106      	bne.n	80044d4 <HAL_ADC_IRQHandler+0x258>
 80044c6:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d027      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 80044d2:	e005      	b.n	80044e0 <HAL_ADC_IRQHandler+0x264>
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d020      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e8:	d004      	beq.n	80044f4 <HAL_ADC_IRQHandler+0x278>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d106      	bne.n	8004502 <HAL_ADC_IRQHandler+0x286>
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <HAL_ADC_IRQHandler+0x2d0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2b09      	cmp	r3, #9
 80044fe:	d010      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 8004500:	e005      	b.n	800450e <HAL_ADC_IRQHandler+0x292>
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_ADC_IRQHandler+0x2d4>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2b09      	cmp	r3, #9
 800450c:	d009      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004516:	d004      	beq.n	8004522 <HAL_ADC_IRQHandler+0x2a6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <HAL_ADC_IRQHandler+0x2d8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d104      	bne.n	800452c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e018      	b.n	800455e <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004534:	d004      	beq.n	8004540 <HAL_ADC_IRQHandler+0x2c4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a03      	ldr	r2, [pc, #12]	; (8004548 <HAL_ADC_IRQHandler+0x2cc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10b      	bne.n	8004558 <HAL_ADC_IRQHandler+0x2dc>
 8004540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004544:	e009      	b.n	800455a <HAL_ADC_IRQHandler+0x2de>
 8004546:	bf00      	nop
 8004548:	50000100 	.word	0x50000100
 800454c:	50000300 	.word	0x50000300
 8004550:	50000700 	.word	0x50000700
 8004554:	50000400 	.word	0x50000400
 8004558:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <HAL_ADC_IRQHandler+0x554>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 80ad 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 80a5 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 809f 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	f040 8097 	bne.w	80046d2 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ac:	d004      	beq.n	80045b8 <HAL_ADC_IRQHandler+0x33c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a88      	ldr	r2, [pc, #544]	; (80047d4 <HAL_ADC_IRQHandler+0x558>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d106      	bne.n	80045c6 <HAL_ADC_IRQHandler+0x34a>
 80045b8:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <HAL_ADC_IRQHandler+0x55c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03e      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 80045c4:	e005      	b.n	80045d2 <HAL_ADC_IRQHandler+0x356>
 80045c6:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_ADC_IRQHandler+0x560>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d037      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045da:	d004      	beq.n	80045e6 <HAL_ADC_IRQHandler+0x36a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7c      	ldr	r2, [pc, #496]	; (80047d4 <HAL_ADC_IRQHandler+0x558>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d106      	bne.n	80045f4 <HAL_ADC_IRQHandler+0x378>
 80045e6:	4b7c      	ldr	r3, [pc, #496]	; (80047d8 <HAL_ADC_IRQHandler+0x55c>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d027      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 80045f2:	e005      	b.n	8004600 <HAL_ADC_IRQHandler+0x384>
 80045f4:	4b79      	ldr	r3, [pc, #484]	; (80047dc <HAL_ADC_IRQHandler+0x560>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d020      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004608:	d004      	beq.n	8004614 <HAL_ADC_IRQHandler+0x398>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a71      	ldr	r2, [pc, #452]	; (80047d4 <HAL_ADC_IRQHandler+0x558>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d106      	bne.n	8004622 <HAL_ADC_IRQHandler+0x3a6>
 8004614:	4b70      	ldr	r3, [pc, #448]	; (80047d8 <HAL_ADC_IRQHandler+0x55c>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2b07      	cmp	r3, #7
 800461e:	d010      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 8004620:	e005      	b.n	800462e <HAL_ADC_IRQHandler+0x3b2>
 8004622:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_ADC_IRQHandler+0x560>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2b07      	cmp	r3, #7
 800462c:	d009      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004636:	d004      	beq.n	8004642 <HAL_ADC_IRQHandler+0x3c6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a64      	ldr	r2, [pc, #400]	; (80047d0 <HAL_ADC_IRQHandler+0x554>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d104      	bne.n	800464c <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e00f      	b.n	800466c <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004654:	d004      	beq.n	8004660 <HAL_ADC_IRQHandler+0x3e4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_ADC_IRQHandler+0x558>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d102      	bne.n	8004666 <HAL_ADC_IRQHandler+0x3ea>
 8004660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004664:	e000      	b.n	8004668 <HAL_ADC_IRQHandler+0x3ec>
 8004666:	4b5a      	ldr	r3, [pc, #360]	; (80047d0 <HAL_ADC_IRQHandler+0x554>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d12d      	bne.n	80046d2 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004692:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d112      	bne.n	80046d2 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
 80046b8:	e00b      	b.n	80046d2 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0210 	orr.w	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8de 	bl	8004894 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2260      	movs	r2, #96	; 0x60
 80046de:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d113      	bne.n	8004716 <HAL_ADC_IRQHandler+0x49a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d10c      	bne.n	8004716 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fa39 	bl	8003b80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004724:	d115      	bne.n	8004752 <HAL_ADC_IRQHandler+0x4d6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004734:	d10d      	bne.n	8004752 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8ba 	bl	80048bc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004750:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d115      	bne.n	800478e <HAL_ADC_IRQHandler+0x512>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d10d      	bne.n	800478e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8a6 	bl	80048d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d151      	bne.n	8004840 <HAL_ADC_IRQHandler+0x5c4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d14a      	bne.n	8004840 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d102      	bne.n	80047b8 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80047b2:	2301      	movs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e02d      	b.n	8004814 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047c0:	d004      	beq.n	80047cc <HAL_ADC_IRQHandler+0x550>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a03      	ldr	r2, [pc, #12]	; (80047d4 <HAL_ADC_IRQHandler+0x558>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <HAL_ADC_IRQHandler+0x564>
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <HAL_ADC_IRQHandler+0x55c>)
 80047ce:	e008      	b.n	80047e2 <HAL_ADC_IRQHandler+0x566>
 80047d0:	50000400 	.word	0x50000400
 80047d4:	50000100 	.word	0x50000100
 80047d8:	50000300 	.word	0x50000300
 80047dc:	50000700 	.word	0x50000700
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_ADC_IRQHandler+0x614>)
 80047e2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10a      	bne.n	8004814 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80047fe:	2301      	movs	r3, #1
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e007      	b.n	8004814 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d10e      	bne.n	8004838 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0202 	orr.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff f9ae 	bl	8003b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2210      	movs	r2, #16
 800483e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d11b      	bne.n	8004888 <HAL_ADC_IRQHandler+0x60c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d113      	bne.n	8004888 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004870:	f043 0208 	orr.w	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004880:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f810 	bl	80048a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	50000700 	.word	0x50000700

08004894 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b09b      	sub	sp, #108	; 0x6c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x22>
 8004902:	2302      	movs	r3, #2
 8004904:	e2cb      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x5ba>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 82af 	bne.w	8004e7c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d81c      	bhi.n	8004960 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	461a      	mov	r2, r3
 800493a:	231f      	movs	r3, #31
 800493c:	4093      	lsls	r3, r2
 800493e:	43db      	mvns	r3, r3
 8004940:	4019      	ands	r1, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa00 f203 	lsl.w	r2, r0, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
 800495e:	e063      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b09      	cmp	r3, #9
 8004966:	d81e      	bhi.n	80049a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	3b1e      	subs	r3, #30
 800497c:	221f      	movs	r2, #31
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	4019      	ands	r1, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	3b1e      	subs	r3, #30
 8004998:	fa00 f203 	lsl.w	r2, r0, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	635a      	str	r2, [r3, #52]	; 0x34
 80049a4:	e040      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b0e      	cmp	r3, #14
 80049ac:	d81e      	bhi.n	80049ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	3b3c      	subs	r3, #60	; 0x3c
 80049c2:	221f      	movs	r2, #31
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	4019      	ands	r1, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	3b3c      	subs	r3, #60	; 0x3c
 80049de:	fa00 f203 	lsl.w	r2, r0, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
 80049ea:	e01d      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	3b5a      	subs	r3, #90	; 0x5a
 8004a00:	221f      	movs	r2, #31
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4019      	ands	r1, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	3b5a      	subs	r3, #90	; 0x5a
 8004a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 80e5 	bne.w	8004c02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d91c      	bls.n	8004a7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	3b1e      	subs	r3, #30
 8004a52:	2207      	movs	r2, #7
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	4019      	ands	r1, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6898      	ldr	r0, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4413      	add	r3, r2
 8004a6a:	3b1e      	subs	r3, #30
 8004a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	619a      	str	r2, [r3, #24]
 8004a78:	e019      	b.n	8004aae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6959      	ldr	r1, [r3, #20]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4413      	add	r3, r2
 8004a8a:	2207      	movs	r2, #7
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	4019      	ands	r1, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6898      	ldr	r0, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d84f      	bhi.n	8004b70 <HAL_ADC_ConfigChannel+0x28c>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <HAL_ADC_ConfigChannel+0x1f4>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b4f 	.word	0x08004b4f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004aee:	4b9f      	ldr	r3, [pc, #636]	; (8004d6c <HAL_ADC_ConfigChannel+0x488>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	0691      	lsls	r1, r2, #26
 8004af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004afa:	430a      	orrs	r2, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b06:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004b08:	e07e      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b10:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <HAL_ADC_ConfigChannel+0x488>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	0691      	lsls	r1, r2, #26
 8004b1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b28:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004b2a:	e06d      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b32:	4b8e      	ldr	r3, [pc, #568]	; (8004d6c <HAL_ADC_ConfigChannel+0x488>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	0691      	lsls	r1, r2, #26
 8004b3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b4a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004b4c:	e05c      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b54:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_ADC_ConfigChannel+0x488>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	0691      	lsls	r1, r2, #26
 8004b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b60:	430a      	orrs	r2, r1
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b6c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004b6e:	e04b      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	069b      	lsls	r3, r3, #26
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	069b      	lsls	r3, r3, #26
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d107      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bb6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bda:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	069b      	lsls	r3, r3, #26
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d10a      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bfe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004c00:	e001      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004c06:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x344>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x344>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x346>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8131 	bne.w	8004e92 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d00f      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2201      	movs	r2, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	400a      	ands	r2, r1
 8004c52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004c56:	e049      	b.n	8004cec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	d91c      	bls.n	8004cb4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6999      	ldr	r1, [r3, #24]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	3b1b      	subs	r3, #27
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	4019      	ands	r1, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6898      	ldr	r0, [r3, #8]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b1b      	subs	r3, #27
 8004ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	619a      	str	r2, [r3, #24]
 8004cb2:	e01b      	b.n	8004cec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6959      	ldr	r1, [r3, #20]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	4019      	ands	r1, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6898      	ldr	r0, [r3, #8]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf4:	d004      	beq.n	8004d00 <HAL_ADC_ConfigChannel+0x41c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <HAL_ADC_ConfigChannel+0x48c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x420>
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_ADC_ConfigChannel+0x490>)
 8004d02:	e000      	b.n	8004d06 <HAL_ADC_ConfigChannel+0x422>
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_ADC_ConfigChannel+0x494>)
 8004d06:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d105      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004d20:	2b11      	cmp	r3, #17
 8004d22:	d105      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004d34:	2b12      	cmp	r3, #18
 8004d36:	f040 80ac 	bne.w	8004e92 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80a5 	bne.w	8004e92 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d50:	d102      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x474>
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_ADC_ConfigChannel+0x48c>)
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e023      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x4bc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	; (8004d70 <HAL_ADC_ConfigChannel+0x48c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10c      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x498>
 8004d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e01a      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x4bc>
 8004d6a:	bf00      	nop
 8004d6c:	83fff000 	.word	0x83fff000
 8004d70:	50000100 	.word	0x50000100
 8004d74:	50000300 	.word	0x50000300
 8004d78:	50000700 	.word	0x50000700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4a      	ldr	r2, [pc, #296]	; (8004eac <HAL_ADC_ConfigChannel+0x5c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d102      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x4a8>
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e009      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x4bc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a47      	ldr	r2, [pc, #284]	; (8004eb0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d102      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x4b8>
 8004d96:	4b45      	ldr	r3, [pc, #276]	; (8004eac <HAL_ADC_ConfigChannel+0x5c8>)
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e001      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x4bc>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d108      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x4dc>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x4dc>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x4de>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d150      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x504>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x504>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_ADC_ConfigChannel+0x506>
 8004de8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13c      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d11d      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x54e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dfe:	d118      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e0c:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_ADC_ConfigChannel+0x5d0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0c9a      	lsrs	r2, r3, #18
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e22:	e002      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f9      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004e30:	e02e      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b11      	cmp	r3, #17
 8004e38:	d10b      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x56e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e42:	d106      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004e50:	e01e      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b12      	cmp	r3, #18
 8004e58:	d11a      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004e66:	e013      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e7a:	e00a      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e8e:	e000      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004e90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004e9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	376c      	adds	r7, #108	; 0x6c
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	50000400 	.word	0x50000400
 8004eb0:	50000500 	.word	0x50000500
 8004eb4:	20000028 	.word	0x20000028
 8004eb8:	431bde83 	.word	0x431bde83

08004ebc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b099      	sub	sp, #100	; 0x64
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed4:	d102      	bne.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	e01a      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a6a      	ldr	r2, [pc, #424]	; (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d103      	bne.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	e011      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a67      	ldr	r2, [pc, #412]	; (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d102      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ef8:	4b66      	ldr	r3, [pc, #408]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	e009      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a64      	ldr	r2, [pc, #400]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d102      	bne.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f08:	4b61      	ldr	r3, [pc, #388]	; (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	e001      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0b0      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0a9      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808d 	bne.w	800505c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 8086 	bne.w	800505c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f58:	d004      	beq.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a4b      	ldr	r2, [pc, #300]	; (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004f66:	e000      	b.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d040      	beq.n	8004ff6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f86:	035b      	lsls	r3, r3, #13
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d108      	bne.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d15c      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004fd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d14b      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	6811      	ldr	r1, [r2, #0]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	6892      	ldr	r2, [r2, #8]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff4:	e03c      	b.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005000:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d108      	bne.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d123      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005044:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005046:	2b00      	cmp	r3, #0
 8005048:	d112      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800504a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005052:	f023 030f 	bic.w	r3, r3, #15
 8005056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005058:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800505a:	e009      	b.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800506e:	e000      	b.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005070:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800507a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800507e:	4618      	mov	r0, r3
 8005080:	3764      	adds	r7, #100	; 0x64
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	50000100 	.word	0x50000100
 8005090:	50000400 	.word	0x50000400
 8005094:	50000500 	.word	0x50000500
 8005098:	50000300 	.word	0x50000300
 800509c:	50000700 	.word	0x50000700

080050a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d108      	bne.n	80050cc <ADC_Enable+0x2c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <ADC_Enable+0x2c>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <ADC_Enable+0x2e>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d13c      	bne.n	800514c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <ADC_Enable+0xb8>)
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f043 0210 	orr.w	r2, r3, #16
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e028      	b.n	800514e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800510c:	f7fe fd2c 	bl	8003b68 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005112:	e014      	b.n	800513e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005114:	f7fe fd28 	bl	8003b68 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d90d      	bls.n	800513e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0210 	orr.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e007      	b.n	800514e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d1e3      	bne.n	8005114 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	8000003f 	.word	0x8000003f

0800515c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d108      	bne.n	8005188 <ADC_Disable+0x2c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <ADC_Disable+0x2c>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <ADC_Disable+0x2e>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d040      	beq.n	8005210 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030d 	and.w	r3, r3, #13
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10f      	bne.n	80051bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0202 	orr.w	r2, r2, #2
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2203      	movs	r2, #3
 80051b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80051b4:	f7fe fcd8 	bl	8003b68 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80051ba:	e022      	b.n	8005202 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0210 	orr.w	r2, r3, #16
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	f043 0201 	orr.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e01c      	b.n	8005212 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051d8:	f7fe fcc6 	bl	8003b68 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d90d      	bls.n	8005202 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0210 	orr.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e007      	b.n	8005212 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d0e3      	beq.n	80051d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8093 	beq.w	8005368 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005250:	d12a      	bne.n	80052a8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005256:	2b01      	cmp	r3, #1
 8005258:	d126      	bne.n	80052a8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800525e:	2b01      	cmp	r3, #1
 8005260:	d122      	bne.n	80052a8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005262:	230c      	movs	r3, #12
 8005264:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005266:	e014      	b.n	8005292 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4a42      	ldr	r2, [pc, #264]	; (8005374 <ADC_ConversionStop+0x158>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d90d      	bls.n	800528c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0210 	orr.w	r2, r3, #16
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f043 0201 	orr.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e06e      	b.n	800536a <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	3301      	adds	r3, #1
 8005290:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d1e3      	bne.n	8005268 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2240      	movs	r2, #64	; 0x40
 80052a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b60      	cmp	r3, #96	; 0x60
 80052ac:	d015      	beq.n	80052da <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d10e      	bne.n	80052da <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0210 	orr.w	r2, r2, #16
 80052d8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d015      	beq.n	800530c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d10e      	bne.n	800530c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0220 	orr.w	r2, r2, #32
 800530a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b60      	cmp	r3, #96	; 0x60
 8005310:	d004      	beq.n	800531c <ADC_ConversionStop+0x100>
 8005312:	2b6c      	cmp	r3, #108	; 0x6c
 8005314:	d105      	bne.n	8005322 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005316:	230c      	movs	r3, #12
 8005318:	617b      	str	r3, [r7, #20]
        break;
 800531a:	e005      	b.n	8005328 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800531c:	2308      	movs	r3, #8
 800531e:	617b      	str	r3, [r7, #20]
        break;
 8005320:	e002      	b.n	8005328 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005322:	2304      	movs	r3, #4
 8005324:	617b      	str	r3, [r7, #20]
        break;
 8005326:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005328:	f7fe fc1e 	bl	8003b68 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800532e:	e014      	b.n	800535a <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005330:	f7fe fc1a 	bl	8003b68 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b0b      	cmp	r3, #11
 800533c:	d90d      	bls.n	800535a <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0210 	orr.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e007      	b.n	800536a <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e3      	bne.n	8005330 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	000993ff 	.word	0x000993ff

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	db10      	blt.n	800544c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	f003 021f 	and.w	r2, r3, #31
 8005430:	4909      	ldr	r1, [pc, #36]	; (8005458 <__NVIC_DisableIRQ+0x40>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2001      	movs	r0, #1
 800543a:	fa00 f202 	lsl.w	r2, r0, r2
 800543e:	3320      	adds	r3, #32
 8005440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005448:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	e000e100 	.word	0xe000e100

0800545c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546c:	2b00      	cmp	r3, #0
 800546e:	db0a      	blt.n	8005486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	490c      	ldr	r1, [pc, #48]	; (80054a8 <__NVIC_SetPriority+0x4c>)
 8005476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547a:	0112      	lsls	r2, r2, #4
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	440b      	add	r3, r1
 8005480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005484:	e00a      	b.n	800549c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4908      	ldr	r1, [pc, #32]	; (80054ac <__NVIC_SetPriority+0x50>)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3b04      	subs	r3, #4
 8005494:	0112      	lsls	r2, r2, #4
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	440b      	add	r3, r1
 800549a:	761a      	strb	r2, [r3, #24]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	e000e100 	.word	0xe000e100
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b089      	sub	sp, #36	; 0x24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f1c3 0307 	rsb	r3, r3, #7
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	bf28      	it	cs
 80054ce:	2304      	movcs	r3, #4
 80054d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d902      	bls.n	80054e0 <NVIC_EncodePriority+0x30>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3b03      	subs	r3, #3
 80054de:	e000      	b.n	80054e2 <NVIC_EncodePriority+0x32>
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	401a      	ands	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f8:	f04f 31ff 	mov.w	r1, #4294967295
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	43d9      	mvns	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005508:	4313      	orrs	r3, r2
         );
}
 800550a:	4618      	mov	r0, r3
 800550c:	3724      	adds	r7, #36	; 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005528:	d301      	bcc.n	800552e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552a:	2301      	movs	r3, #1
 800552c:	e00f      	b.n	800554e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <SysTick_Config+0x40>)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005536:	210f      	movs	r1, #15
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	f7ff ff8e 	bl	800545c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <SysTick_Config+0x40>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <SysTick_Config+0x40>)
 8005548:	2207      	movs	r2, #7
 800554a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	e000e010 	.word	0xe000e010

0800555c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff07 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	4603      	mov	r3, r0
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005584:	f7ff ff1c 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 8005588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f7ff ff8e 	bl	80054b0 <NVIC_EncodePriority>
 8005594:	4602      	mov	r2, r0
 8005596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ff5d 	bl	800545c <__NVIC_SetPriority>
}
 80055a2:	bf00      	nop
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	4603      	mov	r3, r0
 80055b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff0f 	bl	80053dc <__NVIC_EnableIRQ>
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff1f 	bl	8005418 <__NVIC_DisableIRQ>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ff94 	bl	8005518 <SysTick_Config>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e054      	b.n	80056b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7f5b      	ldrb	r3, [r3, #29]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fd fa18 	bl	8002a54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	791b      	ldrb	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <HAL_CRC_Init+0xc4>)
 8005638:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0218 	bic.w	r2, r2, #24
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	e00c      	b.n	8005666 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6899      	ldr	r1, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	461a      	mov	r2, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f946 	bl	80058e8 <HAL_CRCEx_Polynomial_Set>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e028      	b.n	80056b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	795b      	ldrb	r3, [r3, #5]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d105      	bne.n	800567a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f04f 32ff 	mov.w	r2, #4294967295
 8005676:	611a      	str	r2, [r3, #16]
 8005678:	e004      	b.n	8005684 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6912      	ldr	r2, [r2, #16]
 8005682:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	04c11db7 	.word	0x04c11db7

080056c4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2202      	movs	r2, #2
 80056d8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d022      	beq.n	8005738 <HAL_CRC_Calculate+0x74>
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d002      	beq.n	80056fc <HAL_CRC_Calculate+0x38>
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d017      	beq.n	800572a <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80056fa:	e024      	b.n	8005746 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e00a      	b.n	8005718 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	3301      	adds	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d3f0      	bcc.n	8005702 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	613b      	str	r3, [r7, #16]
      break;
 8005728:	e00d      	b.n	8005746 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f811 	bl	8005756 <CRC_Handle_8>
 8005734:	6138      	str	r0, [r7, #16]
      break;
 8005736:	e006      	b.n	8005746 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f898 	bl	8005872 <CRC_Handle_16>
 8005742:	6138      	str	r0, [r7, #16]
      break;
 8005744:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800574c:	693b      	ldr	r3, [r7, #16]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005756:	b480      	push	{r7}
 8005758:	b089      	sub	sp, #36	; 0x24
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	e023      	b.n	80057b0 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	3301      	adds	r3, #1
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	440b      	add	r3, r1
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005782:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	3302      	adds	r3, #2
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	440b      	add	r3, r1
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005792:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	3303      	adds	r3, #3
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	440b      	add	r3, r1
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80057a6:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3d6      	bcc.n	8005768 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d04d      	beq.n	8005860 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4413      	add	r3, r2
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d116      	bne.n	8005816 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4413      	add	r3, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	b21a      	sxth	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	3301      	adds	r3, #1
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	440b      	add	r3, r1
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	b21b      	sxth	r3, r3
 8005804:	4313      	orrs	r3, r2
 8005806:	b21b      	sxth	r3, r3
 8005808:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	8b7a      	ldrh	r2, [r7, #26]
 8005814:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d11f      	bne.n	8005860 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4413      	add	r3, r2
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	b21a      	sxth	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	3301      	adds	r3, #1
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	440b      	add	r3, r1
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b21b      	sxth	r3, r3
 800583c:	4313      	orrs	r3, r2
 800583e:	b21b      	sxth	r3, r3
 8005840:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	8b7a      	ldrh	r2, [r7, #26]
 800584c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3302      	adds	r3, #2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4413      	add	r3, r2
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3724      	adds	r7, #36	; 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e013      	b.n	80058ac <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	041a      	lsls	r2, r3, #16
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	3302      	adds	r3, #2
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	440b      	add	r3, r1
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	3301      	adds	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3e6      	bcc.n	8005884 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80058f8:	231f      	movs	r3, #31
 80058fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80058fc:	bf00      	nop
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	613a      	str	r2, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_CRCEx_Polynomial_Set+0x34>
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b18      	cmp	r3, #24
 8005920:	d846      	bhi.n	80059b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005922:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	080059b7 	.word	0x080059b7
 800592c:	080059b1 	.word	0x080059b1
 8005930:	080059b1 	.word	0x080059b1
 8005934:	080059b1 	.word	0x080059b1
 8005938:	080059b1 	.word	0x080059b1
 800593c:	080059b1 	.word	0x080059b1
 8005940:	080059b1 	.word	0x080059b1
 8005944:	080059b1 	.word	0x080059b1
 8005948:	080059a5 	.word	0x080059a5
 800594c:	080059b1 	.word	0x080059b1
 8005950:	080059b1 	.word	0x080059b1
 8005954:	080059b1 	.word	0x080059b1
 8005958:	080059b1 	.word	0x080059b1
 800595c:	080059b1 	.word	0x080059b1
 8005960:	080059b1 	.word	0x080059b1
 8005964:	080059b1 	.word	0x080059b1
 8005968:	08005999 	.word	0x08005999
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059b1 	.word	0x080059b1
 8005988:	0800598d 	.word	0x0800598d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d913      	bls.n	80059ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005996:	e010      	b.n	80059ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b07      	cmp	r3, #7
 800599c:	d90f      	bls.n	80059be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059a2:	e00c      	b.n	80059be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d90b      	bls.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059ae:	e008      	b.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e006      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059b6:	bf00      	nop
 80059b8:	e004      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 0118 	bic.w	r1, r3, #24
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e037      	b.n	8005a7a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a20:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f97f 	bl	8005d60 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}  
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_DMA_Start_IT+0x20>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e04a      	b.n	8005b38 <HAL_DMA_Start_IT+0xb6>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d13a      	bne.n	8005b2a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f912 	bl	8005d02 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 020e 	orr.w	r2, r2, #14
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e00f      	b.n	8005b18 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 020a 	orr.w	r2, r2, #10
 8005b06:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0204 	bic.w	r2, r2, #4
 8005b16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e005      	b.n	8005b36 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
 8005b34:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d005      	beq.n	8005b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e027      	b.n	8005bb2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 020e 	bic.w	r2, r2, #14
 8005b70:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b90:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
    } 
  }
  return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	2204      	movs	r2, #4
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d024      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x72>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01f      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d107      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2104      	movs	r1, #4
 8005c16:	fa01 f202 	lsl.w	r2, r1, r2
 8005c1a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d06a      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005c2c:	e065      	b.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2202      	movs	r2, #2
 8005c34:	409a      	lsls	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d02c      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xdc>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d027      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 020a 	bic.w	r2, r2, #10
 8005c64:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2102      	movs	r1, #2
 8005c78:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d035      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005c96:	e030      	b.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d028      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d023      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 020e 	bic.w	r2, r2, #14
 8005cc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
    }
  }
}  
 8005cf8:	e7ff      	b.n	8005cfa <HAL_DMA_IRQHandler+0x13e>
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d18:	2101      	movs	r1, #1
 8005d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d108      	bne.n	8005d42 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d40:	e007      	b.n	8005d52 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <DMA_CalcBaseAndBitshift+0x60>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d80f      	bhi.n	8005d94 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <DMA_CalcBaseAndBitshift+0x64>)
 8005d7c:	4413      	add	r3, r2
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	009a      	lsls	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <DMA_CalcBaseAndBitshift+0x6c>)
 8005d90:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005d92:	e00e      	b.n	8005db2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x70>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	009a      	lsls	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x74>)
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40020407 	.word	0x40020407
 8005dc4:	bffdfff8 	.word	0xbffdfff8
 8005dc8:	cccccccd 	.word	0xcccccccd
 8005dcc:	40020000 	.word	0x40020000
 8005dd0:	bffdfbf8 	.word	0xbffdfbf8
 8005dd4:	40020400 	.word	0x40020400

08005dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005de6:	e154      	b.n	8006092 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2101      	movs	r1, #1
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	4013      	ands	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8146 	beq.w	800608c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d00b      	beq.n	8005e20 <HAL_GPIO_Init+0x48>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d007      	beq.n	8005e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e14:	2b11      	cmp	r3, #17
 8005e16:	d003      	beq.n	8005e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b12      	cmp	r3, #18
 8005e1e:	d130      	bne.n	8005e82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4013      	ands	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e56:	2201      	movs	r2, #1
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4013      	ands	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 0201 	and.w	r2, r3, #1
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4013      	ands	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0xea>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b12      	cmp	r3, #18
 8005ec0:	d123      	bne.n	8005f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	08da      	lsrs	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3208      	adds	r2, #8
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	220f      	movs	r2, #15
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	08da      	lsrs	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3208      	adds	r2, #8
 8005f04:	6939      	ldr	r1, [r7, #16]
 8005f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	2203      	movs	r2, #3
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f003 0203 	and.w	r2, r3, #3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80a0 	beq.w	800608c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f4c:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <HAL_GPIO_Init+0x2d8>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	4a57      	ldr	r2, [pc, #348]	; (80060b0 <HAL_GPIO_Init+0x2d8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6193      	str	r3, [r2, #24]
 8005f58:	4b55      	ldr	r3, [pc, #340]	; (80060b0 <HAL_GPIO_Init+0x2d8>)
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f64:	4a53      	ldr	r2, [pc, #332]	; (80060b4 <HAL_GPIO_Init+0x2dc>)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	220f      	movs	r2, #15
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f8e:	d019      	beq.n	8005fc4 <HAL_GPIO_Init+0x1ec>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a49      	ldr	r2, [pc, #292]	; (80060b8 <HAL_GPIO_Init+0x2e0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_GPIO_Init+0x1e8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	; (80060bc <HAL_GPIO_Init+0x2e4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00d      	beq.n	8005fbc <HAL_GPIO_Init+0x1e4>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a47      	ldr	r2, [pc, #284]	; (80060c0 <HAL_GPIO_Init+0x2e8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d007      	beq.n	8005fb8 <HAL_GPIO_Init+0x1e0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a46      	ldr	r2, [pc, #280]	; (80060c4 <HAL_GPIO_Init+0x2ec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d101      	bne.n	8005fb4 <HAL_GPIO_Init+0x1dc>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	e008      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	e006      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e004      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e002      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	f002 0203 	and.w	r2, r2, #3
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	4093      	lsls	r3, r2
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fd6:	4937      	ldr	r1, [pc, #220]	; (80060b4 <HAL_GPIO_Init+0x2dc>)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	3302      	adds	r3, #2
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fe4:	4b38      	ldr	r3, [pc, #224]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	43db      	mvns	r3, r3
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006008:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	43db      	mvns	r3, r3
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4013      	ands	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006032:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006038:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	43db      	mvns	r3, r3
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4013      	ands	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800605c:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006062:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	43db      	mvns	r3, r3
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3301      	adds	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f aea3 	bne.w	8005de8 <HAL_GPIO_Init+0x10>
  }
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40010000 	.word	0x40010000
 80060b8:	48000400 	.word	0x48000400
 80060bc:	48000800 	.word	0x48000800
 80060c0:	48000c00 	.word	0x48000c00
 80060c4:	48001000 	.word	0x48001000
 80060c8:	40010400 	.word	0x40010400

080060cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
 80060d8:	4613      	mov	r3, r2
 80060da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060dc:	787b      	ldrb	r3, [r7, #1]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060e8:	e002      	b.n	80060f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e081      	b.n	8006212 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fc fcb6 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	; 0x24
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800614c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800615c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	e006      	b.n	8006184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d104      	bne.n	8006196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	ea42 0103 	orr.w	r1, r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	d138      	bne.n	80062a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800623a:	2302      	movs	r3, #2
 800623c:	e032      	b.n	80062a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800626c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0201 	orr.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d139      	bne.n	800633a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e033      	b.n	800633c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0201 	bic.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006302:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e000      	b.n	800633c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
  }
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b08b      	sub	sp, #44	; 0x2c
 800634c:	af06      	add	r7, sp, #24
 800634e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e0d0      	b.n	80064fc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fc fd20 	bl	8002db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2203      	movs	r2, #3
 8006378:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f003 fc39 	bl	8009bf8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	e04c      	b.n	8006426 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	3301      	adds	r3, #1
 800639e:	2201      	movs	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	440b      	add	r3, r1
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063b6:	7bfa      	ldrb	r2, [r7, #15]
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	b298      	uxth	r0, r3
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	440b      	add	r3, r1
 80063c8:	3336      	adds	r3, #54	; 0x36
 80063ca:	4602      	mov	r2, r0
 80063cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	440b      	add	r3, r1
 80063de:	3303      	adds	r3, #3
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	440b      	add	r3, r1
 80063f2:	3338      	adds	r3, #56	; 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	440b      	add	r3, r1
 8006406:	333c      	adds	r3, #60	; 0x3c
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800640c:	7bfa      	ldrb	r2, [r7, #15]
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	440b      	add	r3, r1
 800641a:	3340      	adds	r3, #64	; 0x40
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3301      	adds	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d3ad      	bcc.n	800638c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e044      	b.n	80064c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	440b      	add	r3, r1
 8006444:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800644c:	7bfa      	ldrb	r2, [r7, #15]
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	440b      	add	r3, r1
 800645a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800645e:	7bfa      	ldrb	r2, [r7, #15]
 8006460:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006462:	7bfa      	ldrb	r2, [r7, #15]
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064a4:	7bfa      	ldrb	r2, [r7, #15]
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	3301      	adds	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	7bfa      	ldrb	r2, [r7, #15]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d3b5      	bcc.n	8006436 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	687e      	ldr	r6, [r7, #4]
 80064d2:	466d      	mov	r5, sp
 80064d4:	f106 0410 	add.w	r4, r6, #16
 80064d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	1d33      	adds	r3, r6, #4
 80064e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064e4:	6838      	ldr	r0, [r7, #0]
 80064e6:	f003 fba2 	bl	8009c2e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800650a:	af00      	add	r7, sp, #0
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f000 bef4 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 816a 	beq.w	8006802 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800652e:	4bb3      	ldr	r3, [pc, #716]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b04      	cmp	r3, #4
 8006538:	d00c      	beq.n	8006554 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800653a:	4bb0      	ldr	r3, [pc, #704]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b08      	cmp	r3, #8
 8006544:	d159      	bne.n	80065fa <HAL_RCC_OscConfig+0xf6>
 8006546:	4bad      	ldr	r3, [pc, #692]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006552:	d152      	bne.n	80065fa <HAL_RCC_OscConfig+0xf6>
 8006554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006558:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006560:	fa93 f3a3 	rbit	r3, r3
 8006564:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006568:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656c:	fab3 f383 	clz	r3, r3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <HAL_RCC_OscConfig+0x82>
 8006580:	4b9e      	ldr	r3, [pc, #632]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	e015      	b.n	80065b2 <HAL_RCC_OscConfig+0xae>
 8006586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800658a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006592:	fa93 f3a3 	rbit	r3, r3
 8006596:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800659a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800659e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80065a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80065ae:	4b93      	ldr	r3, [pc, #588]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80065ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80065be:	fa92 f2a2 	rbit	r2, r2
 80065c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80065c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80065ca:	fab2 f282 	clz	r2, r2
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	f042 0220 	orr.w	r2, r2, #32
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	f002 021f 	and.w	r2, r2, #31
 80065da:	2101      	movs	r1, #1
 80065dc:	fa01 f202 	lsl.w	r2, r1, r2
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 810c 	beq.w	8006800 <HAL_RCC_OscConfig+0x2fc>
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f040 8106 	bne.w	8006800 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f000 be86 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d106      	bne.n	8006614 <HAL_RCC_OscConfig+0x110>
 8006606:	4b7d      	ldr	r3, [pc, #500]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7c      	ldr	r2, [pc, #496]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e030      	b.n	8006676 <HAL_RCC_OscConfig+0x172>
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0x134>
 800661e:	4b77      	ldr	r3, [pc, #476]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a76      	ldr	r2, [pc, #472]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b74      	ldr	r3, [pc, #464]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e01e      	b.n	8006676 <HAL_RCC_OscConfig+0x172>
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006642:	d10c      	bne.n	800665e <HAL_RCC_OscConfig+0x15a>
 8006644:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6c      	ldr	r2, [pc, #432]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 800664a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b6a      	ldr	r3, [pc, #424]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a69      	ldr	r2, [pc, #420]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e00b      	b.n	8006676 <HAL_RCC_OscConfig+0x172>
 800665e:	4b67      	ldr	r3, [pc, #412]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a66      	ldr	r2, [pc, #408]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b64      	ldr	r3, [pc, #400]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a63      	ldr	r2, [pc, #396]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006674:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006676:	4b61      	ldr	r3, [pc, #388]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f023 020f 	bic.w	r2, r3, #15
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	495d      	ldr	r1, [pc, #372]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006686:	4313      	orrs	r3, r2
 8006688:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d059      	beq.n	8006748 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fd fa68 	bl	8003b68 <HAL_GetTick>
 8006698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669e:	f7fd fa63 	bl	8003b68 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b64      	cmp	r3, #100	; 0x64
 80066ac:	d902      	bls.n	80066b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	f000 be29 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
 80066b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80066c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066cc:	fab3 f383 	clz	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d102      	bne.n	80066e6 <HAL_RCC_OscConfig+0x1e2>
 80066e0:	4b46      	ldr	r3, [pc, #280]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	e015      	b.n	8006712 <HAL_RCC_OscConfig+0x20e>
 80066e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80066f2:	fa93 f3a3 	rbit	r3, r3
 80066f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80066fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006702:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006706:	fa93 f3a3 	rbit	r3, r3
 800670a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006716:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800671a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800671e:	fa92 f2a2 	rbit	r2, r2
 8006722:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006726:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800672a:	fab2 f282 	clz	r2, r2
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	f042 0220 	orr.w	r2, r2, #32
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	f002 021f 	and.w	r2, r2, #31
 800673a:	2101      	movs	r1, #1
 800673c:	fa01 f202 	lsl.w	r2, r1, r2
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0ab      	beq.n	800669e <HAL_RCC_OscConfig+0x19a>
 8006746:	e05c      	b.n	8006802 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fd fa0e 	bl	8003b68 <HAL_GetTick>
 800674c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006750:	e00a      	b.n	8006768 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006752:	f7fd fa09 	bl	8003b68 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d902      	bls.n	8006768 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	f000 bdcf 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
 8006768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800676c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006770:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006774:	fa93 f3a3 	rbit	r3, r3
 8006778:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800677c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f043 0301 	orr.w	r3, r3, #1
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d102      	bne.n	800679a <HAL_RCC_OscConfig+0x296>
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	e015      	b.n	80067c6 <HAL_RCC_OscConfig+0x2c2>
 800679a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800679e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80067ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80067b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80067ba:	fa93 f3a3 	rbit	r3, r3
 80067be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <HAL_RCC_OscConfig+0x2f8>)
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80067ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80067d2:	fa92 f2a2 	rbit	r2, r2
 80067d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80067da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80067de:	fab2 f282 	clz	r2, r2
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	f042 0220 	orr.w	r2, r2, #32
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	f002 021f 	and.w	r2, r2, #31
 80067ee:	2101      	movs	r1, #1
 80067f0:	fa01 f202 	lsl.w	r2, r1, r2
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1ab      	bne.n	8006752 <HAL_RCC_OscConfig+0x24e>
 80067fa:	e002      	b.n	8006802 <HAL_RCC_OscConfig+0x2fe>
 80067fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006802:	1d3b      	adds	r3, r7, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 816f 	beq.w	8006af0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006812:	4bd0      	ldr	r3, [pc, #832]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800681e:	4bcd      	ldr	r3, [pc, #820]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b08      	cmp	r3, #8
 8006828:	d16c      	bne.n	8006904 <HAL_RCC_OscConfig+0x400>
 800682a:	4bca      	ldr	r3, [pc, #808]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d166      	bne.n	8006904 <HAL_RCC_OscConfig+0x400>
 8006836:	2302      	movs	r3, #2
 8006838:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006840:	fa93 f3a3 	rbit	r3, r3
 8006844:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006848:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684c:	fab3 f383 	clz	r3, r3
 8006850:	b2db      	uxtb	r3, r3
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d102      	bne.n	8006866 <HAL_RCC_OscConfig+0x362>
 8006860:	4bbc      	ldr	r3, [pc, #752]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	e013      	b.n	800688e <HAL_RCC_OscConfig+0x38a>
 8006866:	2302      	movs	r3, #2
 8006868:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006870:	fa93 f3a3 	rbit	r3, r3
 8006874:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006878:	2302      	movs	r3, #2
 800687a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800687e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006882:	fa93 f3a3 	rbit	r3, r3
 8006886:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800688a:	4bb2      	ldr	r3, [pc, #712]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2202      	movs	r2, #2
 8006890:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006894:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006898:	fa92 f2a2 	rbit	r2, r2
 800689c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80068a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	f042 0220 	orr.w	r2, r2, #32
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	f002 021f 	and.w	r2, r2, #31
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f202 	lsl.w	r2, r1, r2
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <HAL_RCC_OscConfig+0x3cc>
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d002      	beq.n	80068d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f000 bd1b 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d0:	4ba0      	ldr	r3, [pc, #640]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068d8:	1d3b      	adds	r3, r7, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	21f8      	movs	r1, #248	; 0xf8
 80068e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80068e8:	fa91 f1a1 	rbit	r1, r1
 80068ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80068f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80068f4:	fab1 f181 	clz	r1, r1
 80068f8:	b2c9      	uxtb	r1, r1
 80068fa:	408b      	lsls	r3, r1
 80068fc:	4995      	ldr	r1, [pc, #596]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006902:	e0f5      	b.n	8006af0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8085 	beq.w	8006a1a <HAL_RCC_OscConfig+0x516>
 8006910:	2301      	movs	r3, #1
 8006912:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006922:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006926:	fab3 f383 	clz	r3, r3
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	461a      	mov	r2, r3
 8006938:	2301      	movs	r3, #1
 800693a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd f914 	bl	8003b68 <HAL_GetTick>
 8006940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006944:	e00a      	b.n	800695c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006946:	f7fd f90f 	bl	8003b68 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d902      	bls.n	800695c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	f000 bcd5 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
 800695c:	2302      	movs	r3, #2
 800695e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006962:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006966:	fa93 f3a3 	rbit	r3, r3
 800696a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800696e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006972:	fab3 f383 	clz	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d102      	bne.n	800698c <HAL_RCC_OscConfig+0x488>
 8006986:	4b73      	ldr	r3, [pc, #460]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	e013      	b.n	80069b4 <HAL_RCC_OscConfig+0x4b0>
 800698c:	2302      	movs	r3, #2
 800698e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006992:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006996:	fa93 f3a3 	rbit	r3, r3
 800699a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800699e:	2302      	movs	r3, #2
 80069a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80069a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80069a8:	fa93 f3a3 	rbit	r3, r3
 80069ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80069b0:	4b68      	ldr	r3, [pc, #416]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2202      	movs	r2, #2
 80069b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80069ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80069be:	fa92 f2a2 	rbit	r2, r2
 80069c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80069c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80069ca:	fab2 f282 	clz	r2, r2
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	f042 0220 	orr.w	r2, r2, #32
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	f002 021f 	and.w	r2, r2, #31
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f202 	lsl.w	r2, r1, r2
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0af      	beq.n	8006946 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e6:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	21f8      	movs	r1, #248	; 0xf8
 80069f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80069fe:	fa91 f1a1 	rbit	r1, r1
 8006a02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006a06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006a0a:	fab1 f181 	clz	r1, r1
 8006a0e:	b2c9      	uxtb	r1, r1
 8006a10:	408b      	lsls	r3, r1
 8006a12:	4950      	ldr	r1, [pc, #320]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	e06a      	b.n	8006af0 <HAL_RCC_OscConfig+0x5ec>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a24:	fa93 f3a3 	rbit	r3, r3
 8006a28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a30:	fab3 f383 	clz	r3, r3
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	461a      	mov	r2, r3
 8006a42:	2300      	movs	r3, #0
 8006a44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a46:	f7fd f88f 	bl	8003b68 <HAL_GetTick>
 8006a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fd f88a 	bl	8003b68 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d902      	bls.n	8006a66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	f000 bc50 	b.w	8007306 <HAL_RCC_OscConfig+0xe02>
 8006a66:	2302      	movs	r3, #2
 8006a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a70:	fa93 f3a3 	rbit	r3, r3
 8006a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7c:	fab3 f383 	clz	r3, r3
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCC_OscConfig+0x592>
 8006a90:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	e013      	b.n	8006abe <HAL_RCC_OscConfig+0x5ba>
 8006a96:	2302      	movs	r3, #2
 8006a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aa0:	fa93 f3a3 	rbit	r3, r3
 8006aa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006aba:	4b26      	ldr	r3, [pc, #152]	; (8006b54 <HAL_RCC_OscConfig+0x650>)
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006ac4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006ac8:	fa92 f2a2 	rbit	r2, r2
 8006acc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006ad0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006ad4:	fab2 f282 	clz	r2, r2
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	f042 0220 	orr.w	r2, r2, #32
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	f002 021f 	and.w	r2, r2, #31
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1af      	bne.n	8006a50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af0:	1d3b      	adds	r3, r7, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80da 	beq.w	8006cb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d069      	beq.n	8006bde <HAL_RCC_OscConfig+0x6da>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b14:	fa93 f3a3 	rbit	r3, r3
 8006b18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b20:	fab3 f383 	clz	r3, r3
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <HAL_RCC_OscConfig+0x654>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2301      	movs	r3, #1
 8006b32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b34:	f7fd f818 	bl	8003b68 <HAL_GetTick>
 8006b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b3c:	e00e      	b.n	8006b5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b3e:	f7fd f813 	bl	8003b68 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d906      	bls.n	8006b5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e3d9      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	10908120 	.word	0x10908120
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b66:	fa93 f3a3 	rbit	r3, r3
 8006b6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b72:	2202      	movs	r2, #2
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	fa93 f2a3 	rbit	r2, r3
 8006b80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	fa93 f2a3 	rbit	r2, r3
 8006b98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006b9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9e:	4ba5      	ldr	r3, [pc, #660]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	6019      	str	r1, [r3, #0]
 8006baa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	fa93 f1a3 	rbit	r1, r3
 8006bb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006bb8:	6019      	str	r1, [r3, #0]
  return result;
 8006bba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	fab3 f383 	clz	r3, r3
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0b0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x63a>
 8006bdc:	e06a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x7b0>
 8006bde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	fa93 f2a3 	rbit	r2, r3
 8006bf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bf4:	601a      	str	r2, [r3, #0]
  return result;
 8006bf6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bfc:	fab3 f383 	clz	r3, r3
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCC_OscConfig+0x934>)
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c10:	f7fc ffaa 	bl	8003b68 <HAL_GetTick>
 8006c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c18:	e009      	b.n	8006c2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c1a:	f7fc ffa5 	bl	8003b68 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e36b      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8006c2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006c32:	2202      	movs	r2, #2
 8006c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	fa93 f2a3 	rbit	r2, r3
 8006c40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	fa93 f2a3 	rbit	r2, r3
 8006c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006c62:	2202      	movs	r2, #2
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	fa93 f2a3 	rbit	r2, r3
 8006c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006c74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006c7e:	2102      	movs	r1, #2
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	fa93 f1a3 	rbit	r1, r3
 8006c8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c90:	6019      	str	r1, [r3, #0]
  return result;
 8006c92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	fab3 f383 	clz	r3, r3
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1b2      	bne.n	8006c1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb4:	1d3b      	adds	r3, r7, #4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8158 	beq.w	8006f74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cca:	4b5a      	ldr	r3, [pc, #360]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d112      	bne.n	8006cfc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd6:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4a56      	ldr	r2, [pc, #344]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	61d3      	str	r3, [r2, #28]
 8006ce2:	4b54      	ldr	r3, [pc, #336]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfc:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <HAL_RCC_OscConfig+0x938>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d08:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <HAL_RCC_OscConfig+0x938>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a4b      	ldr	r2, [pc, #300]	; (8006e3c <HAL_RCC_OscConfig+0x938>)
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d14:	f7fc ff28 	bl	8003b68 <HAL_GetTick>
 8006d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	e009      	b.n	8006d32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1e:	f7fc ff23 	bl	8003b68 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b64      	cmp	r3, #100	; 0x64
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e2e9      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d32:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <HAL_RCC_OscConfig+0x938>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0ef      	beq.n	8006d1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d106      	bne.n	8006d56 <HAL_RCC_OscConfig+0x852>
 8006d48:	4b3a      	ldr	r3, [pc, #232]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	4a39      	ldr	r2, [pc, #228]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	6213      	str	r3, [r2, #32]
 8006d54:	e02f      	b.n	8006db6 <HAL_RCC_OscConfig+0x8b2>
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10c      	bne.n	8006d7a <HAL_RCC_OscConfig+0x876>
 8006d60:	4b34      	ldr	r3, [pc, #208]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	4a33      	ldr	r2, [pc, #204]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6213      	str	r3, [r2, #32]
 8006d6c:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	4a30      	ldr	r2, [pc, #192]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d72:	f023 0304 	bic.w	r3, r3, #4
 8006d76:	6213      	str	r3, [r2, #32]
 8006d78:	e01d      	b.n	8006db6 <HAL_RCC_OscConfig+0x8b2>
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d10c      	bne.n	8006d9e <HAL_RCC_OscConfig+0x89a>
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d8a:	f043 0304 	orr.w	r3, r3, #4
 8006d8e:	6213      	str	r3, [r2, #32]
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	4a27      	ldr	r2, [pc, #156]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	6213      	str	r3, [r2, #32]
 8006d9c:	e00b      	b.n	8006db6 <HAL_RCC_OscConfig+0x8b2>
 8006d9e:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	6213      	str	r3, [r2, #32]
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006db0:	f023 0304 	bic.w	r3, r3, #4
 8006db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06b      	beq.n	8006e98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc0:	f7fc fed2 	bl	8003b68 <HAL_GetTick>
 8006dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc8:	e00b      	b.n	8006de2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dca:	f7fc fecd 	bl	8003b68 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e291      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8006de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006de6:	2202      	movs	r2, #2
 8006de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	fa93 f2a3 	rbit	r2, r3
 8006df4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006dfe:	2202      	movs	r2, #2
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	fa93 f2a3 	rbit	r2, r3
 8006e0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006e10:	601a      	str	r2, [r3, #0]
  return result;
 8006e12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006e16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e18:	fab3 f383 	clz	r3, r3
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f043 0302 	orr.w	r3, r3, #2
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d109      	bne.n	8006e40 <HAL_RCC_OscConfig+0x93c>
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <HAL_RCC_OscConfig+0x930>)
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	e014      	b.n	8006e5c <HAL_RCC_OscConfig+0x958>
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
 8006e38:	10908120 	.word	0x10908120
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006e44:	2202      	movs	r2, #2
 8006e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	fa93 f2a3 	rbit	r2, r3
 8006e52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	4bbb      	ldr	r3, [pc, #748]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006e60:	2102      	movs	r1, #2
 8006e62:	6011      	str	r1, [r2, #0]
 8006e64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	fa92 f1a2 	rbit	r1, r2
 8006e6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006e72:	6011      	str	r1, [r2, #0]
  return result;
 8006e74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	fab2 f282 	clz	r2, r2
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	f002 021f 	and.w	r2, r2, #31
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d099      	beq.n	8006dca <HAL_RCC_OscConfig+0x8c6>
 8006e96:	e063      	b.n	8006f60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e98:	f7fc fe66 	bl	8003b68 <HAL_GetTick>
 8006e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea0:	e00b      	b.n	8006eba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fc fe61 	bl	8003b68 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e225      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8006eba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	fa93 f2a3 	rbit	r2, r3
 8006ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	fa93 f2a3 	rbit	r2, r3
 8006ee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ee8:	601a      	str	r2, [r3, #0]
  return result;
 8006eea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006eee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef0:	fab3 f383 	clz	r3, r3
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f043 0302 	orr.w	r3, r3, #2
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d102      	bne.n	8006f0a <HAL_RCC_OscConfig+0xa06>
 8006f04:	4b90      	ldr	r3, [pc, #576]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	e00d      	b.n	8006f26 <HAL_RCC_OscConfig+0xa22>
 8006f0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006f0e:	2202      	movs	r2, #2
 8006f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	fa93 f2a3 	rbit	r2, r3
 8006f1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4b89      	ldr	r3, [pc, #548]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	fa92 f1a2 	rbit	r1, r2
 8006f38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006f3c:	6011      	str	r1, [r2, #0]
  return result;
 8006f3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	fab2 f282 	clz	r2, r2
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	f002 021f 	and.w	r2, r2, #31
 8006f54:	2101      	movs	r1, #1
 8006f56:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1a0      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d105      	bne.n	8006f74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f68:	4b77      	ldr	r3, [pc, #476]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4a76      	ldr	r2, [pc, #472]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f74:	1d3b      	adds	r3, r7, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 81c2 	beq.w	8007304 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f80:	4b71      	ldr	r3, [pc, #452]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 030c 	and.w	r3, r3, #12
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	f000 819c 	beq.w	80072c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f8e:	1d3b      	adds	r3, r7, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f040 8114 	bne.w	80071c2 <HAL_RCC_OscConfig+0xcbe>
 8006f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	fa93 f2a3 	rbit	r2, r3
 8006fae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006fb2:	601a      	str	r2, [r3, #0]
  return result;
 8006fb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006fb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fba:	fab3 f383 	clz	r3, r3
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd0:	f7fc fdca 	bl	8003b68 <HAL_GetTick>
 8006fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd8:	e009      	b.n	8006fee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fda:	f7fc fdc5 	bl	8003b68 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e18b      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8006fee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	fa93 f2a3 	rbit	r2, r3
 8007002:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007006:	601a      	str	r2, [r3, #0]
  return result;
 8007008:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800700c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800700e:	fab3 f383 	clz	r3, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d102      	bne.n	8007028 <HAL_RCC_OscConfig+0xb24>
 8007022:	4b49      	ldr	r3, [pc, #292]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	e01b      	b.n	8007060 <HAL_RCC_OscConfig+0xb5c>
 8007028:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800702c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	fa93 f2a3 	rbit	r2, r3
 800703c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	fa93 f2a3 	rbit	r2, r3
 8007056:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	4b3a      	ldr	r3, [pc, #232]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	fa92 f1a2 	rbit	r1, r2
 8007074:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007078:	6011      	str	r1, [r2, #0]
  return result;
 800707a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	fab2 f282 	clz	r2, r2
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	f042 0220 	orr.w	r2, r2, #32
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	f002 021f 	and.w	r2, r2, #31
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f202 	lsl.w	r2, r1, r2
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d19e      	bne.n	8006fda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800709c:	4b2a      	ldr	r3, [pc, #168]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80070a4:	1d3b      	adds	r3, r7, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	4925      	ldr	r1, [pc, #148]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	604b      	str	r3, [r1, #4]
 80070b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80070bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	fa93 f2a3 	rbit	r2, r3
 80070cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070d0:	601a      	str	r2, [r3, #0]
  return result;
 80070d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d8:	fab3 f383 	clz	r3, r3
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80070e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	461a      	mov	r2, r3
 80070ea:	2301      	movs	r3, #1
 80070ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fc fd3b 	bl	8003b68 <HAL_GetTick>
 80070f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070f6:	e009      	b.n	800710c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fc fd36 	bl	8003b68 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e0fc      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 800710c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	fa93 f2a3 	rbit	r2, r3
 8007120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007124:	601a      	str	r2, [r3, #0]
  return result;
 8007126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800712a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800712c:	fab3 f383 	clz	r3, r3
 8007130:	b2db      	uxtb	r3, r3
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	d105      	bne.n	800714c <HAL_RCC_OscConfig+0xc48>
 8007140:	4b01      	ldr	r3, [pc, #4]	; (8007148 <HAL_RCC_OscConfig+0xc44>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	e01e      	b.n	8007184 <HAL_RCC_OscConfig+0xc80>
 8007146:	bf00      	nop
 8007148:	40021000 	.word	0x40021000
 800714c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	fa93 f2a3 	rbit	r2, r3
 8007160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800716a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	fa93 f2a3 	rbit	r2, r3
 800717a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	4b63      	ldr	r3, [pc, #396]	; (8007310 <HAL_RCC_OscConfig+0xe0c>)
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	fa92 f1a2 	rbit	r1, r2
 8007198:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800719c:	6011      	str	r1, [r2, #0]
  return result;
 800719e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	fab2 f282 	clz	r2, r2
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	f042 0220 	orr.w	r2, r2, #32
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	f002 021f 	and.w	r2, r2, #31
 80071b4:	2101      	movs	r1, #1
 80071b6:	fa01 f202 	lsl.w	r2, r1, r2
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d09b      	beq.n	80070f8 <HAL_RCC_OscConfig+0xbf4>
 80071c0:	e0a0      	b.n	8007304 <HAL_RCC_OscConfig+0xe00>
 80071c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	fa93 f2a3 	rbit	r2, r3
 80071d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071da:	601a      	str	r2, [r3, #0]
  return result;
 80071dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	461a      	mov	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f8:	f7fc fcb6 	bl	8003b68 <HAL_GetTick>
 80071fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007200:	e009      	b.n	8007216 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007202:	f7fc fcb1 	bl	8003b68 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e077      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
 8007216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800721a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800721e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	fa93 f2a3 	rbit	r2, r3
 800722a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722e:	601a      	str	r2, [r3, #0]
  return result;
 8007230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007236:	fab3 f383 	clz	r3, r3
 800723a:	b2db      	uxtb	r3, r3
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b01      	cmp	r3, #1
 8007248:	d102      	bne.n	8007250 <HAL_RCC_OscConfig+0xd4c>
 800724a:	4b31      	ldr	r3, [pc, #196]	; (8007310 <HAL_RCC_OscConfig+0xe0c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	e01b      	b.n	8007288 <HAL_RCC_OscConfig+0xd84>
 8007250:	f107 0320 	add.w	r3, r7, #32
 8007254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725a:	f107 0320 	add.w	r3, r7, #32
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	fa93 f2a3 	rbit	r2, r3
 8007264:	f107 031c 	add.w	r3, r7, #28
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	f107 0318 	add.w	r3, r7, #24
 800726e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f107 0318 	add.w	r3, r7, #24
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	fa93 f2a3 	rbit	r2, r3
 800727e:	f107 0314 	add.w	r3, r7, #20
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	4b22      	ldr	r3, [pc, #136]	; (8007310 <HAL_RCC_OscConfig+0xe0c>)
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	f107 0210 	add.w	r2, r7, #16
 800728c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007290:	6011      	str	r1, [r2, #0]
 8007292:	f107 0210 	add.w	r2, r7, #16
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	fa92 f1a2 	rbit	r1, r2
 800729c:	f107 020c 	add.w	r2, r7, #12
 80072a0:	6011      	str	r1, [r2, #0]
  return result;
 80072a2:	f107 020c 	add.w	r2, r7, #12
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	fab2 f282 	clz	r2, r2
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	f042 0220 	orr.w	r2, r2, #32
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	f002 021f 	and.w	r2, r2, #31
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f202 	lsl.w	r2, r1, r2
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d19e      	bne.n	8007202 <HAL_RCC_OscConfig+0xcfe>
 80072c4:	e01e      	b.n	8007304 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c6:	1d3b      	adds	r3, r7, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e018      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <HAL_RCC_OscConfig+0xe0c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80072dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80072e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072e4:	1d3b      	adds	r3, r7, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d108      	bne.n	8007300 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80072ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80072f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80072f6:	1d3b      	adds	r3, r7, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40021000 	.word	0x40021000

08007314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b09e      	sub	sp, #120	; 0x78
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e162      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800732c:	4b90      	ldr	r3, [pc, #576]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d910      	bls.n	800735c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733a:	4b8d      	ldr	r3, [pc, #564]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 0207 	bic.w	r2, r3, #7
 8007342:	498b      	ldr	r1, [pc, #556]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734a:	4b89      	ldr	r3, [pc, #548]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e14a      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007368:	4b82      	ldr	r3, [pc, #520]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	497f      	ldr	r1, [pc, #508]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007376:	4313      	orrs	r3, r2
 8007378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80dc 	beq.w	8007540 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d13c      	bne.n	800740a <HAL_RCC_ClockConfig+0xf6>
 8007390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007394:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007398:	fa93 f3a3 	rbit	r3, r3
 800739c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d102      	bne.n	80073ba <HAL_RCC_ClockConfig+0xa6>
 80073b4:	4b6f      	ldr	r3, [pc, #444]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	e00f      	b.n	80073da <HAL_RCC_ClockConfig+0xc6>
 80073ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c2:	fa93 f3a3 	rbit	r3, r3
 80073c6:	667b      	str	r3, [r7, #100]	; 0x64
 80073c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073cc:	663b      	str	r3, [r7, #96]	; 0x60
 80073ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d0:	fa93 f3a3 	rbit	r3, r3
 80073d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d6:	4b67      	ldr	r3, [pc, #412]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073de:	65ba      	str	r2, [r7, #88]	; 0x58
 80073e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073e2:	fa92 f2a2 	rbit	r2, r2
 80073e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80073e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073ea:	fab2 f282 	clz	r2, r2
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	f042 0220 	orr.w	r2, r2, #32
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	f002 021f 	and.w	r2, r2, #31
 80073fa:	2101      	movs	r1, #1
 80073fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007400:	4013      	ands	r3, r2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d17b      	bne.n	80074fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0f3      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d13c      	bne.n	800748c <HAL_RCC_ClockConfig+0x178>
 8007412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007416:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800741a:	fa93 f3a3 	rbit	r3, r3
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007422:	fab3 f383 	clz	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b01      	cmp	r3, #1
 8007434:	d102      	bne.n	800743c <HAL_RCC_ClockConfig+0x128>
 8007436:	4b4f      	ldr	r3, [pc, #316]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	e00f      	b.n	800745c <HAL_RCC_ClockConfig+0x148>
 800743c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007444:	fa93 f3a3 	rbit	r3, r3
 8007448:	647b      	str	r3, [r7, #68]	; 0x44
 800744a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
 8007450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007452:	fa93 f3a3 	rbit	r3, r3
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007458:	4b46      	ldr	r3, [pc, #280]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007460:	63ba      	str	r2, [r7, #56]	; 0x38
 8007462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007464:	fa92 f2a2 	rbit	r2, r2
 8007468:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800746a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800746c:	fab2 f282 	clz	r2, r2
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	f042 0220 	orr.w	r2, r2, #32
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	f002 021f 	and.w	r2, r2, #31
 800747c:	2101      	movs	r1, #1
 800747e:	fa01 f202 	lsl.w	r2, r1, r2
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d13a      	bne.n	80074fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0b2      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
 800748c:	2302      	movs	r3, #2
 800748e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	fa93 f3a3 	rbit	r3, r3
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800749a:	fab3 f383 	clz	r3, r3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d102      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x1a0>
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	e00d      	b.n	80074d0 <HAL_RCC_ClockConfig+0x1bc>
 80074b4:	2302      	movs	r3, #2
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
 80074c0:	2302      	movs	r3, #2
 80074c2:	623b      	str	r3, [r7, #32]
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	fa93 f3a3 	rbit	r3, r3
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	4b29      	ldr	r3, [pc, #164]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2202      	movs	r2, #2
 80074d2:	61ba      	str	r2, [r7, #24]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	fa92 f2a2 	rbit	r2, r2
 80074da:	617a      	str	r2, [r7, #20]
  return result;
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	fab2 f282 	clz	r2, r2
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	f042 0220 	orr.w	r2, r2, #32
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	f002 021f 	and.w	r2, r2, #31
 80074ee:	2101      	movs	r1, #1
 80074f0:	fa01 f202 	lsl.w	r2, r1, r2
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e079      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fe:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f023 0203 	bic.w	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	491a      	ldr	r1, [pc, #104]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 800750c:	4313      	orrs	r3, r2
 800750e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007510:	f7fc fb2a 	bl	8003b68 <HAL_GetTick>
 8007514:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	e00a      	b.n	800752e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007518:	f7fc fb26 	bl	8003b68 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e061      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f003 020c 	and.w	r2, r3, #12
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	429a      	cmp	r2, r3
 800753e:	d1eb      	bne.n	8007518 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d214      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b08      	ldr	r3, [pc, #32]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 0207 	bic.w	r2, r3, #7
 8007556:	4906      	ldr	r1, [pc, #24]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d005      	beq.n	8007578 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e040      	b.n	80075f2 <HAL_RCC_ClockConfig+0x2de>
 8007570:	40022000 	.word	0x40022000
 8007574:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007584:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <HAL_RCC_ClockConfig+0x2e8>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	491a      	ldr	r1, [pc, #104]	; (80075fc <HAL_RCC_ClockConfig+0x2e8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <HAL_RCC_ClockConfig+0x2e8>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4912      	ldr	r1, [pc, #72]	; (80075fc <HAL_RCC_ClockConfig+0x2e8>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80075b6:	f000 f829 	bl	800760c <HAL_RCC_GetSysClockFreq>
 80075ba:	4601      	mov	r1, r0
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <HAL_RCC_ClockConfig+0x2e8>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075c4:	22f0      	movs	r2, #240	; 0xf0
 80075c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	fa92 f2a2 	rbit	r2, r2
 80075ce:	60fa      	str	r2, [r7, #12]
  return result;
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	fab2 f282 	clz	r2, r2
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	40d3      	lsrs	r3, r2
 80075da:	4a09      	ldr	r2, [pc, #36]	; (8007600 <HAL_RCC_ClockConfig+0x2ec>)
 80075dc:	5cd3      	ldrb	r3, [r2, r3]
 80075de:	fa21 f303 	lsr.w	r3, r1, r3
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <HAL_RCC_ClockConfig+0x2f0>)
 80075e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCC_ClockConfig+0x2f4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fc fa78 	bl	8003ae0 <HAL_InitTick>
  
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3778      	adds	r7, #120	; 0x78
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	40021000 	.word	0x40021000
 8007600:	08009d78 	.word	0x08009d78
 8007604:	20000028 	.word	0x20000028
 8007608:	2000002c 	.word	0x2000002c

0800760c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800760c:	b480      	push	{r7}
 800760e:	b08b      	sub	sp, #44	; 0x2c
 8007610:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	2300      	movs	r3, #0
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 030c 	and.w	r3, r3, #12
 8007632:	2b04      	cmp	r3, #4
 8007634:	d002      	beq.n	800763c <HAL_RCC_GetSysClockFreq+0x30>
 8007636:	2b08      	cmp	r3, #8
 8007638:	d003      	beq.n	8007642 <HAL_RCC_GetSysClockFreq+0x36>
 800763a:	e03c      	b.n	80076b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800763c:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800763e:	623b      	str	r3, [r7, #32]
      break;
 8007640:	e03c      	b.n	80076bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007648:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800764c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	fa92 f2a2 	rbit	r2, r2
 8007654:	607a      	str	r2, [r7, #4]
  return result;
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	fab2 f282 	clz	r2, r2
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	40d3      	lsrs	r3, r2
 8007660:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007662:	5cd3      	ldrb	r3, [r2, r3]
 8007664:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007666:	4b19      	ldr	r3, [pc, #100]	; (80076cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	220f      	movs	r2, #15
 8007670:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	fa92 f2a2 	rbit	r2, r2
 8007678:	60fa      	str	r2, [r7, #12]
  return result;
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	fab2 f282 	clz	r2, r2
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	40d3      	lsrs	r3, r2
 8007684:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007686:	5cd3      	ldrb	r3, [r2, r3]
 8007688:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007694:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	fbb2 f2f3 	udiv	r2, r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	fb02 f303 	mul.w	r3, r2, r3
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
 80076a4:	e004      	b.n	80076b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4a0c      	ldr	r2, [pc, #48]	; (80076dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	623b      	str	r3, [r7, #32]
      break;
 80076b4:	e002      	b.n	80076bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80076b8:	623b      	str	r3, [r7, #32]
      break;
 80076ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076bc:	6a3b      	ldr	r3, [r7, #32]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	372c      	adds	r7, #44	; 0x2c
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40021000 	.word	0x40021000
 80076d0:	007a1200 	.word	0x007a1200
 80076d4:	08009db8 	.word	0x08009db8
 80076d8:	08009dc8 	.word	0x08009dc8
 80076dc:	003d0900 	.word	0x003d0900

080076e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e4:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076e6:	681b      	ldr	r3, [r3, #0]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000028 	.word	0x20000028

080076f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80076fe:	f7ff ffef 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 8007702:	4601      	mov	r1, r0
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800770c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007710:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	fa92 f2a2 	rbit	r2, r2
 8007718:	603a      	str	r2, [r7, #0]
  return result;
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	fab2 f282 	clz	r2, r2
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	40d3      	lsrs	r3, r2
 8007724:	4a04      	ldr	r2, [pc, #16]	; (8007738 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007726:	5cd3      	ldrb	r3, [r2, r3]
 8007728:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40021000 	.word	0x40021000
 8007738:	08009d88 	.word	0x08009d88

0800773c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007742:	f7ff ffcd 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 8007746:	4601      	mov	r1, r0
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007750:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007754:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	fa92 f2a2 	rbit	r2, r2
 800775c:	603a      	str	r2, [r7, #0]
  return result;
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	fab2 f282 	clz	r2, r2
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	40d3      	lsrs	r3, r2
 8007768:	4a04      	ldr	r2, [pc, #16]	; (800777c <HAL_RCC_GetPCLK2Freq+0x40>)
 800776a:	5cd3      	ldrb	r3, [r2, r3]
 800776c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40021000 	.word	0x40021000
 800777c:	08009d88 	.word	0x08009d88

08007780 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b092      	sub	sp, #72	; 0x48
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80d7 	beq.w	800794c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800779e:	2300      	movs	r3, #0
 80077a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077a4:	4b4e      	ldr	r3, [pc, #312]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10e      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b0:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ba:	61d3      	str	r3, [r2, #28]
 80077bc:	4b48      	ldr	r3, [pc, #288]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ce:	4b45      	ldr	r3, [pc, #276]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d118      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077da:	4b42      	ldr	r3, [pc, #264]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a41      	ldr	r2, [pc, #260]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077e6:	f7fc f9bf 	bl	8003b68 <HAL_GetTick>
 80077ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ec:	e008      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ee:	f7fc f9bb 	bl	8003b68 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b64      	cmp	r3, #100	; 0x64
 80077fa:	d901      	bls.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e169      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007800:	4b38      	ldr	r3, [pc, #224]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800780c:	4b34      	ldr	r3, [pc, #208]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8084 	beq.w	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007828:	429a      	cmp	r2, r3
 800782a:	d07c      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800782c:	4b2c      	ldr	r3, [pc, #176]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	fa93 f3a3 	rbit	r3, r3
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	461a      	mov	r2, r3
 8007856:	2301      	movs	r3, #1
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800786a:	fab3 f383 	clz	r3, r3
 800786e:	b2db      	uxtb	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800787e:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04b      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788e:	f7fc f96b 	bl	8003b68 <HAL_GetTick>
 8007892:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007894:	e00a      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007896:	f7fc f967 	bl	8003b68 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d901      	bls.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e113      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80078ac:	2302      	movs	r3, #2
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	fa93 f3a3 	rbit	r3, r3
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
 80078b8:	2302      	movs	r3, #2
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	fa93 f3a3 	rbit	r3, r3
 80078c2:	61fb      	str	r3, [r7, #28]
  return result;
 80078c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c6:	fab3 f383 	clz	r3, r3
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f043 0302 	orr.w	r3, r3, #2
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d108      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80078da:	4b01      	ldr	r3, [pc, #4]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	e00d      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80078e0:	40021000 	.word	0x40021000
 80078e4:	40007000 	.word	0x40007000
 80078e8:	10908100 	.word	0x10908100
 80078ec:	2302      	movs	r3, #2
 80078ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	4b78      	ldr	r3, [pc, #480]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2202      	movs	r2, #2
 80078fe:	613a      	str	r2, [r7, #16]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	fa92 f2a2 	rbit	r2, r2
 8007906:	60fa      	str	r2, [r7, #12]
  return result;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	fab2 f282 	clz	r2, r2
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	f002 021f 	and.w	r2, r2, #31
 800791a:	2101      	movs	r1, #1
 800791c:	fa01 f202 	lsl.w	r2, r1, r2
 8007920:	4013      	ands	r3, r2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0b7      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007926:	4b6d      	ldr	r3, [pc, #436]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	496a      	ldr	r1, [pc, #424]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007938:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800793c:	2b01      	cmp	r3, #1
 800793e:	d105      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007940:	4b66      	ldr	r3, [pc, #408]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4a65      	ldr	r2, [pc, #404]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800794a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f023 0203 	bic.w	r2, r3, #3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	495d      	ldr	r1, [pc, #372]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007976:	4b59      	ldr	r3, [pc, #356]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4956      	ldr	r1, [pc, #344]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007994:	4b51      	ldr	r3, [pc, #324]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	494e      	ldr	r1, [pc, #312]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079b2:	4b4a      	ldr	r3, [pc, #296]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	f023 0210 	bic.w	r2, r3, #16
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	4947      	ldr	r1, [pc, #284]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80079d0:	4b42      	ldr	r3, [pc, #264]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	493f      	ldr	r1, [pc, #252]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079ee:	4b3b      	ldr	r3, [pc, #236]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f023 0220 	bic.w	r2, r3, #32
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	4938      	ldr	r1, [pc, #224]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a0c:	4b33      	ldr	r3, [pc, #204]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	4930      	ldr	r1, [pc, #192]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a2a:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	4929      	ldr	r1, [pc, #164]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d008      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a48:	4b24      	ldr	r3, [pc, #144]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	4921      	ldr	r1, [pc, #132]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	491a      	ldr	r1, [pc, #104]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007a84:	4b15      	ldr	r3, [pc, #84]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	4912      	ldr	r1, [pc, #72]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007aa2:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	490b      	ldr	r1, [pc, #44]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	4903      	ldr	r1, [pc, #12]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3748      	adds	r7, #72	; 0x48
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000

08007ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e084      	b.n	8007bfc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fb f805 	bl	8002b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b28:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b32:	d902      	bls.n	8007b3a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e002      	b.n	8007b40 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b48:	d007      	beq.n	8007b5a <HAL_SPI_Init+0x7a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b52:	d002      	beq.n	8007b5a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b6a:	d903      	bls.n	8007b74 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
 8007b72:	e002      	b.n	8007b7a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	ea42 0103 	orr.w	r1, r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	f003 0204 	and.w	r2, r3, #4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	ea42 0103 	orr.w	r1, r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_SPI_Transmit_IT+0x20>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e06a      	b.n	8007cfa <HAL_SPI_Transmit_IT+0xf6>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_SPI_Transmit_IT+0x34>
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c3c:	e058      	b.n	8007cf0 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d002      	beq.n	8007c50 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c4e:	e04f      	b.n	8007cf0 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2203      	movs	r2, #3
 8007c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c94:	d903      	bls.n	8007c9e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <HAL_SPI_Transmit_IT+0x104>)
 8007c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8007c9c:	e002      	b.n	8007ca4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <HAL_SPI_Transmit_IT+0x108>)
 8007ca2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cac:	d107      	bne.n	8007cbe <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007ccc:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b40      	cmp	r3, #64	; 0x40
 8007cda:	d008      	beq.n	8007cee <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e000      	b.n	8007cf0 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 8007cee:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	08007f95 	.word	0x08007f95
 8007d0c:	08007f4f 	.word	0x08007f4f

08007d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10f      	bne.n	8007d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	099b      	lsrs	r3, r3, #6
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    return;
 8007d52:	e0d8      	b.n	8007f06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <HAL_SPI_IRQHandler+0x66>
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	09db      	lsrs	r3, r3, #7
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
    return;
 8007d74:	e0c7      	b.n	8007f06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10c      	bne.n	8007d9c <HAL_SPI_IRQHandler+0x8c>
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	099b      	lsrs	r3, r3, #6
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	0a1b      	lsrs	r3, r3, #8
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80b5 	beq.w	8007f06 <HAL_SPI_IRQHandler+0x1f6>
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80ae 	beq.w	8007f06 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	099b      	lsrs	r3, r3, #6
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d023      	beq.n	8007dfe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d011      	beq.n	8007de6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc6:	f043 0204 	orr.w	r2, r3, #4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	e00b      	b.n	8007dfe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	693b      	ldr	r3, [r7, #16]
        return;
 8007dfc:	e083      	b.n	8007f06 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d014      	beq.n	8007e34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0e:	f043 0201 	orr.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	0a1b      	lsrs	r3, r3, #8
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e44:	f043 0208 	orr.w	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d050      	beq.n	8007f04 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <HAL_SPI_IRQHandler+0x17e>
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d034      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0203 	bic.w	r2, r2, #3
 8007e9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eaa:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <HAL_SPI_IRQHandler+0x1fc>)
 8007eac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd fe44 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d016      	beq.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	; (8007f0c <HAL_SPI_IRQHandler+0x1fc>)
 8007ed8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd fe2e 	bl	8005b40 <HAL_DMA_Abort_IT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ef6:	e003      	b.n	8007f00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f809 	bl	8007f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007efe:	e000      	b.n	8007f02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007f00:	bf00      	nop
    return;
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
  }
}
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08007f25 	.word	0x08007f25

08007f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ffe5 	bl	8007f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	330c      	adds	r3, #12
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f943 	bl	8008212 <SPI_CloseTx_ISR>
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	881a      	ldrh	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	1c9a      	adds	r2, r3, #2
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f921 	bl	8008212 <SPI_CloseTx_ISR>
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fe8:	e04c      	b.n	8008084 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d048      	beq.n	8008084 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ff2:	f7fb fdb9 	bl	8003b68 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d902      	bls.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d13d      	bne.n	8008084 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008020:	d111      	bne.n	8008046 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802a:	d004      	beq.n	8008036 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008034:	d107      	bne.n	8008046 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	d10f      	bne.n	8008070 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800806e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e00f      	b.n	80080a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4013      	ands	r3, r2
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	429a      	cmp	r2, r3
 8008092:	bf0c      	ite	eq
 8008094:	2301      	moveq	r3, #1
 8008096:	2300      	movne	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d1a3      	bne.n	8007fea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80080ba:	e057      	b.n	800816c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080c2:	d106      	bne.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x26>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d8:	d048      	beq.n	800816c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80080da:	f7fb fd45 	bl	8003b68 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d902      	bls.n	80080f0 <SPI_WaitFifoStateUntilTimeout+0x44>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d13d      	bne.n	800816c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008108:	d111      	bne.n	800812e <SPI_WaitFifoStateUntilTimeout+0x82>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008112:	d004      	beq.n	800811e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800811c:	d107      	bne.n	800812e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800812c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008136:	d10f      	bne.n	8008158 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e008      	b.n	800817e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4013      	ands	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d19f      	bne.n	80080bc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af02      	add	r7, sp, #8
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff ff84 	bl	80080ac <SPI_WaitFifoStateUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e027      	b.n	800820a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	2180      	movs	r1, #128	; 0x80
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff ff07 	bl	8007fd8 <SPI_WaitFlagStateUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d4:	f043 0220 	orr.w	r2, r3, #32
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e014      	b.n	800820a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ff5d 	bl	80080ac <SPI_WaitFifoStateUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e000      	b.n	800820a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800821a:	f7fb fca5 	bl	8003b68 <HAL_GetTick>
 800821e:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800822e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	2164      	movs	r1, #100	; 0x64
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffa6 	bl	8008186 <SPI_EndRxTxTransaction>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008254:	2300      	movs	r3, #0
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	60bb      	str	r3, [r7, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fe48 	bl	8007f10 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008280:	e002      	b.n	8008288 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fb fa86 	bl	8003794 <HAL_SPI_TxCpltCallback>
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e01d      	b.n	80082de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fa fc7a 	bl	8002bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f000 f97c 	bl	80085cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_TIM_Base_Start_IT+0x50>)
 8008308:	4013      	ands	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b06      	cmp	r3, #6
 8008310:	d00b      	beq.n	800832a <HAL_TIM_Base_Start_IT+0x42>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008318:	d007      	beq.n	800832a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	00010007 	.word	0x00010007

0800833c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b02      	cmp	r3, #2
 8008350:	d122      	bne.n	8008398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b02      	cmp	r3, #2
 800835e:	d11b      	bne.n	8008398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0202 	mvn.w	r2, #2
 8008368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f905 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f8f7 	bl	800857a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f908 	bl	80085a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d122      	bne.n	80083ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d11b      	bne.n	80083ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0204 	mvn.w	r2, #4
 80083bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2202      	movs	r2, #2
 80083c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8db 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 80083d8:	e005      	b.n	80083e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8cd 	bl	800857a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f8de 	bl	80085a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d122      	bne.n	8008440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b08      	cmp	r3, #8
 8008406:	d11b      	bne.n	8008440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f06f 0208 	mvn.w	r2, #8
 8008410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2204      	movs	r2, #4
 8008416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8b1 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 800842c:	e005      	b.n	800843a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f8a3 	bl	800857a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f8b4 	bl	80085a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b10      	cmp	r3, #16
 800844c:	d122      	bne.n	8008494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b10      	cmp	r3, #16
 800845a:	d11b      	bne.n	8008494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0210 	mvn.w	r2, #16
 8008464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2208      	movs	r2, #8
 800846a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f887 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 8008480:	e005      	b.n	800848e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f879 	bl	800857a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f88a 	bl	80085a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10e      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d107      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0201 	mvn.w	r2, #1
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f9 fdfe 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ca:	2b80      	cmp	r3, #128	; 0x80
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f98a 	bl	8008800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fa:	d10e      	bne.n	800851a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d107      	bne.n	800851a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f97d 	bl	8008814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b40      	cmp	r3, #64	; 0x40
 8008526:	d10e      	bne.n	8008546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008532:	2b40      	cmp	r3, #64	; 0x40
 8008534:	d107      	bne.n	8008546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800853e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f838 	bl	80085b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b20      	cmp	r3, #32
 8008552:	d10e      	bne.n	8008572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b20      	cmp	r3, #32
 8008560:	d107      	bne.n	8008572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f06f 0220 	mvn.w	r2, #32
 800856a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f93d 	bl	80087ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a3c      	ldr	r2, [pc, #240]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00f      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ea:	d00b      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a39      	ldr	r2, [pc, #228]	; (80086d4 <TIM_Base_SetConfig+0x108>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a38      	ldr	r2, [pc, #224]	; (80086d8 <TIM_Base_SetConfig+0x10c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0x38>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a37      	ldr	r2, [pc, #220]	; (80086dc <TIM_Base_SetConfig+0x110>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d108      	bne.n	8008616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2d      	ldr	r2, [pc, #180]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01b      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d017      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <TIM_Base_SetConfig+0x108>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <TIM_Base_SetConfig+0x10c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00f      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a28      	ldr	r2, [pc, #160]	; (80086dc <TIM_Base_SetConfig+0x110>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a27      	ldr	r2, [pc, #156]	; (80086e0 <TIM_Base_SetConfig+0x114>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <TIM_Base_SetConfig+0x118>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_Base_SetConfig+0x8a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_Base_SetConfig+0x11c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d108      	bne.n	8008668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a10      	ldr	r2, [pc, #64]	; (80086d0 <TIM_Base_SetConfig+0x104>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00f      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a11      	ldr	r2, [pc, #68]	; (80086dc <TIM_Base_SetConfig+0x110>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00b      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <TIM_Base_SetConfig+0x114>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d007      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a0f      	ldr	r2, [pc, #60]	; (80086e4 <TIM_Base_SetConfig+0x118>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_Base_SetConfig+0xe8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a0e      	ldr	r2, [pc, #56]	; (80086e8 <TIM_Base_SetConfig+0x11c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d103      	bne.n	80086bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	615a      	str	r2, [r3, #20]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40000400 	.word	0x40000400
 80086d8:	40000800 	.word	0x40000800
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e063      	b.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a2b      	ldr	r2, [pc, #172]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a2a      	ldr	r2, [pc, #168]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d108      	bne.n	800874a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800873e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d018      	beq.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008776:	d013      	beq.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a18      	ldr	r2, [pc, #96]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00e      	beq.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a17      	ldr	r2, [pc, #92]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d009      	beq.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a12      	ldr	r2, [pc, #72]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d004      	beq.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a13      	ldr	r2, [pc, #76]	; (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10c      	bne.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40013400 	.word	0x40013400
 80087e0:	40000400 	.word	0x40000400
 80087e4:	40000800 	.word	0x40000800
 80087e8:	40014000 	.word	0x40014000

080087ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e040      	b.n	80088bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fa f9d6 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2224      	movs	r2, #36	; 0x24
 8008854:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0201 	bic.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc0e 	bl	8009088 <UART_SetConfig>
 800886c:	4603      	mov	r3, r0
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e022      	b.n	80088bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fe1c 	bl	80094bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689a      	ldr	r2, [r3, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0201 	orr.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fea3 	bl	8009600 <UART_CheckIdleState>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08a      	sub	sp, #40	; 0x28
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d8:	2b20      	cmp	r3, #32
 80088da:	f040 8081 	bne.w	80089e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <HAL_UART_Transmit+0x26>
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e079      	b.n	80089e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_UART_Transmit+0x38>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e072      	b.n	80089e2 <HAL_UART_Transmit+0x11e>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2221      	movs	r2, #33	; 0x21
 800890e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008910:	f7fb f92a 	bl	8003b68 <HAL_GetTick>
 8008914:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892e:	d108      	bne.n	8008942 <HAL_UART_Transmit+0x7e>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	e003      	b.n	800894a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800894a:	e02d      	b.n	80089a8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2200      	movs	r2, #0
 8008954:	2180      	movs	r1, #128	; 0x80
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fe97 	bl	800968a <UART_WaitOnFlagUntilTimeout>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e03d      	b.n	80089e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10b      	bne.n	8008984 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	881a      	ldrh	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008978:	b292      	uxth	r2, r2
 800897a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	3302      	adds	r3, #2
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e008      	b.n	8008996 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	781a      	ldrb	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	b292      	uxth	r2, r2
 800898e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	3301      	adds	r3, #1
 8008994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1cb      	bne.n	800894c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2200      	movs	r2, #0
 80089bc:	2140      	movs	r1, #64	; 0x40
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fe63 	bl	800968a <UART_WaitOnFlagUntilTimeout>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e009      	b.n	80089e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e000      	b.n	80089e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d144      	bne.n	8008a8c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <HAL_UART_Transmit_IT+0x22>
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e03d      	b.n	8008a8e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_UART_Transmit_IT+0x34>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e036      	b.n	8008a8e <HAL_UART_Transmit_IT+0xa2>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2221      	movs	r2, #33	; 0x21
 8008a4e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d107      	bne.n	8008a6a <HAL_UART_Transmit_IT+0x7e>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4a0d      	ldr	r2, [pc, #52]	; (8008a9c <HAL_UART_Transmit_IT+0xb0>)
 8008a66:	665a      	str	r2, [r3, #100]	; 0x64
 8008a68:	e002      	b.n	8008a70 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4a0c      	ldr	r2, [pc, #48]	; (8008aa0 <HAL_UART_Transmit_IT+0xb4>)
 8008a6e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e000      	b.n	8008a8e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008a8c:	2302      	movs	r3, #2
  }
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	080099eb 	.word	0x080099eb
 8008aa0:	08009977 	.word	0x08009977

08008aa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d176      	bne.n	8008ba8 <HAL_UART_Receive_IT+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_UART_Receive_IT+0x22>
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e06f      	b.n	8008baa <HAL_UART_Receive_IT+0x106>
    }

    __HAL_LOCK(huart);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_UART_Receive_IT+0x34>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e068      	b.n	8008baa <HAL_UART_Receive_IT+0x106>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	88fa      	ldrh	r2, [r7, #6]
 8008aea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	88fa      	ldrh	r2, [r7, #6]
 8008af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b04:	d10e      	bne.n	8008b24 <HAL_UART_Receive_IT+0x80>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d105      	bne.n	8008b1a <HAL_UART_Receive_IT+0x76>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b18:	e01a      	b.n	8008b50 <HAL_UART_Receive_IT+0xac>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	22ff      	movs	r2, #255	; 0xff
 8008b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b22:	e015      	b.n	8008b50 <HAL_UART_Receive_IT+0xac>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10d      	bne.n	8008b48 <HAL_UART_Receive_IT+0xa4>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <HAL_UART_Receive_IT+0x9a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	22ff      	movs	r2, #255	; 0xff
 8008b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b3c:	e008      	b.n	8008b50 <HAL_UART_Receive_IT+0xac>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	227f      	movs	r2, #127	; 0x7f
 8008b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b46:	e003      	b.n	8008b50 <HAL_UART_Receive_IT+0xac>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2222      	movs	r2, #34	; 0x22
 8008b5a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b74:	d107      	bne.n	8008b86 <HAL_UART_Receive_IT+0xe2>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <HAL_UART_Receive_IT+0xe2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <HAL_UART_Receive_IT+0x114>)
 8008b82:	661a      	str	r2, [r3, #96]	; 0x60
 8008b84:	e002      	b.n	8008b8c <HAL_UART_Receive_IT+0xe8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a0c      	ldr	r2, [pc, #48]	; (8008bbc <HAL_UART_Receive_IT+0x118>)
 8008b8a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ba2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e000      	b.n	8008baa <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8008ba8:	2302      	movs	r3, #2
  }
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	08009b3f 	.word	0x08009b3f
 8008bbc:	08009a99 	.word	0x08009a99

08008bc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d164      	bne.n	8008ca0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_UART_Transmit_DMA+0x22>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e05d      	b.n	8008ca2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Transmit_DMA+0x34>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e056      	b.n	8008ca2 <HAL_UART_Transmit_DMA+0xe2>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	88fa      	ldrh	r2, [r7, #6]
 8008c0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2221      	movs	r2, #33	; 0x21
 8008c1c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d02a      	beq.n	8008c7c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2a:	4a20      	ldr	r2, [pc, #128]	; (8008cac <HAL_UART_Transmit_DMA+0xec>)
 8008c2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c32:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <HAL_UART_Transmit_DMA+0xf0>)
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c3a:	4a1e      	ldr	r2, [pc, #120]	; (8008cb4 <HAL_UART_Transmit_DMA+0xf4>)
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c42:	2200      	movs	r2, #0
 8008c44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3328      	adds	r3, #40	; 0x28
 8008c56:	461a      	mov	r2, r3
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	f7fc ff12 	bl	8005a82 <HAL_DMA_Start_IT>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2210      	movs	r2, #16
 8008c68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2220      	movs	r2, #32
 8008c76:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e012      	b.n	8008ca2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2240      	movs	r2, #64	; 0x40
 8008c82:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c9a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	080097eb 	.word	0x080097eb
 8008cb0:	08009839 	.word	0x08009839
 8008cb4:	080098d3 	.word	0x080098d3

08008cb8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d16c      	bne.n	8008da8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_UART_Receive_DMA+0x22>
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e065      	b.n	8008daa <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d101      	bne.n	8008cec <HAL_UART_Receive_DMA+0x34>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e05e      	b.n	8008daa <HAL_UART_Receive_DMA+0xf2>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2222      	movs	r2, #34	; 0x22
 8008d0c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d02a      	beq.n	8008d6c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1a:	4a26      	ldr	r2, [pc, #152]	; (8008db4 <HAL_UART_Receive_DMA+0xfc>)
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d22:	4a25      	ldr	r2, [pc, #148]	; (8008db8 <HAL_UART_Receive_DMA+0x100>)
 8008d24:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2a:	4a24      	ldr	r2, [pc, #144]	; (8008dbc <HAL_UART_Receive_DMA+0x104>)
 8008d2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d32:	2200      	movs	r2, #0
 8008d34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	4619      	mov	r1, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d46:	461a      	mov	r2, r3
 8008d48:	88fb      	ldrh	r3, [r7, #6]
 8008d4a:	f7fc fe9a 	bl	8005a82 <HAL_DMA_Start_IT>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2210      	movs	r2, #16
 8008d58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2220      	movs	r2, #32
 8008d66:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e01e      	b.n	8008daa <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d82:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e000      	b.n	8008daa <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
  }
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	08009855 	.word	0x08009855
 8008db8:	080098b7 	.word	0x080098b7
 8008dbc:	080098d3 	.word	0x080098d3

08008dc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008de6:	4013      	ands	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d113      	bne.n	8008e18 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8114 	beq.w	8009036 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
      }
      return;
 8008e16:	e10e      	b.n	8009036 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80d6 	beq.w	8008fcc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80cb 	beq.w	8008fcc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00e      	beq.n	8008e5e <HAL_UART_IRQHandler+0x9e>
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e56:	f043 0201 	orr.w	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00e      	beq.n	8008e86 <HAL_UART_IRQHandler+0xc6>
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e7e:	f043 0204 	orr.w	r2, r3, #4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00e      	beq.n	8008eae <HAL_UART_IRQHandler+0xee>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2204      	movs	r2, #4
 8008ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea6:	f043 0202 	orr.w	r2, r3, #2
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d013      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d104      	bne.n	8008ecc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed8:	f043 0208 	orr.w	r2, r3, #8
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00f      	beq.n	8008f0a <HAL_UART_IRQHandler+0x14a>
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f02:	f043 0220 	orr.w	r2, r3, #32
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8093 	beq.w	800903a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00c      	beq.n	8008f38 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d004      	beq.n	8008f56 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d031      	beq.n	8008fba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fc27 	bl	80097aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d123      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d013      	beq.n	8008faa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f86:	4a30      	ldr	r2, [pc, #192]	; (8009048 <HAL_UART_IRQHandler+0x288>)
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fc fdd6 	bl	8005b40 <HAL_DMA_Abort_IT>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d016      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa8:	e00e      	b.n	8008fc8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f862 	bl	8009074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb0:	e00a      	b.n	8008fc8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f85e 	bl	8009074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb8:	e006      	b.n	8008fc8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f85a 	bl	8009074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008fc6:	e038      	b.n	800903a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc8:	bf00      	nop
    return;
 8008fca:	e036      	b.n	800903a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x232>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d008      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fdfa 	bl	8009be4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ff0:	e026      	b.n	8009040 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00d      	beq.n	8009018 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800900a:	2b00      	cmp	r3, #0
 800900c:	d017      	beq.n	800903e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
    }
    return;
 8009016:	e012      	b.n	800903e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00e      	beq.n	8009040 <HAL_UART_IRQHandler+0x280>
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fd1a 	bl	8009a66 <UART_EndTransmit_IT>
    return;
 8009032:	bf00      	nop
 8009034:	e004      	b.n	8009040 <HAL_UART_IRQHandler+0x280>
      return;
 8009036:	bf00      	nop
 8009038:	e002      	b.n	8009040 <HAL_UART_IRQHandler+0x280>
    return;
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <HAL_UART_IRQHandler+0x280>
    return;
 800903e:	bf00      	nop
  }

}
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	0800994b 	.word	0x0800994b

0800904c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009090:	2300      	movs	r3, #0
 8009092:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80090ba:	f023 030c 	bic.w	r3, r3, #12
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6812      	ldr	r2, [r2, #0]
 80090c2:	6939      	ldr	r1, [r7, #16]
 80090c4:	430b      	orrs	r3, r1
 80090c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	430a      	orrs	r2, r1
 8009100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4aa9      	ldr	r2, [pc, #676]	; (80093ac <UART_SetConfig+0x324>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d121      	bne.n	8009150 <UART_SetConfig+0xc8>
 800910c:	4ba8      	ldr	r3, [pc, #672]	; (80093b0 <UART_SetConfig+0x328>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f003 0303 	and.w	r3, r3, #3
 8009114:	2b03      	cmp	r3, #3
 8009116:	d817      	bhi.n	8009148 <UART_SetConfig+0xc0>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <UART_SetConfig+0x98>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009131 	.word	0x08009131
 8009124:	0800913d 	.word	0x0800913d
 8009128:	08009143 	.word	0x08009143
 800912c:	08009137 	.word	0x08009137
 8009130:	2301      	movs	r3, #1
 8009132:	77fb      	strb	r3, [r7, #31]
 8009134:	e0b2      	b.n	800929c <UART_SetConfig+0x214>
 8009136:	2302      	movs	r3, #2
 8009138:	77fb      	strb	r3, [r7, #31]
 800913a:	e0af      	b.n	800929c <UART_SetConfig+0x214>
 800913c:	2304      	movs	r3, #4
 800913e:	77fb      	strb	r3, [r7, #31]
 8009140:	e0ac      	b.n	800929c <UART_SetConfig+0x214>
 8009142:	2308      	movs	r3, #8
 8009144:	77fb      	strb	r3, [r7, #31]
 8009146:	e0a9      	b.n	800929c <UART_SetConfig+0x214>
 8009148:	2310      	movs	r3, #16
 800914a:	77fb      	strb	r3, [r7, #31]
 800914c:	bf00      	nop
 800914e:	e0a5      	b.n	800929c <UART_SetConfig+0x214>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a97      	ldr	r2, [pc, #604]	; (80093b4 <UART_SetConfig+0x32c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d123      	bne.n	80091a2 <UART_SetConfig+0x11a>
 800915a:	4b95      	ldr	r3, [pc, #596]	; (80093b0 <UART_SetConfig+0x328>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009166:	d012      	beq.n	800918e <UART_SetConfig+0x106>
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916c:	d802      	bhi.n	8009174 <UART_SetConfig+0xec>
 800916e:	2b00      	cmp	r3, #0
 8009170:	d007      	beq.n	8009182 <UART_SetConfig+0xfa>
 8009172:	e012      	b.n	800919a <UART_SetConfig+0x112>
 8009174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009178:	d00c      	beq.n	8009194 <UART_SetConfig+0x10c>
 800917a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800917e:	d003      	beq.n	8009188 <UART_SetConfig+0x100>
 8009180:	e00b      	b.n	800919a <UART_SetConfig+0x112>
 8009182:	2300      	movs	r3, #0
 8009184:	77fb      	strb	r3, [r7, #31]
 8009186:	e089      	b.n	800929c <UART_SetConfig+0x214>
 8009188:	2302      	movs	r3, #2
 800918a:	77fb      	strb	r3, [r7, #31]
 800918c:	e086      	b.n	800929c <UART_SetConfig+0x214>
 800918e:	2304      	movs	r3, #4
 8009190:	77fb      	strb	r3, [r7, #31]
 8009192:	e083      	b.n	800929c <UART_SetConfig+0x214>
 8009194:	2308      	movs	r3, #8
 8009196:	77fb      	strb	r3, [r7, #31]
 8009198:	e080      	b.n	800929c <UART_SetConfig+0x214>
 800919a:	2310      	movs	r3, #16
 800919c:	77fb      	strb	r3, [r7, #31]
 800919e:	bf00      	nop
 80091a0:	e07c      	b.n	800929c <UART_SetConfig+0x214>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a84      	ldr	r2, [pc, #528]	; (80093b8 <UART_SetConfig+0x330>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d123      	bne.n	80091f4 <UART_SetConfig+0x16c>
 80091ac:	4b80      	ldr	r3, [pc, #512]	; (80093b0 <UART_SetConfig+0x328>)
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80091b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091b8:	d012      	beq.n	80091e0 <UART_SetConfig+0x158>
 80091ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091be:	d802      	bhi.n	80091c6 <UART_SetConfig+0x13e>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <UART_SetConfig+0x14c>
 80091c4:	e012      	b.n	80091ec <UART_SetConfig+0x164>
 80091c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091ca:	d00c      	beq.n	80091e6 <UART_SetConfig+0x15e>
 80091cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091d0:	d003      	beq.n	80091da <UART_SetConfig+0x152>
 80091d2:	e00b      	b.n	80091ec <UART_SetConfig+0x164>
 80091d4:	2300      	movs	r3, #0
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e060      	b.n	800929c <UART_SetConfig+0x214>
 80091da:	2302      	movs	r3, #2
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e05d      	b.n	800929c <UART_SetConfig+0x214>
 80091e0:	2304      	movs	r3, #4
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e05a      	b.n	800929c <UART_SetConfig+0x214>
 80091e6:	2308      	movs	r3, #8
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e057      	b.n	800929c <UART_SetConfig+0x214>
 80091ec:	2310      	movs	r3, #16
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	bf00      	nop
 80091f2:	e053      	b.n	800929c <UART_SetConfig+0x214>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a70      	ldr	r2, [pc, #448]	; (80093bc <UART_SetConfig+0x334>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d123      	bne.n	8009246 <UART_SetConfig+0x1be>
 80091fe:	4b6c      	ldr	r3, [pc, #432]	; (80093b0 <UART_SetConfig+0x328>)
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920a:	d012      	beq.n	8009232 <UART_SetConfig+0x1aa>
 800920c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009210:	d802      	bhi.n	8009218 <UART_SetConfig+0x190>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <UART_SetConfig+0x19e>
 8009216:	e012      	b.n	800923e <UART_SetConfig+0x1b6>
 8009218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800921c:	d00c      	beq.n	8009238 <UART_SetConfig+0x1b0>
 800921e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009222:	d003      	beq.n	800922c <UART_SetConfig+0x1a4>
 8009224:	e00b      	b.n	800923e <UART_SetConfig+0x1b6>
 8009226:	2300      	movs	r3, #0
 8009228:	77fb      	strb	r3, [r7, #31]
 800922a:	e037      	b.n	800929c <UART_SetConfig+0x214>
 800922c:	2302      	movs	r3, #2
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	e034      	b.n	800929c <UART_SetConfig+0x214>
 8009232:	2304      	movs	r3, #4
 8009234:	77fb      	strb	r3, [r7, #31]
 8009236:	e031      	b.n	800929c <UART_SetConfig+0x214>
 8009238:	2308      	movs	r3, #8
 800923a:	77fb      	strb	r3, [r7, #31]
 800923c:	e02e      	b.n	800929c <UART_SetConfig+0x214>
 800923e:	2310      	movs	r3, #16
 8009240:	77fb      	strb	r3, [r7, #31]
 8009242:	bf00      	nop
 8009244:	e02a      	b.n	800929c <UART_SetConfig+0x214>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a5d      	ldr	r2, [pc, #372]	; (80093c0 <UART_SetConfig+0x338>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d123      	bne.n	8009298 <UART_SetConfig+0x210>
 8009250:	4b57      	ldr	r3, [pc, #348]	; (80093b0 <UART_SetConfig+0x328>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800925c:	d012      	beq.n	8009284 <UART_SetConfig+0x1fc>
 800925e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009262:	d802      	bhi.n	800926a <UART_SetConfig+0x1e2>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d007      	beq.n	8009278 <UART_SetConfig+0x1f0>
 8009268:	e012      	b.n	8009290 <UART_SetConfig+0x208>
 800926a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926e:	d00c      	beq.n	800928a <UART_SetConfig+0x202>
 8009270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009274:	d003      	beq.n	800927e <UART_SetConfig+0x1f6>
 8009276:	e00b      	b.n	8009290 <UART_SetConfig+0x208>
 8009278:	2300      	movs	r3, #0
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	e00e      	b.n	800929c <UART_SetConfig+0x214>
 800927e:	2302      	movs	r3, #2
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	e00b      	b.n	800929c <UART_SetConfig+0x214>
 8009284:	2304      	movs	r3, #4
 8009286:	77fb      	strb	r3, [r7, #31]
 8009288:	e008      	b.n	800929c <UART_SetConfig+0x214>
 800928a:	2308      	movs	r3, #8
 800928c:	77fb      	strb	r3, [r7, #31]
 800928e:	e005      	b.n	800929c <UART_SetConfig+0x214>
 8009290:	2310      	movs	r3, #16
 8009292:	77fb      	strb	r3, [r7, #31]
 8009294:	bf00      	nop
 8009296:	e001      	b.n	800929c <UART_SetConfig+0x214>
 8009298:	2310      	movs	r3, #16
 800929a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a4:	f040 808e 	bne.w	80093c4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80092a8:	7ffb      	ldrb	r3, [r7, #31]
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d85e      	bhi.n	800936c <UART_SetConfig+0x2e4>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <UART_SetConfig+0x22c>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	080092f9 	.word	0x080092f9
 80092bc:	08009319 	.word	0x08009319
 80092c0:	0800936d 	.word	0x0800936d
 80092c4:	08009335 	.word	0x08009335
 80092c8:	0800936d 	.word	0x0800936d
 80092cc:	0800936d 	.word	0x0800936d
 80092d0:	0800936d 	.word	0x0800936d
 80092d4:	08009355 	.word	0x08009355
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092d8:	f7fe fa0e 	bl	80076f8 <HAL_RCC_GetPCLK1Freq>
 80092dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	005a      	lsls	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	085b      	lsrs	r3, r3, #1
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	61bb      	str	r3, [r7, #24]
        break;
 80092f6:	e03c      	b.n	8009372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092f8:	f7fe fa20 	bl	800773c <HAL_RCC_GetPCLK2Freq>
 80092fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	005a      	lsls	r2, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	441a      	add	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009312:	b29b      	uxth	r3, r3
 8009314:	61bb      	str	r3, [r7, #24]
        break;
 8009316:	e02c      	b.n	8009372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009322:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6852      	ldr	r2, [r2, #4]
 800932a:	fbb3 f3f2 	udiv	r3, r3, r2
 800932e:	b29b      	uxth	r3, r3
 8009330:	61bb      	str	r3, [r7, #24]
        break;
 8009332:	e01e      	b.n	8009372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009334:	f7fe f96a 	bl	800760c <HAL_RCC_GetSysClockFreq>
 8009338:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	005a      	lsls	r2, r3, #1
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	441a      	add	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	fbb2 f3f3 	udiv	r3, r2, r3
 800934e:	b29b      	uxth	r3, r3
 8009350:	61bb      	str	r3, [r7, #24]
        break;
 8009352:	e00e      	b.n	8009372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	fbb2 f3f3 	udiv	r3, r2, r3
 8009366:	b29b      	uxth	r3, r3
 8009368:	61bb      	str	r3, [r7, #24]
        break;
 800936a:	e002      	b.n	8009372 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
        break;
 8009370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b0f      	cmp	r3, #15
 8009376:	d916      	bls.n	80093a6 <UART_SetConfig+0x31e>
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800937e:	d212      	bcs.n	80093a6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	b29b      	uxth	r3, r3
 8009384:	f023 030f 	bic.w	r3, r3, #15
 8009388:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	b29b      	uxth	r3, r3
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	b29a      	uxth	r2, r3
 8009396:	897b      	ldrh	r3, [r7, #10]
 8009398:	4313      	orrs	r3, r2
 800939a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	897a      	ldrh	r2, [r7, #10]
 80093a2:	60da      	str	r2, [r3, #12]
 80093a4:	e07e      	b.n	80094a4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
 80093aa:	e07b      	b.n	80094a4 <UART_SetConfig+0x41c>
 80093ac:	40013800 	.word	0x40013800
 80093b0:	40021000 	.word	0x40021000
 80093b4:	40004400 	.word	0x40004400
 80093b8:	40004800 	.word	0x40004800
 80093bc:	40004c00 	.word	0x40004c00
 80093c0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80093c4:	7ffb      	ldrb	r3, [r7, #31]
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d85b      	bhi.n	8009482 <UART_SetConfig+0x3fa>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0x348>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	08009413 	.word	0x08009413
 80093d8:	08009431 	.word	0x08009431
 80093dc:	08009483 	.word	0x08009483
 80093e0:	0800944d 	.word	0x0800944d
 80093e4:	08009483 	.word	0x08009483
 80093e8:	08009483 	.word	0x08009483
 80093ec:	08009483 	.word	0x08009483
 80093f0:	0800946b 	.word	0x0800946b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f4:	f7fe f980 	bl	80076f8 <HAL_RCC_GetPCLK1Freq>
 80093f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	085a      	lsrs	r2, r3, #1
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	441a      	add	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	fbb2 f3f3 	udiv	r3, r2, r3
 800940c:	b29b      	uxth	r3, r3
 800940e:	61bb      	str	r3, [r7, #24]
        break;
 8009410:	e03a      	b.n	8009488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009412:	f7fe f993 	bl	800773c <HAL_RCC_GetPCLK2Freq>
 8009416:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	085a      	lsrs	r2, r3, #1
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	441a      	add	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	fbb2 f3f3 	udiv	r3, r2, r3
 800942a:	b29b      	uxth	r3, r3
 800942c:	61bb      	str	r3, [r7, #24]
        break;
 800942e:	e02b      	b.n	8009488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800943a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6852      	ldr	r2, [r2, #4]
 8009442:	fbb3 f3f2 	udiv	r3, r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	61bb      	str	r3, [r7, #24]
        break;
 800944a:	e01d      	b.n	8009488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944c:	f7fe f8de 	bl	800760c <HAL_RCC_GetSysClockFreq>
 8009450:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	085a      	lsrs	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	441a      	add	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	b29b      	uxth	r3, r3
 8009466:	61bb      	str	r3, [r7, #24]
        break;
 8009468:	e00e      	b.n	8009488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	fbb2 f3f3 	udiv	r3, r2, r3
 800947c:	b29b      	uxth	r3, r3
 800947e:	61bb      	str	r3, [r7, #24]
        break;
 8009480:	e002      	b.n	8009488 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
        break;
 8009486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d908      	bls.n	80094a0 <UART_SetConfig+0x418>
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009494:	d204      	bcs.n	80094a0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	60da      	str	r2, [r3, #12]
 800949e:	e001      	b.n	80094a4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop

080094bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	f003 0308 	and.w	r3, r3, #8
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01a      	beq.n	80095d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ba:	d10a      	bne.n	80095d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	605a      	str	r2, [r3, #4]
  }
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af02      	add	r7, sp, #8
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800960e:	f7fa faab 	bl	8003b68 <HAL_GetTick>
 8009612:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	2b08      	cmp	r3, #8
 8009620:	d10e      	bne.n	8009640 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f82a 	bl	800968a <UART_WaitOnFlagUntilTimeout>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e020      	b.n	8009682 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b04      	cmp	r3, #4
 800964c:	d10e      	bne.n	800966c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f814 	bl	800968a <UART_WaitOnFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e00a      	b.n	8009682 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	603b      	str	r3, [r7, #0]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969a:	e05d      	b.n	8009758 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d059      	beq.n	8009758 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a4:	f7fa fa60 	bl	8003b68 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d302      	bcc.n	80096ba <UART_WaitOnFlagUntilTimeout+0x30>
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d11b      	bne.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0201 	bic.w	r2, r2, #1
 80096d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2220      	movs	r2, #32
 80096de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e042      	b.n	8009778 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d02b      	beq.n	8009758 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800970a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800970e:	d123      	bne.n	8009758 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009718:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009728:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0201 	bic.w	r2, r2, #1
 8009738:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2220      	movs	r2, #32
 800973e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2220      	movs	r2, #32
 8009744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2220      	movs	r2, #32
 800974a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e00f      	b.n	8009778 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69da      	ldr	r2, [r3, #28]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	4013      	ands	r3, r2
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	bf0c      	ite	eq
 8009768:	2301      	moveq	r3, #1
 800976a:	2300      	movne	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	429a      	cmp	r2, r3
 8009774:	d092      	beq.n	800969c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009796:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0201 	bic.w	r2, r2, #1
 80097d0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d014      	beq.n	800982a <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009816:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009826:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009828:	e002      	b.n	8009830 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7f8 fc34 	bl	8002098 <HAL_UART_TxCpltCallback>
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fc00 	bl	800904c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	2b20      	cmp	r3, #32
 8009868:	d01e      	beq.n	80098a8 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009880:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0201 	bic.w	r2, r2, #1
 8009890:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2220      	movs	r2, #32
 80098a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7f8 fbd7 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f7ff fbcb 	bl	8009060 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f6:	2b80      	cmp	r3, #128	; 0x80
 80098f8:	d109      	bne.n	800990e <UART_DMAError+0x3c>
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b21      	cmp	r3, #33	; 0x21
 80098fe:	d106      	bne.n	800990e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2200      	movs	r2, #0
 8009904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009908:	6978      	ldr	r0, [r7, #20]
 800990a:	f7ff ff39 	bl	8009780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d109      	bne.n	8009930 <UART_DMAError+0x5e>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b22      	cmp	r3, #34	; 0x22
 8009920:	d106      	bne.n	8009930 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800992a:	6978      	ldr	r0, [r7, #20]
 800992c:	f7ff ff3d 	bl	80097aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	f043 0210 	orr.w	r2, r3, #16
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800993c:	6978      	ldr	r0, [r7, #20]
 800993e:	f7ff fb99 	bl	8009074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009942:	bf00      	nop
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fb83 	bl	8009074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009982:	2b21      	cmp	r3, #33	; 0x21
 8009984:	d12b      	bne.n	80099de <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800998c:	b29b      	uxth	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d110      	bne.n	80099b4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099a0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099b0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80099b2:	e014      	b.n	80099de <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	b292      	uxth	r2, r2
 80099c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f6:	2b21      	cmp	r3, #33	; 0x21
 80099f8:	d12f      	bne.n	8009a5a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d110      	bne.n	8009a28 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a14:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a24:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009a26:	e018      	b.n	8009a5a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	881a      	ldrh	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a3a:	b292      	uxth	r2, r2
 8009a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	1c9a      	adds	r2, r3, #2
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	3b01      	subs	r3, #1
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2220      	movs	r2, #32
 8009a82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f8 fb04 	bl	8002098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009aa6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aac:	2b22      	cmp	r3, #34	; 0x22
 8009aae:	d13a      	bne.n	8009b26 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ab6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ab8:	89bb      	ldrh	r3, [r7, #12]
 8009aba:	b2d9      	uxtb	r1, r3
 8009abc:	89fb      	ldrh	r3, [r7, #14]
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac4:	400a      	ands	r2, r1
 8009ac6:	b2d2      	uxtb	r2, r2
 8009ac8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d121      	bne.n	8009b36 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009b00:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0201 	bic.w	r2, r2, #1
 8009b10:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2220      	movs	r2, #32
 8009b16:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7f8 fa9c 	bl	800205c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b24:	e007      	b.n	8009b36 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	699a      	ldr	r2, [r3, #24]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f042 0208 	orr.w	r2, r2, #8
 8009b34:	619a      	str	r2, [r3, #24]
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b4c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b52:	2b22      	cmp	r3, #34	; 0x22
 8009b54:	d13a      	bne.n	8009bcc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b5c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b62:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b64:	89ba      	ldrh	r2, [r7, #12]
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b74:	1c9a      	adds	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d121      	bne.n	8009bdc <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ba6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0201 	bic.w	r2, r2, #1
 8009bb6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7f8 fa49 	bl	800205c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bca:	e007      	b.n	8009bdc <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0208 	orr.w	r2, r2, #8
 8009bda:	619a      	str	r2, [r3, #24]
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009c00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009c04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	43db      	mvns	r3, r3
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4013      	ands	r3, r2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009c2e:	b084      	sub	sp, #16
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	f107 0014 	add.w	r0, r7, #20
 8009c3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	b004      	add	sp, #16
 8009c6e:	4770      	bx	lr

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4e0d      	ldr	r6, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1ba4      	subs	r4, r4, r6
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	42a5      	cmp	r5, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4e0b      	ldr	r6, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f000 f820 	bl	8009cc8 <_init>
 8009c88:	1ba4      	subs	r4, r4, r6
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2500      	movs	r5, #0
 8009c8e:	42a5      	cmp	r5, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c98:	4798      	blx	r3
 8009c9a:	3501      	adds	r5, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ca2:	4798      	blx	r3
 8009ca4:	3501      	adds	r5, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	08009dd8 	.word	0x08009dd8
 8009cac:	08009dd8 	.word	0x08009dd8
 8009cb0:	08009dd8 	.word	0x08009dd8
 8009cb4:	08009ddc 	.word	0x08009ddc

08009cb8 <memset>:
 8009cb8:	4402      	add	r2, r0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d100      	bne.n	8009cc2 <memset+0xa>
 8009cc0:	4770      	bx	lr
 8009cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cc6:	e7f9      	b.n	8009cbc <memset+0x4>

08009cc8 <_init>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr

08009cd4 <_fini>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr
