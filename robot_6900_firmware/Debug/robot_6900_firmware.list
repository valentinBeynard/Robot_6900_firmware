
robot_6900_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08007c68  08007c68  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c68  08007c68  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001594  20000030  08007ca0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  08007ca0  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a983  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033bb  00000000  00000000  0003a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  0003f498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ddb3  00000000  00000000  000409f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014ff0  00000000  00000000  0005e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae744  00000000  00000000  0007379b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  00121f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007bb0 	.word	0x08007bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08007bb0 	.word	0x08007bb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <default_process>:
#include "commands.h"

uint8_t default_process(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	

	return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <check_serial>:

uint8_t check_serial(CMD_PACKET* _cmd_pck, ROBOT6900_HANDLER* h_robot6900)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  //printf("Non-implemented command !!");
	h_robot6900->robot_state->Robot_State = Running;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	709a      	strb	r2, [r3, #2]

	h_robot6900->robot_state->status_update = 1;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	705a      	strb	r2, [r3, #1]
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <NVIC_command_parser_INT>:
 *
 * Fired each time the UART receives a byte command pck, and fill the command pipeline
 *
 */
void NVIC_command_parser_INT(UART_HandleTypeDef *huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	if(CMDs_buffer_size < MAX_COMMAND_STACK_SIZE)
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d817      	bhi.n	8000a86 <NVIC_command_parser_INT+0x42>
	{
		/* Fill pipeline and update ptr */
		CMDs_buffer[CMDs_buffer_size] = Rx_buffer;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <NVIC_command_parser_INT+0x54>)
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <NVIC_command_parser_INT+0x58>)
 8000a62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		CMDs_buffer_size++;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <NVIC_command_parser_INT+0x50>)
 8000a72:	701a      	strb	r2, [r3, #0]

		CMDs_buffer_full = 0;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <NVIC_command_parser_INT+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		// Reactivate receive on Interrupt on 1 byte
		HAL_UART_Receive_IT(huart, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <NVIC_command_parser_INT+0x58>)
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f006 f834 	bl	8006aec <HAL_UART_Receive_IT>
	}
	else
	{
		CMDs_buffer_full = 1;
	}
}
 8000a84:	e002      	b.n	8000a8c <NVIC_command_parser_INT+0x48>
		CMDs_buffer_full = 1;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <NVIC_command_parser_INT+0x5c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000051 	.word	0x20000051
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	2000004c 	.word	0x2000004c
 8000aa0:	20000052 	.word	0x20000052

08000aa4 <uart_init>:
############################################################################
*/

/* Initial the command parser */
void uart_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef* hcrc)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	// Initiate ptr
	_hcrc = hcrc;
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <uart_init+0x2c>)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6013      	str	r3, [r2, #0]
	_huart5 = huart;
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <uart_init+0x30>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]

	// Activate UART Receive Interrupt each 4 bytes received
	HAL_UART_Receive_IT(_huart5, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <uart_init+0x30>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2205      	movs	r2, #5
 8000ac0:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <uart_init+0x34>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 f812 	bl	8006aec <HAL_UART_Receive_IT>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	20000080 	.word	0x20000080
 8000ad8:	2000004c 	.word	0x2000004c

08000adc <cmd_parser_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR cmd_parser_process(ROBOT6900_HANDLER* h_robot6900)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	if(CMDs_buffer_size > 0)
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <cmd_parser_process+0x70>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <cmd_parser_process+0x1a>
	{
		current_state = GET_COMMAND;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <cmd_parser_process+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e002      	b.n	8000afc <cmd_parser_process+0x20>
	}
	else{
		current_state = WAIT;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <cmd_parser_process+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	// Full State Machine Call
	CMD_Parser_Log = (full_state_machine[current_state]).state_process(h_robot6900);
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <cmd_parser_process+0x74>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <cmd_parser_process+0x78>)
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	4798      	blx	r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b12:	701a      	strb	r2, [r3, #0]

	// Process Parser Logs
	if(CMDs_buffer_full == 1)
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <cmd_parser_process+0x80>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10d      	bne.n	8000b38 <cmd_parser_process+0x5c>
	{
		// As we process one command in the pipeline, it's no more full. Reactivate NVIC
		HAL_UART_Receive_IT(_huart5, &Rx_buffer, NVIC_INT_BYTE_SIZE);
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <cmd_parser_process+0x84>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2205      	movs	r2, #5
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <cmd_parser_process+0x88>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 ffe1 	bl	8006aec <HAL_UART_Receive_IT>

		// Notify Pipeline is full
		CMD_Parser_Log |= PARSER_PIPELINE_FULL;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b36:	701a      	strb	r2, [r3, #0]
	}

	// Update Debug LED state regarding Parser state flags
	generate_parser_flag(h_robot6900);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f94f 	bl	8000ddc <generate_parser_flag>

	return CMD_Parser_Log;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <cmd_parser_process+0x7c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000051 	.word	0x20000051
 8000b50:	20000053 	.word	0x20000053
 8000b54:	08007bd8 	.word	0x08007bd8
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000052 	.word	0x20000052
 8000b60:	20000080 	.word	0x20000080
 8000b64:	2000004c 	.word	0x2000004c

08000b68 <get_command>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
COMMANDS_PARSER_ERROR get_command(ROBOT6900_HANDLER* h_robot6900)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000b70:	2301      	movs	r3, #1
 8000b72:	75fb      	strb	r3, [r7, #23]
	uint8_t* raw_packet = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
	CMD_PACKET cmd;
	uint8_t cmd_defined = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75bb      	strb	r3, [r7, #22]

	// Get oldest command in the queue
	raw_packet = CMDs_buffer[0];
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <get_command+0x8c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]

	// Check raw packet validity and create a cmd defined struct
	parser_log = command_integrity(raw_packet, &cmd);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	6938      	ldr	r0, [r7, #16]
 8000b8a:	f000 f837 	bl	8000bfc <command_integrity>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	75fb      	strb	r3, [r7, #23]

	// Search for command in the dispatch table
	if(parser_log == PARSER_OK)
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d120      	bne.n	8000bda <get_command+0x72>
	{
		// Looking if the command is defined
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	757b      	strb	r3, [r7, #21]
 8000b9c:	e015      	b.n	8000bca <get_command+0x62>
		{
			if(cmd.name == dispatch_table[i].name)
 8000b9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ba0:	7d7b      	ldrb	r3, [r7, #21]
 8000ba2:	4915      	ldr	r1, [pc, #84]	; (8000bf8 <get_command+0x90>)
 8000ba4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d10b      	bne.n	8000bc4 <get_command+0x5c>
			{
				cmd_defined = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75bb      	strb	r3, [r7, #22]
				// Process command function
				dispatch_table[i].process(&cmd, h_robot6900);
 8000bb0:	7d7b      	ldrb	r3, [r7, #21]
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <get_command+0x90>)
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4798      	blx	r3
		for(uint8_t i = 0 ; i < NUMBER_OF_COMMAND; i++)
 8000bc4:	7d7b      	ldrb	r3, [r7, #21]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	757b      	strb	r3, [r7, #21]
 8000bca:	7d7b      	ldrb	r3, [r7, #21]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d9e6      	bls.n	8000b9e <get_command+0x36>
			}
		}

		// Check if command was found
		if(!cmd_defined)
 8000bd0:	7dbb      	ldrb	r3, [r7, #22]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <get_command+0x72>
		{
			parser_log = PARSER_NO_CMD;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	75fb      	strb	r3, [r7, #23]
		}
	}

	// Remove command from the buffer and shift next one
	parser_log |= update_pipeline();
 8000bda:	f000 f853 	bl	8000c84 <update_pipeline>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	75fb      	strb	r3, [r7, #23]


	return parser_log;
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	08007bc8 	.word	0x08007bc8

08000bfc <command_integrity>:
 * Check command packet integrity (ID and CRC-8)
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR command_integrity(uint8_t* _raw_packet, CMD_PACKET* _cmd)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	COMMANDS_PARSER_ERROR parser_log = PARSER_OK;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_buffer[2];

	// Avoid SoF byte
	_raw_packet+=1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]

	// Parse 32bits raw_data to the packet_structure.
	*(_cmd) = *(CMD_PACKET*)(_raw_packet);
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6013      	str	r3, [r2, #0]

	// Check Packet ID
	if(_cmd->ID != rx_last_ID + 1)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <command_integrity+0x80>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d002      	beq.n	8000c2e <command_integrity+0x32>
	{
		parser_log = PARSER_WRONG_ID;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e021      	b.n	8000c72 <command_integrity+0x76>
	}
	// Check CRC-8
	else
	{
		/* If ID right, update ID flag for next packet */
		if(_cmd->ID == 0xFF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d103      	bne.n	8000c3e <command_integrity+0x42>
		{
			rx_last_ID = 0;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <command_integrity+0x80>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e003      	b.n	8000c46 <command_integrity+0x4a>
		}
		else
		{
			rx_last_ID = _cmd->ID;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <command_integrity+0x80>)
 8000c44:	701a      	strb	r2, [r3, #0]
		}

		// Calculate 8bits CRC and check for validity
		crc_buffer[0] = _cmd->name;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	733b      	strb	r3, [r7, #12]
		crc_buffer[1] = _cmd->data;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	737b      	strb	r3, [r7, #13]
		if( (uint8_t)(HAL_CRC_Calculate(_hcrc, crc_buffer, 2)) != _cmd->crc)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <command_integrity+0x84>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 ff53 	bl	8003b08 <HAL_CRC_Calculate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d001      	beq.n	8000c72 <command_integrity+0x76>
		{
			parser_log = PARSER_WRONG_CRC;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	73fb      	strb	r3, [r7, #15]
		/*
		 * Nothing if CRC wrong
		 */
	}

	return parser_log;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000054 	.word	0x20000054
 8000c80:	20000084 	.word	0x20000084

08000c84 <update_pipeline>:
 * index 0
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 */
COMMANDS_PARSER_ERROR update_pipeline()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	COMMANDS_PARSER_ERROR parser_log = PARSER_INIT;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]

	// Disable NVIC Interrupt before process on pipeline
	HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000c8e:	2035      	movs	r0, #53	; 0x35
 8000c90:	f002 febb 	bl	8003a0a <HAL_NVIC_DisableIRQ>

	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	71bb      	strb	r3, [r7, #6]
 8000c98:	e00d      	b.n	8000cb6 <update_pipeline+0x32>
	{

		*(CMDs_buffer + i) = *(CMDs_buffer + i + 1);
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <update_pipeline+0x74>)
 8000ca2:	441a      	add	r2, r3
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <update_pipeline+0x74>)
 8000caa:	440b      	add	r3, r1
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < CMDs_buffer_size ; i++)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	71bb      	strb	r3, [r7, #6]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <update_pipeline+0x78>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	79ba      	ldrb	r2, [r7, #6]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3eb      	bcc.n	8000c9a <update_pipeline+0x16>
	}

	if(CMDs_buffer_size - 1 >= 0)
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <update_pipeline+0x78>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db07      	blt.n	8000cde <update_pipeline+0x5a>
	{
		CMDs_buffer_size -= 1;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <update_pipeline+0x78>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <update_pipeline+0x78>)
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e004      	b.n	8000ce8 <update_pipeline+0x64>
	}
	else
	{
		parser_log = PARSER_UNKNOWN;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	71fb      	strb	r3, [r7, #7]
		CMDs_buffer_size = 0;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <update_pipeline+0x78>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	}

	// Enable NVIC Interrupt after critical process on pipeline
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ce8:	2035      	movs	r0, #53	; 0x35
 8000cea:	f002 fe80 	bl	80039ee <HAL_NVIC_EnableIRQ>

	return parser_log;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200000a8 	.word	0x200000a8
 8000cfc:	20000051 	.word	0x20000051

08000d00 <wait>:
 *
 * Nothing to do.
 *
 */
COMMANDS_PARSER_ERROR wait(ROBOT6900_HANDLER* h_robot6900)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return CMD_Parser_Log;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <wait+0x18>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20000000 	.word	0x20000000

08000d1c <parser_return>:
 * Check if firmware has to return data to the HOST, and transmit data on UART5
 *
 * Return global robot state, LIDar packet, ect...
 */
void parser_return(ROBOT6900_HANDLER* h_robot6900)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint8_t tx_pck_size = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

	/* Clear TX_BUFFER */
	//memset(Tx_buffer, 0, TX_BUFFER_SIZE);

	if(h_robot6900->RPlidar->RPlidar_update)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	7a5b      	ldrb	r3, [r3, #9]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <parser_return+0x24>
	{
		parser_OUTPUT_RPlidar(h_robot6900);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f80c 	bl	8000d50 <parser_OUTPUT_RPlidar>
//		HAL_UART_Transmit(_huart5, Tx_buffer, tx_pck_size, 0xFFFF);
		h_robot6900->RPlidar->RPlidar_update = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	725a      	strb	r2, [r3, #9]
//	{
//		HAL_UART_Transmit_IT(_huart, &Tx_buffer, tx_pck_size);
//	}

	/* Clear Robot Update Sate Flag */
	h_robot6900->robot_state->status_update = 0;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	705a      	strb	r2, [r3, #1]

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <parser_OUTPUT_RPlidar>:

	return packet_size;
}

uint8_t parser_OUTPUT_RPlidar(ROBOT6900_HANDLER* h_robot6900)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint16_t pck_size = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	81fb      	strh	r3, [r7, #14]
	/* Init Start of Frame */
	Tx_buffer[0] = (CMD_START_OF_FRAME & tx_last_ID);
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <parser_OUTPUT_RPlidar+0x80>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000d68:	701a      	strb	r2, [r3, #0]
	/* Init Type of Packet */
	Tx_buffer[1] = TX_TYPE_STATE_PCK;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	705a      	strb	r2, [r3, #1]

	// RPlidar Packet Size
	Tx_buffer[2] = (uint8_t)(h_robot6900->RPlidar->data_size & 0x00FF);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000d7e:	709a      	strb	r2, [r3, #2]
	Tx_buffer[3] = (uint8_t)(h_robot6900->RPlidar->data_size >> 8);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000d92:	70da      	strb	r2, [r3, #3]
	Tx_buffer[4] = '\n';
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000d96:	220a      	movs	r2, #10
 8000d98:	711a      	strb	r2, [r3, #4]

	// Send Pre-packet descriptor
	HAL_UART_Transmit(_huart5, &Tx_buffer, 5, 0xFFFF);
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <parser_OUTPUT_RPlidar+0x88>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da2:	2205      	movs	r2, #5
 8000da4:	490b      	ldr	r1, [pc, #44]	; (8000dd4 <parser_OUTPUT_RPlidar+0x84>)
 8000da6:	f005 fdb1 	bl	800690c <HAL_UART_Transmit>

	// Send prepacket (4 bytes in a blocking way)
	HAL_UART_Transmit_IT(_huart5, h_robot6900->RPlidar->data, h_robot6900->RPlidar->data_size);
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <parser_OUTPUT_RPlidar+0x88>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f8d3 1003 	ldr.w	r1, [r3, #3]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	f005 fe37 	bl	8006a34 <HAL_UART_Transmit_IT>

}
 8000dc6:	bf00      	nop
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000055 	.word	0x20000055
 8000dd4:	20000088 	.word	0x20000088
 8000dd8:	20000080 	.word	0x20000080

08000ddc <generate_parser_flag>:

/*
 * Generate the Debug LEDs logics regarding global FSM state (COMMANDS_PARSER_ERROR)
 */
void generate_parser_flag(ROBOT6900_HANDLER* h_robot6900)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	static COMMANDS_PARSER_ERROR previous_log = PARSER_OK;

	// Do not change LEDs statues is parser's flags didn't change
	if(CMD_Parser_Log != previous_log)
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <generate_parser_flag+0xcc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d052      	beq.n	8000e96 <generate_parser_flag+0xba>
	{
		h_robot6900->robot_state->debug_leds = ((CMD_Parser_Log & PARSER_OK) == 1 ? 0x00 : DB_LED3);
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_NO_CMD) == PARSER_NO_CMD ? DB_LED7 : 0x00);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	105b      	asrs	r3, r3, #1
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_WRONG_ID) == PARSER_WRONG_ID || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED8 : 0x00);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	f002 0208 	and.w	r2, r2, #8
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d105      	bne.n	8000e4a <generate_parser_flag+0x6e>
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	f002 0210 	and.w	r2, r2, #16
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d001      	beq.n	8000e4e <generate_parser_flag+0x72>
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	e000      	b.n	8000e50 <generate_parser_flag+0x74>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
		h_robot6900->robot_state->debug_leds |= ((CMD_Parser_Log & PARSER_PIPELINE_FULL) == PARSER_PIPELINE_FULL || (CMD_Parser_Log & PARSER_WRONG_CRC) == PARSER_WRONG_CRC ? DB_LED9 : 0x00);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	f002 0204 	and.w	r2, r2, #4
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d105      	bne.n	8000e7c <generate_parser_flag+0xa0>
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	f002 0210 	and.w	r2, r2, #16
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d001      	beq.n	8000e80 <generate_parser_flag+0xa4>
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	e000      	b.n	8000e82 <generate_parser_flag+0xa6>
 8000e80:	2200      	movs	r2, #0
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	701a      	strb	r2, [r3, #0]

		// Update last parser's flag values
		previous_log = CMD_Parser_Log;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <generate_parser_flag+0xc8>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <generate_parser_flag+0xcc>)
 8000e94:	701a      	strb	r2, [r3, #0]
	}

}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000001 	.word	0x20000001

08000eac <NVIC_RPlidar_INT>:
 *
 * NVIC routine is either reloaded in Simple INT mode or DMA mode, regarding
 * the DMA_Rx flag
 */
void NVIC_RPlidar_INT(UART_HandleTypeDef *huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	/* Switch DMA buffer */
	current_DMA_buffer = (current_DMA_buffer + 1) % RX_NBR_BUFFER;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <NVIC_RPlidar_INT+0x7c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <NVIC_RPlidar_INT+0x80>)
 8000ebc:	fb83 3102 	smull	r3, r1, r3, r2
 8000ec0:	17d3      	asrs	r3, r2, #31
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	440b      	add	r3, r1
 8000eca:	1ad1      	subs	r1, r2, r3
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <NVIC_RPlidar_INT+0x7c>)
 8000ed0:	701a      	strb	r2, [r3, #0]

	/* Set buffer ready to be process */
	buffer_ready = 1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <NVIC_RPlidar_INT+0x84>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]


	if(DMA_Rx)
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <NVIC_RPlidar_INT+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00f      	beq.n	8000f00 <NVIC_RPlidar_INT+0x54>
	{
		/* Reload DMA process with new buffer */
		HAL_UART_Receive_DMA(_huart, RP_Rx_buffer[current_DMA_buffer], DMA_next_packet_size);
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <NVIC_RPlidar_INT+0x8c>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <NVIC_RPlidar_INT+0x7c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2354      	movs	r3, #84	; 0x54
 8000eec:	fb03 f302 	mul.w	r3, r3, r2
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <NVIC_RPlidar_INT+0x90>)
 8000ef2:	1899      	adds	r1, r3, r2
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <NVIC_RPlidar_INT+0x94>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f005 fe85 	bl	8006c08 <HAL_UART_Receive_DMA>
	else
	{
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
	}

}
 8000efe:	e00f      	b.n	8000f20 <NVIC_RPlidar_INT+0x74>
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], NVIC_Rx_next_size);
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <NVIC_RPlidar_INT+0x8c>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <NVIC_RPlidar_INT+0x7c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2354      	movs	r3, #84	; 0x54
 8000f0c:	fb03 f302 	mul.w	r3, r3, r2
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <NVIC_RPlidar_INT+0x90>)
 8000f12:	1899      	adds	r1, r3, r2
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <NVIC_RPlidar_INT+0x98>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f005 fde6 	bl	8006aec <HAL_UART_Receive_IT>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000056 	.word	0x20000056
 8000f2c:	55555556 	.word	0x55555556
 8000f30:	20000057 	.word	0x20000057
 8000f34:	20000058 	.word	0x20000058
 8000f38:	200000c0 	.word	0x200000c0
 8000f3c:	200000c4 	.word	0x200000c4
 8000f40:	2000005a 	.word	0x2000005a
 8000f44:	20000059 	.word	0x20000059

08000f48 <NVIC_Timout_1ms_INT>:
 * RP_lidar Timer interrupt for Timeout communication
 * and motor RPM calculation if enabled.
 *
 */
void NVIC_Timout_1ms_INT(TIM_HandleTypeDef* htim)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(RPM_init == 1)
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <NVIC_Timout_1ms_INT+0x48>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d10d      	bne.n	8000f74 <NVIC_Timout_1ms_INT+0x2c>
	{
		RPM_cnt_1ms += 1;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <NVIC_Timout_1ms_INT+0x4c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <NVIC_Timout_1ms_INT+0x4c>)
 8000f64:	801a      	strh	r2, [r3, #0]
		RPlidar_OUTPUT_cnt += 1;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <NVIC_Timout_1ms_INT+0x50>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <NVIC_Timout_1ms_INT+0x50>)
 8000f70:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		RPlidar_timeout += 1;
	}
}
 8000f72:	e006      	b.n	8000f82 <NVIC_Timout_1ms_INT+0x3a>
		RPlidar_timeout += 1;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <NVIC_Timout_1ms_INT+0x54>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <NVIC_Timout_1ms_INT+0x54>)
 8000f80:	701a      	strb	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000060 	.word	0x20000060
 8000f94:	20000062 	.word	0x20000062
 8000f98:	20000068 	.word	0x20000068
 8000f9c:	2000005e 	.word	0x2000005e

08000fa0 <RPlidar_init>:
 *
 * Set RP_lidar FSM to initiate state.
 *
 */
void RPlidar_init(ROBOT6900_HANDLER* h_robot6900, UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim7)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	// Initiate ptr
	_huart = huart;
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <RPlidar_init+0x40>)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	6013      	str	r3, [r2, #0]
	_htim7 = htim7;
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <RPlidar_init+0x44>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]

	h_robot6900->RPlidar->data = (uint16_t*)(&RPlidar_data);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <RPlidar_init+0x48>)
 8000fbe:	f8c3 2003 	str.w	r2, [r3, #3]

	// Disable Lidar motor
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f003 faa0 	bl	8004510 <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_INIT;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <RPlidar_init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000c0 	.word	0x200000c0
 8000fe4:	200001c0 	.word	0x200001c0
 8000fe8:	200001c4 	.word	0x200001c4
 8000fec:	2000005c 	.word	0x2000005c

08000ff0 <RPlidar_process>:
 *
 * Return the global FSM state (COMMANDS_PARSER_ERROR)
 *
 */
RPLIDAR_ERROR RPlidar_process(ROBOT6900_HANDLER* h_robot6900)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
#ifndef DEBUG
	HAL_IWDG_Refresh(h_robot6900->_hiwdg);
#endif

	// Full State Machine Call
	RPlidar_Log = (RPlidar_FSM[RPlidar_current_state]).state_process(h_robot6900);
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <RPlidar_process+0x44>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <RPlidar_process+0x48>)
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	4798      	blx	r3
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <RPlidar_process+0x4c>)
 800100e:	701a      	strb	r2, [r3, #0]

	if(RPlidar_OUTPUT_cnt >= RPLIDAR_OUTPUT_100ms)
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <RPlidar_process+0x50>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001018:	d306      	bcc.n	8001028 <RPlidar_process+0x38>
	{
		h_robot6900->RPlidar->RPlidar_update = 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2201      	movs	r2, #1
 8001020:	725a      	strb	r2, [r3, #9]
		RPlidar_OUTPUT_cnt = 0;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <RPlidar_process+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	801a      	strh	r2, [r3, #0]
	}

	return RPlidar_Log;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <RPlidar_process+0x4c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000005c 	.word	0x2000005c
 8001038:	08007be8 	.word	0x08007be8
 800103c:	2000005d 	.word	0x2000005d
 8001040:	20000068 	.word	0x20000068

08001044 <init_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR init_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

	// Clear buffers
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e00d      	b.n	800106e <init_state+0x2a>
	{
		memset(RP_Rx_buffer[i], 0, RX_BUFFER_SIZE);
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2254      	movs	r2, #84	; 0x54
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <init_state+0x68>)
 800105c:	4413      	add	r3, r2
 800105e:	2254      	movs	r2, #84	; 0x54
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 fd9c 	bl	8007ba0 <memset>
	for(uint8_t i = 0 ; i < RX_NBR_BUFFER; i++)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d9ee      	bls.n	8001052 <init_state+0xe>
	}

	buffer_ready = 0;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <init_state+0x6c>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	current_DMA_buffer = 0;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <init_state+0x70>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
	RPlidar_timeout = 0;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <init_state+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	RPlidar_hard_failure_cnt = 0;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <init_state+0x78>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

	// Enable Motor spinning
	HAL_GPIO_WritePin(GPIOA, RPLIDAR_EN_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f003 fa3b 	bl	8004510 <HAL_GPIO_WritePin>

	RPlidar_current_state = RP_GET_HEALTH;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <init_state+0x7c>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]

	return RPlidar_Log;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <init_state+0x80>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000c4 	.word	0x200000c4
 80010b0:	20000057 	.word	0x20000057
 80010b4:	20000056 	.word	0x20000056
 80010b8:	2000005e 	.word	0x2000005e
 80010bc:	2000005f 	.word	0x2000005f
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	2000005d 	.word	0x2000005d

080010c8 <health_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR health_state(ROBOT6900_HANDLER* h_robot6900)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	static uint8_t health_process_step = 0;
	static uint8_t descriptor_received = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]

	// health packet
	uint8_t health_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]

	// RPlidar status and error carried by the HEALTH descriptor
	uint8_t status = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	737b      	strb	r3, [r7, #13]
	uint16_t error_code = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	817b      	strh	r3, [r7, #10]

	/* First step of the state, just build the packet and send it */
	if(health_process_step == 0)
 80010e0:	4b6e      	ldr	r3, [pc, #440]	; (800129c <health_state+0x1d4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d128      	bne.n	800113a <health_state+0x72>
	{
		// Build Health packet
		health_pck[0] = REQUEST_SoF;
 80010e8:	23a5      	movs	r3, #165	; 0xa5
 80010ea:	723b      	strb	r3, [r7, #8]
		health_pck[1] = RP_GET_HEALTH_CMD;
 80010ec:	2352      	movs	r3, #82	; 0x52
 80010ee:	727b      	strb	r3, [r7, #9]



		// Send GET_HEALTH pck
		while(uart_log != HAL_OK)
 80010f0:	e00a      	b.n	8001108 <health_state+0x40>
		{
			uart_log = HAL_UART_Transmit(_huart, health_pck, HEALTH_PCK_SIZE, 0xFFFF);
 80010f2:	4b6b      	ldr	r3, [pc, #428]	; (80012a0 <health_state+0x1d8>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fe:	2202      	movs	r2, #2
 8001100:	f005 fc04 	bl	800690c <HAL_UART_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f1      	bne.n	80010f2 <health_state+0x2a>
		}

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <health_state+0x1d8>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <health_state+0x1dc>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	2354      	movs	r3, #84	; 0x54
 800111a:	fb03 f302 	mul.w	r3, r3, r2
 800111e:	4a62      	ldr	r2, [pc, #392]	; (80012a8 <health_state+0x1e0>)
 8001120:	4413      	add	r3, r2
 8001122:	2207      	movs	r2, #7
 8001124:	4619      	mov	r1, r3
 8001126:	f005 fce1 	bl	8006aec <HAL_UART_Receive_IT>

		// Prepare NEXT NVIC interurpt for response packet this time
		NVIC_Rx_next_size = HEALTH_RESPONSE_SIZE;
 800112a:	4b60      	ldr	r3, [pc, #384]	; (80012ac <health_state+0x1e4>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 8001130:	f000 fd28 	bl	8001b84 <RPlidar_start_timeout>

		health_process_step = 1;
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <health_state+0x1d4>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
	}

	/* Second step of the state, wait for lidar response and check for Timeout or Protection flag */
	if(health_process_step == 1)
 800113a:	4b58      	ldr	r3, [pc, #352]	; (800129c <health_state+0x1d4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	f040 80a0 	bne.w	8001284 <health_state+0x1bc>
	{
		// Read Descriptor response and Packet Response
		if(buffer_ready == 1)
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <health_state+0x1e8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	f040 808d 	bne.w	800126a <health_state+0x1a2>
		{
			// Read Packet Descriptor
			if(descriptor_received == 0)
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <health_state+0x1ec>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d109      	bne.n	800116c <health_state+0xa4>
			{
				// Read, check and save descriptor pck
				descriptor_received = RPlidar_get_descriptor_pck();
 8001158:	f000 fd9c 	bl	8001c94 <RPlidar_get_descriptor_pck>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <health_state+0x1ec>)
 8001162:	701a      	strb	r2, [r3, #0]
				// Prepare NEXT NVIC interurpt for response packet this time
				NVIC_Rx_next_size = RESPONSE_DESCRIPTOR_SIZE;
 8001164:	4b51      	ldr	r3, [pc, #324]	; (80012ac <health_state+0x1e4>)
 8001166:	2207      	movs	r2, #7
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e08b      	b.n	8001284 <health_state+0x1bc>
			}
			else
			{
				// Read 4th byte of the Health response descriptor, containing status description
				status = AVAILABLE_RX_BUFFER(0);
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <health_state+0x1dc>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	1c99      	adds	r1, r3, #2
 8001172:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <health_state+0x1f0>)
 8001174:	fb83 3201 	smull	r3, r2, r3, r1
 8001178:	17cb      	asrs	r3, r1, #31
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	1aca      	subs	r2, r1, r3
 8001184:	4948      	ldr	r1, [pc, #288]	; (80012a8 <health_state+0x1e0>)
 8001186:	2354      	movs	r3, #84	; 0x54
 8001188:	fb03 f302 	mul.w	r3, r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	737b      	strb	r3, [r7, #13]
				// Get error_code in case
				error_code = ((uint16_t)(AVAILABLE_RX_BUFFER(1)) << 8) + AVAILABLE_RX_BUFFER(2);
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <health_state+0x1dc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	1c99      	adds	r1, r3, #2
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <health_state+0x1f0>)
 800119a:	fb83 3201 	smull	r3, r2, r3, r1
 800119e:	17cb      	asrs	r3, r1, #31
 80011a0:	1ad2      	subs	r2, r2, r3
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	1aca      	subs	r2, r1, r3
 80011aa:	493f      	ldr	r1, [pc, #252]	; (80012a8 <health_state+0x1e0>)
 80011ac:	2354      	movs	r3, #84	; 0x54
 80011ae:	fb03 f302 	mul.w	r3, r3, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	3301      	adds	r3, #1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b298      	uxth	r0, r3
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <health_state+0x1dc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	1c99      	adds	r1, r3, #2
 80011c4:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <health_state+0x1f0>)
 80011c6:	fb83 3201 	smull	r3, r2, r3, r1
 80011ca:	17cb      	asrs	r3, r1, #31
 80011cc:	1ad2      	subs	r2, r2, r3
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	1aca      	subs	r2, r1, r3
 80011d6:	4934      	ldr	r1, [pc, #208]	; (80012a8 <health_state+0x1e0>)
 80011d8:	2354      	movs	r3, #84	; 0x54
 80011da:	fb03 f302 	mul.w	r3, r3, r2
 80011de:	440b      	add	r3, r1
 80011e0:	3302      	adds	r3, #2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4403      	add	r3, r0
 80011e8:	817b      	strh	r3, [r7, #10]

				buffer_ready = 0;
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <health_state+0x1e8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

				// Check Protection error
				if(status == HEALTH_PROTECTION_ERR)
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d126      	bne.n	8001244 <health_state+0x17c>
				{
					RPlidar_hard_failure_cnt++;
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <health_state+0x1f4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <health_state+0x1f4>)
 8001200:	701a      	strb	r2, [r3, #0]
					if(RPlidar_hard_failure_cnt < HEALTH_HARD_FAILURE_LIMIT)
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <health_state+0x1f4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b09      	cmp	r3, #9
 8001208:	d809      	bhi.n	800121e <health_state+0x156>
					{
						RPlidar_current_state = RP_RESET;	/* ------------> */
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <health_state+0x1f8>)
 800120c:	2204      	movs	r2, #4
 800120e:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <health_state+0x1d4>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <health_state+0x1ec>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e008      	b.n	8001230 <health_state+0x168>
					}
					else
					{
						RPlidar_current_state = RP_HARD_ERR;	/* ------------> */
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <health_state+0x1f8>)
 8001220:	2203      	movs	r2, #3
 8001222:	701a      	strb	r2, [r3, #0]
						health_process_step = 0;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <health_state+0x1d4>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
						descriptor_received = 0;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <health_state+0x1ec>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
					}

					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	7b7a      	ldrb	r2, [r7, #13]
 8001236:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	897a      	ldrh	r2, [r7, #10]
 800123e:	f8a3 2001 	strh.w	r2, [r3, #1]
 8001242:	e01f      	b.n	8001284 <health_state+0x1bc>
				}
				// Evrything's OK, then jump to next state
				else
				{
					// Update RPlidar handler
					h_robot6900->RPlidar->state = status;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	7b7a      	ldrb	r2, [r7, #13]
 800124a:	701a      	strb	r2, [r3, #0]
					h_robot6900->RPlidar->error_code = error_code;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	f8a3 2001 	strh.w	r2, [r3, #1]

					// Jump to next state
					RPlidar_current_state = RP_START_SCAN;	/* ------------> */
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <health_state+0x1f8>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
					health_process_step = 0;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <health_state+0x1d4>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
					descriptor_received = 0;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <health_state+0x1ec>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e00c      	b.n	8001284 <health_state+0x1bc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 2)
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <health_state+0x1fc>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d907      	bls.n	8001284 <health_state+0x1bc>
			{
				RPlidar_timeout = 0;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <health_state+0x1fc>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 800127a:	f000 fc93 	bl	8001ba4 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <health_state+0x1f8>)
 8001280:	2202      	movs	r2, #2
 8001282:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// If we jump to another step, reinitialize the inside step value to 0
	if(RPlidar_current_state != RP_GET_HEALTH)
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <health_state+0x1f8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d002      	beq.n	8001292 <health_state+0x1ca>
	{
		health_process_step = 0;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <health_state+0x1d4>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	}

	return log;
 8001292:	7bbb      	ldrb	r3, [r7, #14]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000073 	.word	0x20000073
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	20000056 	.word	0x20000056
 80012a8:	200000c4 	.word	0x200000c4
 80012ac:	20000059 	.word	0x20000059
 80012b0:	20000057 	.word	0x20000057
 80012b4:	20000074 	.word	0x20000074
 80012b8:	55555556 	.word	0x55555556
 80012bc:	2000005f 	.word	0x2000005f
 80012c0:	2000005c 	.word	0x2000005c
 80012c4:	2000005e 	.word	0x2000005e

080012c8 <reset_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR reset_state(ROBOT6900_HANDLER* h_robot6900)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;
	static uint8_t wait_cnt = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73bb      	strb	r3, [r7, #14]

	uint8_t reset_pck[HEALTH_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]

	if(reset_process_step == 0)
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <reset_state+0x8c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d118      	bne.n	8001312 <reset_state+0x4a>
	{
		// Build Reset packet
		reset_pck[0] = REQUEST_SoF;
 80012e0:	23a5      	movs	r3, #165	; 0xa5
 80012e2:	733b      	strb	r3, [r7, #12]
		reset_pck[1] = RP_RESET_CMD;
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	737b      	strb	r3, [r7, #13]

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80012e8:	e00a      	b.n	8001300 <reset_state+0x38>
		{
			uart_log = HAL_UART_Transmit(_huart, reset_pck, RESET_PCK_SIZE, 0xFFFF);
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <reset_state+0x90>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f107 010c 	add.w	r1, r7, #12
 80012f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f6:	2202      	movs	r2, #2
 80012f8:	f005 fb08 	bl	800690c <HAL_UART_Transmit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
		while(uart_log != HAL_OK)
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f1      	bne.n	80012ea <reset_state+0x22>
		}

		// Start Timeout to test COM error
		RPlidar_start_timeout();
 8001306:	f000 fc3d 	bl	8001b84 <RPlidar_start_timeout>

		reset_process_step = 1;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <reset_state+0x8c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e01a      	b.n	8001348 <reset_state+0x80>
	}
	else
	{
		// Wait for the 2ms WAIT before the lidar wakes up
		if(RPlidar_timeout)
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <reset_state+0x94>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d015      	beq.n	8001348 <reset_state+0x80>
		{
			wait_cnt++;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <reset_state+0x98>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <reset_state+0x98>)
 8001326:	701a      	strb	r2, [r3, #0]
			RPlidar_timeout = 0;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <reset_state+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
			if(wait_cnt >= 2)	// TIMER_INT each 1ms, so wait_cnt > 2 to get 2ms
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <reset_state+0x98>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d908      	bls.n	8001348 <reset_state+0x80>
			{
				RPlidar_current_state = RP_GET_HEALTH;	/* ------------> */
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <reset_state+0x9c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <reset_state+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
				wait_cnt = 0;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <reset_state+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return log;
 8001348:	7bbb      	ldrb	r3, [r7, #14]

}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000075 	.word	0x20000075
 8001358:	200000c0 	.word	0x200000c0
 800135c:	2000005e 	.word	0x2000005e
 8001360:	20000076 	.word	0x20000076
 8001364:	2000005c 	.word	0x2000005c

08001368 <start_scan_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR start_scan_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	static uint8_t reset_process_step = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001370:	2301      	movs	r3, #1
 8001372:	75bb      	strb	r3, [r7, #22]

	uint8_t scan_pck[START_SCAN_PCK_SIZE];
	HAL_StatusTypeDef uart_log = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	75fb      	strb	r3, [r7, #23]

	/* PCK INITIALISATION AND TX */
	if(reset_process_step == 0)
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <start_scan_state+0xe8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d140      	bne.n	8001402 <start_scan_state+0x9a>
	{
		// Build EXPRESS Scan packet
		scan_pck[0] = REQUEST_SoF;
 8001380:	23a5      	movs	r3, #165	; 0xa5
 8001382:	733b      	strb	r3, [r7, #12]
		scan_pck[1] = RP_EXPRESS_SCAN_CMD;
 8001384:	2382      	movs	r3, #130	; 0x82
 8001386:	737b      	strb	r3, [r7, #13]

		scan_pck[2] = 5; // Payload Size
 8001388:	2305      	movs	r3, #5
 800138a:	73bb      	strb	r3, [r7, #14]

		scan_pck[3] = 0; // Working Mode. Set to 0. See datasheet
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
		scan_pck[4] = 0;	// Reserved
 8001390:	2300      	movs	r3, #0
 8001392:	743b      	strb	r3, [r7, #16]
		scan_pck[5] = 0;	// Reserved
 8001394:	2300      	movs	r3, #0
 8001396:	747b      	strb	r3, [r7, #17]
		scan_pck[6] = 0;	// Reserved
 8001398:	2300      	movs	r3, #0
 800139a:	74bb      	strb	r3, [r7, #18]
		scan_pck[7] = 0;	// Reserved
 800139c:	2300      	movs	r3, #0
 800139e:	74fb      	strb	r3, [r7, #19]

		scan_pck[8] = RPlidar_checksum(scan_pck, START_SCAN_PCK_SIZE - 1); // Checksum
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2108      	movs	r1, #8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fc54 	bl	8001c54 <RPlidar_checksum>
 80013ac:	4603      	mov	r3, r0
 80013ae:	753b      	strb	r3, [r7, #20]

		// Prepare Rx to switch to DMA mode for constant DATA acquisition
		DMA_Rx = 1;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <start_scan_state+0xec>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
		DMA_next_packet_size = EXPRESS_SCAN_RESPONSE_SIZE;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <start_scan_state+0xf0>)
 80013b8:	2254      	movs	r2, #84	; 0x54
 80013ba:	801a      	strh	r2, [r3, #0]

		// Initiate Rx INT to get Descriptor Pck in NVIC INT mode
		HAL_UART_Receive_IT(_huart, RP_Rx_buffer[current_DMA_buffer], RESPONSE_DESCRIPTOR_SIZE);
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <start_scan_state+0xf4>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <start_scan_state+0xf8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	2354      	movs	r3, #84	; 0x54
 80013c8:	fb03 f302 	mul.w	r3, r3, r2
 80013cc:	4a25      	ldr	r2, [pc, #148]	; (8001464 <start_scan_state+0xfc>)
 80013ce:	4413      	add	r3, r2
 80013d0:	2207      	movs	r2, #7
 80013d2:	4619      	mov	r1, r3
 80013d4:	f005 fb8a 	bl	8006aec <HAL_UART_Receive_IT>

		// Send RESET_PCK pck
		while(uart_log != HAL_OK)
 80013d8:	e00a      	b.n	80013f0 <start_scan_state+0x88>
		{
			uart_log = HAL_UART_Transmit(_huart, scan_pck, START_SCAN_PCK_SIZE, 0xFFFF);
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <start_scan_state+0xf4>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f107 010c 	add.w	r1, r7, #12
 80013e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e6:	2209      	movs	r2, #9
 80013e8:	f005 fa90 	bl	800690c <HAL_UART_Transmit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
		while(uart_log != HAL_OK)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f1      	bne.n	80013da <start_scan_state+0x72>
		}


		// Start Timeout to test COM error
		RPlidar_start_timeout();
 80013f6:	f000 fbc5 	bl	8001b84 <RPlidar_start_timeout>

		reset_process_step = 1;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <start_scan_state+0xe8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e020      	b.n	8001444 <start_scan_state+0xdc>
	}
	/* RECEIVE DESCRIPTOR, CHECK VALIDITY AND TIMEOUT */
	else
	{
		// Check if communication with the lidar timed out
		if(buffer_ready == 1)
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <start_scan_state+0x100>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d10b      	bne.n	8001424 <start_scan_state+0xbc>
		{
			// Read, check and save descriptor pck. Return 1 if OK
			if(RPlidar_get_descriptor_pck() == 1)
 800140c:	f000 fc42 	bl	8001c94 <RPlidar_get_descriptor_pck>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d116      	bne.n	8001444 <start_scan_state+0xdc>
			{
				RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <start_scan_state+0x104>)
 8001418:	2206      	movs	r2, #6
 800141a:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <start_scan_state+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e00f      	b.n	8001444 <start_scan_state+0xdc>
		}
		// Wait for Response Descriptor paquet
		else
		{
			// Check if communication with the lidar timed out
			if(RPlidar_timeout >= 20)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <start_scan_state+0x108>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b13      	cmp	r3, #19
 800142c:	d90a      	bls.n	8001444 <start_scan_state+0xdc>
			{
				RPlidar_timeout = 0;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <start_scan_state+0x108>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
				RPlidar_abord_timeout();
 8001434:	f000 fbb6 	bl	8001ba4 <RPlidar_abord_timeout>
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <start_scan_state+0x104>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
				reset_process_step = 0;
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <start_scan_state+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return log;
 8001444:	7dbb      	ldrb	r3, [r7, #22]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000077 	.word	0x20000077
 8001454:	20000058 	.word	0x20000058
 8001458:	2000005a 	.word	0x2000005a
 800145c:	200000c0 	.word	0x200000c0
 8001460:	20000056 	.word	0x20000056
 8001464:	200000c4 	.word	0x200000c4
 8001468:	20000057 	.word	0x20000057
 800146c:	2000005c 	.word	0x2000005c
 8001470:	2000005e 	.word	0x2000005e

08001474 <sampling_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR sampling_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	static uint8_t init_process_buffer = 0;

	RPLIDAR_ERROR log = RPLIDAR_OK;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]

	uint8_t timeout_cnt = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]

	/* WAIT FOR EXPRESS SCAN RESPONSE PCK */
	if(buffer_ready == 1)
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <sampling_state+0x78>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d111      	bne.n	80014b2 <sampling_state+0x3e>
	{
		// Wait for the 1st buffer to be filled
		if(init_process_buffer == 0)
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <sampling_state+0x7c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <sampling_state+0x30>
		{
			init_process_buffer = 1;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <sampling_state+0x7c>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
			buffer_ready = 0;
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <sampling_state+0x78>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e01b      	b.n	80014dc <sampling_state+0x68>
		}
		// Wait for the 2nd buffer to be filled
		else
		{
			buffer_ready = 0;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <sampling_state+0x78>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
			RPlidar_current_state = RP_PROCESS;	/* ------------> */
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <sampling_state+0x80>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e014      	b.n	80014dc <sampling_state+0x68>

	}
	else
	{
		// Timeout Check (2ms)
		if(RPlidar_timeout)
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <sampling_state+0x84>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00f      	beq.n	80014dc <sampling_state+0x68>
		{
			RPlidar_timeout = 0;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <sampling_state+0x84>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			if(timeout_cnt >= 20)
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	2b13      	cmp	r3, #19
 80014c6:	d906      	bls.n	80014d6 <sampling_state+0x62>
			{
				RPlidar_current_state = RP_COM_ERR;	/* ------------> */
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <sampling_state+0x80>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	701a      	strb	r2, [r3, #0]
				init_process_buffer = 0;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <sampling_state+0x7c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e002      	b.n	80014dc <sampling_state+0x68>
			}
			else
			{
				timeout_cnt++;
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	3301      	adds	r3, #1
 80014da:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	return log;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000057 	.word	0x20000057
 80014f0:	20000078 	.word	0x20000078
 80014f4:	2000005c 	.word	0x2000005c
 80014f8:	2000005e 	.word	0x2000005e

080014fc <processing_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR processing_state(ROBOT6900_HANDLER* h_robot6900)
{
 80014fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001500:	b089      	sub	sp, #36	; 0x24
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	static uint16_t nbr_scan = 0;
	static uint8_t process_cnt = 0;
	static uint16_t max_ptnumber = 0;
#endif

	uint8_t pck_checksum = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	773b      	strb	r3, [r7, #28]
	uint8_t real_checksum = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	76fb      	strb	r3, [r7, #27]

	uint8_t S_parameter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	76bb      	strb	r3, [r7, #26]

	float start_angle = 0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
	float next_start_angle = 0;
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	613b      	str	r3, [r7, #16]

	uint16_t pt_index = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	83fb      	strh	r3, [r7, #30]

	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]

	/* TODO CHECKSUM TEST */
	real_checksum = RPlidar_checksum(&AVAILABLE_RX_BUFFER(2), EXPRESS_SCAN_RESPONSE_SIZE-2);
 8001526:	4ba7      	ldr	r3, [pc, #668]	; (80017c4 <processing_state+0x2c8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	1c99      	adds	r1, r3, #2
 800152c:	4ba6      	ldr	r3, [pc, #664]	; (80017c8 <processing_state+0x2cc>)
 800152e:	fb83 3201 	smull	r3, r2, r3, r1
 8001532:	17cb      	asrs	r3, r1, #31
 8001534:	1ad2      	subs	r2, r2, r3
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	1aca      	subs	r2, r1, r3
 800153e:	2354      	movs	r3, #84	; 0x54
 8001540:	fb03 f302 	mul.w	r3, r3, r2
 8001544:	3302      	adds	r3, #2
 8001546:	4aa1      	ldr	r2, [pc, #644]	; (80017cc <processing_state+0x2d0>)
 8001548:	4413      	add	r3, r2
 800154a:	2152      	movs	r1, #82	; 0x52
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fb81 	bl	8001c54 <RPlidar_checksum>
 8001552:	4603      	mov	r3, r0
 8001554:	76fb      	strb	r3, [r7, #27]
	pck_checksum = ( (AVAILABLE_RX_BUFFER(0) & 0x0F) + ((AVAILABLE_RX_BUFFER(1) & 0x0F) << 4) );
 8001556:	4b9b      	ldr	r3, [pc, #620]	; (80017c4 <processing_state+0x2c8>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	1c99      	adds	r1, r3, #2
 800155c:	4b9a      	ldr	r3, [pc, #616]	; (80017c8 <processing_state+0x2cc>)
 800155e:	fb83 3201 	smull	r3, r2, r3, r1
 8001562:	17cb      	asrs	r3, r1, #31
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	1aca      	subs	r2, r1, r3
 800156e:	4997      	ldr	r1, [pc, #604]	; (80017cc <processing_state+0x2d0>)
 8001570:	2354      	movs	r3, #84	; 0x54
 8001572:	fb03 f302 	mul.w	r3, r3, r2
 8001576:	440b      	add	r3, r1
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2d8      	uxtb	r0, r3
 8001580:	4b90      	ldr	r3, [pc, #576]	; (80017c4 <processing_state+0x2c8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	1c99      	adds	r1, r3, #2
 8001586:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <processing_state+0x2cc>)
 8001588:	fb83 3201 	smull	r3, r2, r3, r1
 800158c:	17cb      	asrs	r3, r1, #31
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	1aca      	subs	r2, r1, r3
 8001598:	498c      	ldr	r1, [pc, #560]	; (80017cc <processing_state+0x2d0>)
 800159a:	2354      	movs	r3, #84	; 0x54
 800159c:	fb03 f302 	mul.w	r3, r3, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	3301      	adds	r3, #1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4403      	add	r3, r0
 80015ac:	773b      	strb	r3, [r7, #28]

	if(real_checksum != pck_checksum)
 80015ae:	7efa      	ldrb	r2, [r7, #27]
 80015b0:	7f3b      	ldrb	r3, [r7, #28]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d002      	beq.n	80015bc <processing_state+0xc0>
	{
		RPlidar_current_state = RP_COM_ERR;
 80015b6:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <processing_state+0x2d4>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	701a      	strb	r2, [r3, #0]
	}

	/* Get the and REBUILD the Angle of the current Pi packet */
	start_angle = (OLD_RX_BUFFER(2) +
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <processing_state+0x2c8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <processing_state+0x2cc>)
 80015c4:	fb83 3201 	smull	r3, r2, r3, r1
 80015c8:	17cb      	asrs	r3, r1, #31
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	1aca      	subs	r2, r1, r3
 80015d4:	497d      	ldr	r1, [pc, #500]	; (80017cc <processing_state+0x2d0>)
 80015d6:	2354      	movs	r3, #84	; 0x54
 80015d8:	fb03 f302 	mul.w	r3, r3, r2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
			( (uint16_t)( (OLD_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <processing_state+0x2c8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	1c59      	adds	r1, r3, #1
 80015ea:	4b77      	ldr	r3, [pc, #476]	; (80017c8 <processing_state+0x2cc>)
 80015ec:	fb83 3201 	smull	r3, r2, r3, r1
 80015f0:	17cb      	asrs	r3, r1, #31
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	1aca      	subs	r2, r1, r3
 80015fc:	4973      	ldr	r1, [pc, #460]	; (80017cc <processing_state+0x2d0>)
 80015fe:	2354      	movs	r3, #84	; 0x54
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	440b      	add	r3, r1
 8001606:	3303      	adds	r3, #3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	start_angle = (OLD_RX_BUFFER(2) +
 8001610:	4403      	add	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	edc7 7a05 	vstr	s15, [r7, #20]
	start_angle = start_angle / 64.0;
 800161e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001622:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80017d4 <processing_state+0x2d8>
 8001626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800162a:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Get the and REBUILD the Angle of the next Pi+1 packet */
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <processing_state+0x2c8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	1c99      	adds	r1, r3, #2
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <processing_state+0x2cc>)
 8001636:	fb83 3201 	smull	r3, r2, r3, r1
 800163a:	17cb      	asrs	r3, r1, #31
 800163c:	1ad2      	subs	r2, r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	1aca      	subs	r2, r1, r3
 8001646:	4961      	ldr	r1, [pc, #388]	; (80017cc <processing_state+0x2d0>)
 8001648:	2354      	movs	r3, #84	; 0x54
 800164a:	fb03 f302 	mul.w	r3, r3, r2
 800164e:	440b      	add	r3, r1
 8001650:	3302      	adds	r3, #2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
			( (uint16_t)( (AVAILABLE_RX_BUFFER(3) & EXPRESS_SCAN_ANGLE_LSB_MASK) ) << 8) );
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <processing_state+0x2c8>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	1c99      	adds	r1, r3, #2
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <processing_state+0x2cc>)
 800165e:	fb83 3201 	smull	r3, r2, r3, r1
 8001662:	17cb      	asrs	r3, r1, #31
 8001664:	1ad2      	subs	r2, r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	1aca      	subs	r2, r1, r3
 800166e:	4957      	ldr	r1, [pc, #348]	; (80017cc <processing_state+0x2d0>)
 8001670:	2354      	movs	r3, #84	; 0x54
 8001672:	fb03 f302 	mul.w	r3, r3, r2
 8001676:	440b      	add	r3, r1
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
	next_start_angle = (AVAILABLE_RX_BUFFER(2) +
 8001682:	4403      	add	r3, r0
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168c:	edc7 7a04 	vstr	s15, [r7, #16]
	next_start_angle = next_start_angle / 64.0;
 8001690:	ed97 7a04 	vldr	s14, [r7, #16]
 8001694:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80017d4 <processing_state+0x2d8>
 8001698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169c:	edc7 7a04 	vstr	s15, [r7, #16]


	/* Calculate the S parameter, in order to detect a new 360 Scan */
	S_parameter = (start_angle > next_start_angle ? 1 : 0);
 80016a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80016a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	bfcc      	ite	gt
 80016b2:	2301      	movgt	r3, #1
 80016b4:	2300      	movle	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	76bb      	strb	r3, [r7, #26]

#ifdef RPLIDAR_DEBUG
	process_cnt++;
#endif
	// If new scan detected, refresh data by starting at RPlidar_data[0]
	if(S_parameter == 1)
 80016ba:	7ebb      	ldrb	r3, [r7, #26]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d111      	bne.n	80016e4 <processing_state+0x1e8>
	{
		RPlidar_RPM = RPlidar_measure_RPM();
 80016c0:	f000 fa7e 	bl	8001bc0 <RPlidar_measure_RPM>
 80016c4:	eef0 7a40 	vmov.f32	s15, s0
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <processing_state+0x2dc>)
 80016ca:	edc3 7a00 	vstr	s15, [r3]
		// Times 2 since h_robot6900->RPlidar->data is a 16bits ptr instead of 32bits ptr
		h_robot6900->RPlidar->data_size = 2 * current_data_index;
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <processing_state+0x2e0>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2007 	strh.w	r2, [r3, #7]
		{
			nbr_scan++;
		}
#endif

		current_data_index = 0;
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <processing_state+0x2e0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	801a      	strh	r2, [r3, #0]



	/* CALCULATE DATA POINTS using Pi (in LiDAR_process_buffer) and Pi+1 */
	/* Processing de-compressing calculation */
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	777b      	strb	r3, [r7, #29]
 80016e8:	e1ed      	b.n	8001ac6 <processing_state+0x5ca>
	{
		// Point index in the result RPLIDAR_DATA array
		pt_index = (cabin_i * 2);
 80016ea:	7f7b      	ldrb	r3, [r7, #29]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	83fb      	strh	r3, [r7, #30]

		// Security check on index
		if(current_data_index + pt_index + 1 >= SAMPLES_PER_360)
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <processing_state+0x2e0>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	4413      	add	r3, r2
 80016fc:	3301      	adds	r3, #1
 80016fe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8001702:	db04      	blt.n	800170e <processing_state+0x212>
		{
			RPlidar_current_state = RP_COM_ERR;
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <processing_state+0x2d4>)
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
			return log;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	e1ec      	b.n	8001ae8 <processing_state+0x5ec>
		}

		// Process point 1 in Cabin Ci
		RPlidar_data[current_data_index + pt_index].distance = F_CABIN_DISTANCE1(cabin_i);
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <processing_state+0x2c8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <processing_state+0x2cc>)
 8001716:	fb83 3201 	smull	r3, r2, r3, r1
 800171a:	17cb      	asrs	r3, r1, #31
 800171c:	1ad2      	subs	r2, r2, r3
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	1aca      	subs	r2, r1, r3
 8001726:	7f79      	ldrb	r1, [r7, #29]
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	4926      	ldr	r1, [pc, #152]	; (80017cc <processing_state+0x2d0>)
 8001732:	2054      	movs	r0, #84	; 0x54
 8001734:	fb00 f202 	mul.w	r2, r0, r2
 8001738:	440a      	add	r2, r1
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001744:	b298      	uxth	r0, r3
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <processing_state+0x2c8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <processing_state+0x2cc>)
 800174e:	fb83 3201 	smull	r3, r2, r3, r1
 8001752:	17cb      	asrs	r3, r1, #31
 8001754:	1ad2      	subs	r2, r2, r3
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	1aca      	subs	r2, r1, r3
 800175e:	7f7b      	ldrb	r3, [r7, #29]
 8001760:	1c59      	adds	r1, r3, #1
 8001762:	460b      	mov	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	4918      	ldr	r1, [pc, #96]	; (80017cc <processing_state+0x2d0>)
 800176a:	2454      	movs	r4, #84	; 0x54
 800176c:	fb04 f202 	mul.w	r2, r4, r2
 8001770:	440a      	add	r2, r1
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	b29b      	uxth	r3, r3
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <processing_state+0x2e0>)
 800177e:	8812      	ldrh	r2, [r2, #0]
 8001780:	4611      	mov	r1, r2
 8001782:	8bfa      	ldrh	r2, [r7, #30]
 8001784:	440a      	add	r2, r1
 8001786:	4403      	add	r3, r0
 8001788:	b298      	uxth	r0, r3
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <processing_state+0x2e4>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	4602      	mov	r2, r0
 8001798:	801a      	strh	r2, [r3, #0]
		RPlidar_data[current_data_index + pt_index].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * pt_index - (float)(F_CABIN_DANGLE1(cabin_i));
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7fe fe78 	bl	8000490 <__aeabi_f2d>
 80017a0:	4604      	mov	r4, r0
 80017a2:	460d      	mov	r5, r1
 80017a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80017a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d818      	bhi.n	80017e8 <processing_state+0x2ec>
 80017b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80017ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	e01b      	b.n	80017fc <processing_state+0x300>
 80017c4:	20000056 	.word	0x20000056
 80017c8:	55555556 	.word	0x55555556
 80017cc:	200000c4 	.word	0x200000c4
 80017d0:	2000005c 	.word	0x2000005c
 80017d4:	42800000 	.word	0x42800000
 80017d8:	20000064 	.word	0x20000064
 80017dc:	2000007a 	.word	0x2000007a
 80017e0:	200001c4 	.word	0x200001c4
 80017e4:	43b40000 	.word	0x43b40000
 80017e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ec:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80017e4 <processing_state+0x2e8>
 80017f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	ee17 0a90 	vmov	r0, s15
 8001800:	f7fe fe46 	bl	8000490 <__aeabi_f2d>
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4bba      	ldr	r3, [pc, #744]	; (8001af4 <processing_state+0x5f8>)
 800180a:	f7fe ffc3 	bl	8000794 <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe27 	bl	800046c <__aeabi_i2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4640      	mov	r0, r8
 8001824:	4649      	mov	r1, r9
 8001826:	f7fe fe8b 	bl	8000540 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fccf 	bl	80001d4 <__adddf3>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	461d      	mov	r5, r3
 800183c:	4626      	mov	r6, r4
 800183e:	4bae      	ldr	r3, [pc, #696]	; (8001af8 <processing_state+0x5fc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	4bad      	ldr	r3, [pc, #692]	; (8001afc <processing_state+0x600>)
 8001846:	fb83 3201 	smull	r3, r2, r3, r1
 800184a:	17cb      	asrs	r3, r1, #31
 800184c:	1ad2      	subs	r2, r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	1aca      	subs	r2, r1, r3
 8001856:	7f79      	ldrb	r1, [r7, #29]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3308      	adds	r3, #8
 8001860:	49a7      	ldr	r1, [pc, #668]	; (8001b00 <processing_state+0x604>)
 8001862:	2054      	movs	r0, #84	; 0x54
 8001864:	fb00 f202 	mul.w	r2, r0, r2
 8001868:	440a      	add	r2, r1
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f003 000f 	and.w	r0, r3, #15
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <processing_state+0x5fc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <processing_state+0x600>)
 800187a:	fb83 3201 	smull	r3, r2, r3, r1
 800187e:	17cb      	asrs	r3, r1, #31
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	1aca      	subs	r2, r1, r3
 800188a:	7f79      	ldrb	r1, [r7, #29]
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3304      	adds	r3, #4
 8001894:	499a      	ldr	r1, [pc, #616]	; (8001b00 <processing_state+0x604>)
 8001896:	2454      	movs	r4, #84	; 0x54
 8001898:	fb04 f202 	mul.w	r2, r4, r2
 800189c:	440a      	add	r2, r1
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018aa:	4303      	orrs	r3, r0
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b4:	ee17 0a90 	vmov	r0, s15
 80018b8:	f7fe fdea 	bl	8000490 <__aeabi_f2d>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	4628      	mov	r0, r5
 80018c6:	4631      	mov	r1, r6
 80018c8:	f7fe fc82 	bl	80001d0 <__aeabi_dsub>
 80018cc:	4603      	mov	r3, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	4618      	mov	r0, r3
 80018d2:	4621      	mov	r1, r4
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <processing_state+0x608>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	8bfb      	ldrh	r3, [r7, #30]
 80018dc:	18d4      	adds	r4, r2, r3
 80018de:	f7ff f841 	bl	8000964 <__aeabi_d2f>
 80018e2:	4601      	mov	r1, r0
 80018e4:	4a88      	ldr	r2, [pc, #544]	; (8001b08 <processing_state+0x60c>)
 80018e6:	4623      	mov	r3, r4
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4423      	add	r3, r4
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3302      	adds	r3, #2
 80018f2:	460a      	mov	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

		// Process point 2 in Cabin Ci
		RPlidar_data[current_data_index + pt_index + 1].distance = F_CABIN_DISTANCE2(cabin_i);
 80018f6:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <processing_state+0x5fc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	1c59      	adds	r1, r3, #1
 80018fc:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <processing_state+0x600>)
 80018fe:	fb83 3201 	smull	r3, r2, r3, r1
 8001902:	17cb      	asrs	r3, r1, #31
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	1aca      	subs	r2, r1, r3
 800190e:	7f79      	ldrb	r1, [r7, #29]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3306      	adds	r3, #6
 8001918:	4979      	ldr	r1, [pc, #484]	; (8001b00 <processing_state+0x604>)
 800191a:	2054      	movs	r0, #84	; 0x54
 800191c:	fb00 f202 	mul.w	r2, r0, r2
 8001920:	440a      	add	r2, r1
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800192c:	b298      	uxth	r0, r3
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <processing_state+0x5fc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	4b71      	ldr	r3, [pc, #452]	; (8001afc <processing_state+0x600>)
 8001936:	fb83 3201 	smull	r3, r2, r3, r1
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	1aca      	subs	r2, r1, r3
 8001946:	7f79      	ldrb	r1, [r7, #29]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3307      	adds	r3, #7
 8001950:	496b      	ldr	r1, [pc, #428]	; (8001b00 <processing_state+0x604>)
 8001952:	2454      	movs	r4, #84	; 0x54
 8001954:	fb04 f202 	mul.w	r2, r4, r2
 8001958:	440a      	add	r2, r1
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	b29b      	uxth	r3, r3
 8001964:	4a67      	ldr	r2, [pc, #412]	; (8001b04 <processing_state+0x608>)
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	4611      	mov	r1, r2
 800196a:	8bfa      	ldrh	r2, [r7, #30]
 800196c:	440a      	add	r2, r1
 800196e:	3201      	adds	r2, #1
 8001970:	4403      	add	r3, r0
 8001972:	b298      	uxth	r0, r3
 8001974:	4964      	ldr	r1, [pc, #400]	; (8001b08 <processing_state+0x60c>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	4602      	mov	r2, r0
 8001982:	801a      	strh	r2, [r3, #0]
		RPlidar_data[current_data_index + pt_index + 1].angle = start_angle + (DIFF_ANGLE(start_angle, next_start_angle) / 32.0) * (pt_index+1) - (float)(F_CABIN_DANGLE2(cabin_i));
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7fe fd83 	bl	8000490 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001992:	edd7 7a04 	vldr	s15, [r7, #16]
 8001996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d806      	bhi.n	80019ae <processing_state+0x4b2>
 80019a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80019a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	e009      	b.n	80019c2 <processing_state+0x4c6>
 80019ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001b0c <processing_state+0x610>
 80019b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f7fe fd63 	bl	8000490 <__aeabi_f2d>
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <processing_state+0x5f8>)
 80019d0:	f7fe fee0 	bl	8000794 <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4690      	mov	r8, r2
 80019da:	4699      	mov	r9, r3
 80019dc:	8bfb      	ldrh	r3, [r7, #30]
 80019de:	3301      	adds	r3, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd43 	bl	800046c <__aeabi_i2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe fda7 	bl	8000540 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fbeb 	bl	80001d4 <__adddf3>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	461d      	mov	r5, r3
 8001a04:	4626      	mov	r6, r4
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <processing_state+0x5fc>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <processing_state+0x600>)
 8001a0e:	fb83 3201 	smull	r3, r2, r3, r1
 8001a12:	17cb      	asrs	r3, r1, #31
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	1aca      	subs	r2, r1, r3
 8001a1e:	7f79      	ldrb	r1, [r7, #29]
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3308      	adds	r3, #8
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <processing_state+0x604>)
 8001a2a:	2054      	movs	r0, #84	; 0x54
 8001a2c:	fb00 f202 	mul.w	r2, r0, r2
 8001a30:	440a      	add	r2, r1
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 00f0 	and.w	r0, r3, #240	; 0xf0
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <processing_state+0x5fc>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	1c59      	adds	r1, r3, #1
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <processing_state+0x600>)
 8001a42:	fb83 3201 	smull	r3, r2, r3, r1
 8001a46:	17cb      	asrs	r3, r1, #31
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	1aca      	subs	r2, r1, r3
 8001a52:	7f79      	ldrb	r1, [r7, #29]
 8001a54:	460b      	mov	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	4928      	ldr	r1, [pc, #160]	; (8001b00 <processing_state+0x604>)
 8001a5e:	2454      	movs	r4, #84	; 0x54
 8001a60:	fb04 f202 	mul.w	r2, r4, r2
 8001a64:	440a      	add	r2, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a72:	4403      	add	r3, r0
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd06 	bl	8000490 <__aeabi_f2d>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	4631      	mov	r1, r6
 8001a90:	f7fe fb9e 	bl	80001d0 <__aeabi_dsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <processing_state+0x608>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	8bfb      	ldrh	r3, [r7, #30]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	1c5c      	adds	r4, r3, #1
 8001aa8:	f7fe ff5c 	bl	8000964 <__aeabi_d2f>
 8001aac:	4601      	mov	r1, r0
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <processing_state+0x60c>)
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4423      	add	r3, r4
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	460a      	mov	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
	for(uint8_t cabin_i = 0 ; cabin_i < EXPRESS_SCAN_CABIN_NBR; cabin_i++)
 8001ac0:	7f7b      	ldrb	r3, [r7, #29]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	777b      	strb	r3, [r7, #29]
 8001ac6:	7f7b      	ldrb	r3, [r7, #29]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	f67f ae0e 	bls.w	80016ea <processing_state+0x1ee>


	}

	// Save last point index to be added in the array
	current_data_index += pt_index + 1;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <processing_state+0x608>)
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	8bfb      	ldrh	r3, [r7, #30]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <processing_state+0x608>)
 8001ade:	801a      	strh	r2, [r3, #0]
	{
		max_ptnumber = current_data_index;
	}
#endif

	RPlidar_current_state = RP_SAMPLING;	/* ------------> */
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <processing_state+0x614>)
 8001ae2:	2206      	movs	r2, #6
 8001ae4:	701a      	strb	r2, [r3, #0]

	return log;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3724      	adds	r7, #36	; 0x24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001af2:	bf00      	nop
 8001af4:	40400000 	.word	0x40400000
 8001af8:	20000056 	.word	0x20000056
 8001afc:	55555556 	.word	0x55555556
 8001b00:	200000c4 	.word	0x200000c4
 8001b04:	2000007a 	.word	0x2000007a
 8001b08:	200001c4 	.word	0x200001c4
 8001b0c:	43b40000 	.word	0x43b40000
 8001b10:	2000005c 	.word	0x2000005c

08001b14 <stop_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR stop_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

}
 8001b1c:	bf00      	nop
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <COM_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR COM_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100001;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]

	return log;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <hardware_error_state>:
 *
 * Return RPLIDAR_ERROR
 *
 */
RPLIDAR_ERROR hardware_error_state(ROBOT6900_HANDLER* h_robot6900)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
	RPLIDAR_ERROR log = RPLIDAR_OK;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]

	h_robot6900->robot_state->debug_leds |= 0b00100010;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

	return log;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <RPlidar_start_timeout>:
 * Start the Timeout Timer counter
 *
 * Set the counter to 0 to ensure the first Int. fired is still 1ms
 */
void RPlidar_start_timeout()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	_htim7->Instance->CNT = 0;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <RPlidar_start_timeout+0x1c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(_htim7);
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <RPlidar_start_timeout+0x1c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 fba0 	bl	80062dc <HAL_TIM_Base_Start_IT>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200001c0 	.word	0x200001c0

08001ba4 <RPlidar_abord_timeout>:

/*
 * Stop the Timeout Timer counter INT.
 */
void RPlidar_abord_timeout()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(_htim7);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <RPlidar_abord_timeout+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 fbbf 	bl	8006330 <HAL_TIM_Base_Stop_IT>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001c0 	.word	0x200001c0
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <RPlidar_measure_RPM>:
/*
 * Calculate RP_lidar motors speed in Rotation Per Minute,
 * using time taken to acquire a 360 degree scan
 */
float RPlidar_measure_RPM()
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
	float rpm = 0;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]

	// If RPM measurement was not enabled before
	if(RPM_init == 0)
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <RPlidar_measure_RPM+0x88>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d112      	bne.n	8001bfa <RPlidar_measure_RPM+0x3a>
	{
		RPM_init = 1;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <RPlidar_measure_RPM+0x88>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		RPM_cnt_1ms = 0;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <RPlidar_measure_RPM+0x8c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]

		// Init and start 1ms Timer Interrupt
		RPlidar_abord_timeout();
 8001be0:	f7ff ffe0 	bl	8001ba4 <RPlidar_abord_timeout>
		_htim7->Instance->CNT = 0;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <RPlidar_measure_RPM+0x90>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(_htim7);
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <RPlidar_measure_RPM+0x90>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fb72 	bl	80062dc <HAL_TIM_Base_Start_IT>
 8001bf8:	e019      	b.n	8001c2e <RPlidar_measure_RPM+0x6e>

	}
	else
	{
		rpm = ( (60.0 * 1000.0) / (1.0 * RPM_cnt_1ms));
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <RPlidar_measure_RPM+0x8c>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc33 	bl	800046c <__aeabi_i2d>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	a10c      	add	r1, pc, #48	; (adr r1, 8001c40 <RPlidar_measure_RPM+0x80>)
 8001c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c14:	f7fe fdbe 	bl	8000794 <__aeabi_ddiv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4621      	mov	r1, r4
 8001c20:	f7fe fea0 	bl	8000964 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	607b      	str	r3, [r7, #4]
		RPM_cnt_1ms = 0;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <RPlidar_measure_RPM+0x8c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
//		_htim7->Instance->CNT = 0;
	}

	return rpm;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	ee07 3a90 	vmov	s15, r3
}
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40ed4c00 	.word	0x40ed4c00
 8001c48:	20000060 	.word	0x20000060
 8001c4c:	20000062 	.word	0x20000062
 8001c50:	200001c0 	.word	0x200001c0

08001c54 <RPlidar_checksum>:
 * Calculate Checksum of a packet of data of length 'packet_size'
 *
 * Bit XOR between all packet bytes
 */
uint8_t RPlidar_checksum(uint8_t* packet, uint8_t packet_size)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0 ; i < packet_size; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	73bb      	strb	r3, [r7, #14]
 8001c68:	e009      	b.n	8001c7e <RPlidar_checksum+0x2a>
	{
		checksum ^= *(packet + i);
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	4053      	eors	r3, r2
 8001c76:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0 ; i < packet_size; i++)
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	73bb      	strb	r3, [r7, #14]
 8001c7e:	7bba      	ldrb	r2, [r7, #14]
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3f1      	bcc.n	8001c6a <RPlidar_checksum+0x16>
	}

	return checksum;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <RPlidar_get_descriptor_pck>:
 *	Check Descriptor packet by looking for SoF1 and SoF2
 *
 *	Update the global RP_lidar descriptor packet
 */
uint8_t RPlidar_get_descriptor_pck()
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	uint8_t* _descriptor_pck;
	uint8_t validity = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]

	// Read Rx buffer
	_descriptor_pck = &(AVAILABLE_RX_BUFFER(0));
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <RPlidar_get_descriptor_pck+0x70>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1c99      	adds	r1, r3, #2
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <RPlidar_get_descriptor_pck+0x74>)
 8001ca6:	fb83 3201 	smull	r3, r2, r3, r1
 8001caa:	17cb      	asrs	r3, r1, #31
 8001cac:	1ad2      	subs	r2, r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	1aca      	subs	r2, r1, r3
 8001cb6:	2354      	movs	r3, #84	; 0x54
 8001cb8:	fb03 f302 	mul.w	r3, r3, r2
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <RPlidar_get_descriptor_pck+0x78>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	603b      	str	r3, [r7, #0]
	buffer_ready = 0;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <RPlidar_get_descriptor_pck+0x7c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]

	// Check is data are the Descriptor Register by matching the SoF1 and SoF2
	if( *(_descriptor_pck) == RESPONSE_DESCRIPTOR_SoF1 && *(_descriptor_pck + 1) == RESPONSE_DESCRIPTOR_SoF2)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2ba5      	cmp	r3, #165	; 0xa5
 8001cce:	d107      	bne.n	8001ce0 <RPlidar_get_descriptor_pck+0x4c>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b5a      	cmp	r3, #90	; 0x5a
 8001cd8:	d102      	bne.n	8001ce0 <RPlidar_get_descriptor_pck+0x4c>
	{
		validity = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	71fb      	strb	r3, [r7, #7]
 8001cde:	e001      	b.n	8001ce4 <RPlidar_get_descriptor_pck+0x50>
	}
	else
	{
		validity = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	71fb      	strb	r3, [r7, #7]
	}

	// Save descriptor in memory
	RPlidar_descriptor_pck = *(RPLIDAR_DESCRIPTOR_PCK*)(_descriptor_pck);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <RPlidar_get_descriptor_pck+0x80>)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	6810      	ldr	r0, [r2, #0]
 8001cea:	6018      	str	r0, [r3, #0]
 8001cec:	8891      	ldrh	r1, [r2, #4]
 8001cee:	7992      	ldrb	r2, [r2, #6]
 8001cf0:	8099      	strh	r1, [r3, #4]
 8001cf2:	719a      	strb	r2, [r3, #6]

//	memset(&AVAILABLE_RX_BUFFER(0), 0, RESPONSE_DESCRIPTOR_SIZE);


	return validity;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000056 	.word	0x20000056
 8001d08:	55555556 	.word	0x55555556
 8001d0c:	200000c4 	.word	0x200000c4
 8001d10:	20000057 	.word	0x20000057
 8001d14:	2000006c 	.word	0x2000006c

08001d18 <HAL_UART_RxCpltCallback>:

/*
 * UARTs Callback function. For HOST XBee, LiDAR UART and Bluetooth
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_UART_RxCpltCallback+0x34>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d103      	bne.n	8001d32 <HAL_UART_RxCpltCallback+0x1a>
	{
		NVIC_command_parser_INT(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fe8a 	bl	8000a44 <NVIC_command_parser_INT>
	}
	else if(huart->Instance == UART4)
	{
		NVIC_RPlidar_INT(huart);
	}
}
 8001d30:	e007      	b.n	8001d42 <HAL_UART_RxCpltCallback+0x2a>
	else if(huart->Instance == UART4)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_UART_RxCpltCallback+0x38>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_UART_RxCpltCallback+0x2a>
		NVIC_RPlidar_INT(huart);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff f8b5 	bl	8000eac <NVIC_RPlidar_INT>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40005000 	.word	0x40005000
 8001d50:	40004c00 	.word	0x40004c00

08001d54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d109      	bne.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		a_test++;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d72:	801a      	strh	r2, [r3, #0]
		NVIC_Timout_1ms_INT(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff f8e7 	bl	8000f48 <NVIC_Timout_1ms_INT>
	}
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40001400 	.word	0x40001400
 8001d88:	2000007c 	.word	0x2000007c

08001d8c <update_LEDs>:
 * Update the LEDs debug wheels (8 LEDs) on the stm32f3Discovery Board
 *
 * See attached Debug_LED excel for debug codes
 */
void update_LEDs(ROBOT6900_HANDLER* h_robot6900)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	static uint16_t LEDs_set[8] = {LD3_Pin, LD4_Pin ,LD5_Pin, LD6_Pin, LD7_Pin, LD8_Pin, LD9_Pin, LD10_Pin};

	for(uint8_t i = 0 ; i < 8 ; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e025      	b.n	8001de6 <update_LEDs+0x5a>
	{
		if( ((h_robot6900->robot_state->debug_leds) & (0x01 << i)) == (0x01 << i))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2201      	movs	r2, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	ea01 0203 	and.w	r2, r1, r3
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d109      	bne.n	8001dce <update_LEDs+0x42>
		{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_SET);
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <update_LEDs+0x68>)
 8001dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <update_LEDs+0x6c>)
 8001dc8:	f002 fba2 	bl	8004510 <HAL_GPIO_WritePin>
 8001dcc:	e008      	b.n	8001de0 <update_LEDs+0x54>
		}
		else{
			  HAL_GPIO_WritePin(GPIOE, LEDs_set[i], GPIO_PIN_RESET);
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <update_LEDs+0x68>)
 8001dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <update_LEDs+0x6c>)
 8001ddc:	f002 fb98 	bl	8004510 <HAL_GPIO_WritePin>
	for(uint8_t i = 0 ; i < 8 ; i++)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b07      	cmp	r3, #7
 8001dea:	d9d6      	bls.n	8001d9a <update_LEDs+0xe>
		}
	}
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000014 	.word	0x20000014
 8001df8:	48001000 	.word	0x48001000

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e00:	f000 fe58 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e04:	f000 f844 	bl	8001e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e08:	f000 faac 	bl	8002364 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0c:	f000 fa8c 	bl	8002328 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e10:	f000 f8a8 	bl	8001f64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e14:	f000 f942 	bl	800209c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e18:	f000 f988 	bl	800212c <MX_SPI1_Init>
  MX_UART4_Init();
 8001e1c:	f000 f9fa 	bl	8002214 <MX_UART4_Init>
  MX_UART5_Init();
 8001e20:	f000 fa2c 	bl	800227c <MX_UART5_Init>
  MX_USB_PCD_Init();
 8001e24:	f000 fa5e 	bl	80022e4 <MX_USB_PCD_Init>
  MX_IWDG_Init();
 8001e28:	f000 f978 	bl	800211c <MX_IWDG_Init>
  MX_CRC_Init();
 8001e2c:	f000 f90a 	bl	8002044 <MX_CRC_Init>
  MX_TIM7_Init();
 8001e30:	f000 f9ba 	bl	80021a8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Initiate LOG LEDs
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f002 fb67 	bl	8004510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LOG_WARNING_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f002 fb60 	bl	8004510 <HAL_GPIO_WritePin>

  /* Initialise Command parser peripheral. (FSM + CRC + UART5) */
  uart_init(&huart5, &hcrc);
 8001e50:	490a      	ldr	r1, [pc, #40]	; (8001e7c <main+0x80>)
 8001e52:	480b      	ldr	r0, [pc, #44]	; (8001e80 <main+0x84>)
 8001e54:	f7fe fe26 	bl	8000aa4 <uart_init>

  /* Initialise RPlidar peripheral (FSM + UART4) */
  RPlidar_init(&h_robot6900, &huart4, &htim7);
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <main+0x88>)
 8001e5a:	490b      	ldr	r1, [pc, #44]	; (8001e88 <main+0x8c>)
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <main+0x90>)
 8001e5e:	f7ff f89f 	bl	8000fa0 <RPlidar_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*Command parser FSM */
	  cmd_parser_process(&h_robot6900);
 8001e62:	480a      	ldr	r0, [pc, #40]	; (8001e8c <main+0x90>)
 8001e64:	f7fe fe3a 	bl	8000adc <cmd_parser_process>

	  /* RPlidar FSM */
	  RPlidar_process(&h_robot6900);
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <main+0x90>)
 8001e6a:	f7ff f8c1 	bl	8000ff0 <RPlidar_process>

	  /* Debug LEDs state */
	  update_LEDs(&h_robot6900);
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <main+0x90>)
 8001e70:	f7ff ff8c 	bl	8001d8c <update_LEDs>

	  /* General shell returning data to the HOST */
	  parser_return(&h_robot6900);
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <main+0x90>)
 8001e76:	f7fe ff51 	bl	8000d1c <parser_return>
	  cmd_parser_process(&h_robot6900);
 8001e7a:	e7f2      	b.n	8001e62 <main+0x66>
 8001e7c:	200010a4 	.word	0x200010a4
 8001e80:	200010c8 	.word	0x200010c8
 8001e84:	20001580 	.word	0x20001580
 8001e88:	200011a4 	.word	0x200011a4
 8001e8c:	20000004 	.word	0x20000004

08001e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09e      	sub	sp, #120	; 0x78
 8001e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e9a:	2228      	movs	r2, #40	; 0x28
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f005 fe7e 	bl	8007ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	223c      	movs	r2, #60	; 0x3c
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fe70 	bl	8007ba0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001ec0:	230b      	movs	r3, #11
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ec4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	2302      	movs	r3, #2
 8001edc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fd2a 	bl	8004948 <HAL_RCC_OscConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001efa:	f000 faed 	bl	80024d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efe:	230f      	movs	r3, #15
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f02:	2302      	movs	r3, #2
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fc1c 	bl	8005758 <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f26:	f000 fad7 	bl	80024d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <SystemClock_Config+0xd0>)
 8001f2c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fe3b 	bl	8005bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001f54:	f000 fac0 	bl	80024d8 <Error_Handler>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3778      	adds	r7, #120	; 0x78
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	000200b8 	.word	0x000200b8

08001f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001f88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe0:	4817      	ldr	r0, [pc, #92]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001fe2:	f000 fdcd 	bl	8002b80 <HAL_ADC_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001fec:	f000 fa74 	bl	80024d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4811      	ldr	r0, [pc, #68]	; (8002040 <MX_ADC1_Init+0xdc>)
 8001ffc:	f001 fa8c 	bl	8003518 <HAL_ADCEx_MultiModeConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002006:	f000 fa67 	bl	80024d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800200a:	2302      	movs	r3, #2
 800200c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800200e:	2301      	movs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_ADC1_Init+0xdc>)
 8002028:	f000 ff8a 	bl	8002f40 <HAL_ADC_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002032:	f000 fa51 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20001148 	.word	0x20001148

08002044 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

	/* Initializing CRC Initial value for crc-8bit calculation */
	hcrc.Init.InitValue = 0xFF;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_CRC_Init+0x50>)
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	611a      	str	r2, [r3, #16]

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_CRC_Init+0x50>)
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <MX_CRC_Init+0x54>)
 8002052:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_CRC_Init+0x50>)
 8002056:	2201      	movs	r2, #1
 8002058:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_CRC_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 155;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_CRC_Init+0x50>)
 8002062:	229b      	movs	r2, #155	; 0x9b
 8002064:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_CRC_Init+0x50>)
 8002068:	2210      	movs	r2, #16
 800206a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_CRC_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_CRC_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_CRC_Init+0x50>)
 800207a:	2201      	movs	r2, #1
 800207c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_CRC_Init+0x50>)
 8002080:	f001 fcde 	bl	8003a40 <HAL_CRC_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 800208a:	f000 fa25 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200010a4 	.word	0x200010a4
 8002098:	40023000 	.word	0x40023000

0800209c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_I2C1_Init+0x74>)
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <MX_I2C1_Init+0x78>)
 80020a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_I2C1_Init+0x74>)
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <MX_I2C1_Init+0x7c>)
 80020aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_I2C1_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_I2C1_Init+0x74>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <MX_I2C1_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_I2C1_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <MX_I2C1_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_I2C1_Init+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <MX_I2C1_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <MX_I2C1_Init+0x74>)
 80020d8:	f002 fa32 	bl	8004540 <HAL_I2C_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020e2:	f000 f9f9 	bl	80024d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <MX_I2C1_Init+0x74>)
 80020ea:	f002 fab8 	bl	800465e <HAL_I2CEx_ConfigAnalogFilter>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020f4:	f000 f9f0 	bl	80024d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020f8:	2100      	movs	r1, #0
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_I2C1_Init+0x74>)
 80020fc:	f002 fafa 	bl	80046f4 <HAL_I2CEx_ConfigDigitalFilter>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002106:	f000 f9e7 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20001048 	.word	0x20001048
 8002114:	40005400 	.word	0x40005400
 8002118:	2000090e 	.word	0x2000090e

0800211c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <MX_SPI1_Init+0x78>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800213c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002146:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800214a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_SPI1_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_SPI1_Init+0x74>)
 800215a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002162:	2210      	movs	r2, #16
 8002164:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_SPI1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_SPI1_Init+0x74>)
 800217a:	2207      	movs	r2, #7
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_SPI1_Init+0x74>)
 8002186:	2208      	movs	r2, #8
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_SPI1_Init+0x74>)
 800218c:	f003 feca 	bl	8005f24 <HAL_SPI_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002196:	f000 f99f 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20001224 	.word	0x20001224
 80021a4:	40013000 	.word	0x40013000

080021a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_TIM7_Init+0x64>)
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <MX_TIM7_Init+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_TIM7_Init+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_TIM7_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 47999;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_TIM7_Init+0x64>)
 80021cc:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80021d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_TIM7_Init+0x64>)
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_TIM7_Init+0x64>)
 80021da:	f004 f854 	bl	8006286 <HAL_TIM_Base_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021e4:	f000 f978 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_TIM7_Init+0x64>)
 80021f6:	f004 fa9d 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002200:	f000 f96a 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20001580 	.word	0x20001580
 8002210:	40001400 	.word	0x40001400

08002214 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_UART4_Init+0x60>)
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <MX_UART4_Init+0x64>)
 800221c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <MX_UART4_Init+0x60>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <MX_UART4_Init+0x60>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_UART4_Init+0x60>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_UART4_Init+0x60>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_UART4_Init+0x60>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <MX_UART4_Init+0x60>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <MX_UART4_Init+0x60>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MX_UART4_Init+0x60>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <MX_UART4_Init+0x60>)
 8002252:	2220      	movs	r2, #32
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MX_UART4_Init+0x60>)
 8002258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_UART4_Init+0x60>)
 8002260:	f004 fb06 	bl	8006870 <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800226a:	f000 f935 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200011a4 	.word	0x200011a4
 8002278:	40004c00 	.word	0x40004c00

0800227c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_UART5_Init+0x60>)
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <MX_UART5_Init+0x64>)
 8002284:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_UART5_Init+0x60>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_UART5_Init+0x60>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_UART5_Init+0x60>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_UART5_Init+0x60>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_UART5_Init+0x60>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <MX_UART5_Init+0x60>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_UART5_Init+0x60>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_UART5_Init+0x60>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_UART5_Init+0x60>)
 80022ba:	2220      	movs	r2, #32
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_UART5_Init+0x60>)
 80022c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_UART5_Init+0x60>)
 80022c8:	f004 fad2 	bl	8006870 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80022d2:	f000 f901 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200010c8 	.word	0x200010c8
 80022e0:	40005000 	.word	0x40005000

080022e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <MX_USB_PCD_Init+0x40>)
 80022ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 80022f0:	2208      	movs	r2, #8
 80022f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 80022f6:	2202      	movs	r2, #2
 80022f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 80022fc:	2202      	movs	r2, #2
 80022fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <MX_USB_PCD_Init+0x3c>)
 800230e:	f002 fa3d 	bl	800478c <HAL_PCD_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002318:	f000 f8de 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20001288 	.word	0x20001288
 8002324:	40005c00 	.word	0x40005c00

08002328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_DMA_Init+0x38>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <MX_DMA_Init+0x38>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6153      	str	r3, [r2, #20]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_DMA_Init+0x38>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	203a      	movs	r0, #58	; 0x3a
 800234c:	f001 fb33 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002350:	203a      	movs	r0, #58	; 0x3a
 8002352:	f001 fb4c 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800237a:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <MX_GPIO_Init+0x164>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <MX_GPIO_Init+0x164>)
 8002380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002384:	6153      	str	r3, [r2, #20]
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <MX_GPIO_Init+0x164>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <MX_GPIO_Init+0x164>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <MX_GPIO_Init+0x164>)
 8002398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800239c:	6153      	str	r3, [r2, #20]
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b4:	6153      	str	r3, [r2, #20]
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	6153      	str	r3, [r2, #20]
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4a3a      	ldr	r2, [pc, #232]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e4:	6153      	str	r3, [r2, #20]
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <MX_GPIO_Init+0x164>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6153      	str	r3, [r2, #20]
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <MX_GPIO_Init+0x164>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800240a:	2200      	movs	r2, #0
 800240c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002410:	482e      	ldr	r0, [pc, #184]	; (80024cc <MX_GPIO_Init+0x168>)
 8002412:	f002 f87d 	bl	8004510 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_FPGA_Pin|CS_Accelerometer_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800241c:	482c      	ldr	r0, [pc, #176]	; (80024d0 <MX_GPIO_Init+0x16c>)
 800241e:	f002 f877 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LOG_HARDFAULT_Pin|LOG_WARNING_Pin|RPLIDAR_EN_Pin, GPIO_PIN_RESET);
 8002422:	2200      	movs	r2, #0
 8002424:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f002 f870 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002430:	2337      	movs	r3, #55	; 0x37
 8002432:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <MX_GPIO_Init+0x170>)
 8002436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4822      	ldr	r0, [pc, #136]	; (80024cc <MX_GPIO_Init+0x168>)
 8002444:	f001 feea 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002448:	f64f 7308 	movw	r3, #65288	; 0xff08
 800244c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	4619      	mov	r1, r3
 8002460:	481a      	ldr	r0, [pc, #104]	; (80024cc <MX_GPIO_Init+0x168>)
 8002462:	f001 fedb 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247c:	f001 fece 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_FPGA_Pin CS_Accelerometer_Pin */
  GPIO_InitStruct.Pin = CS_FPGA_Pin|CS_Accelerometer_Pin;
 8002480:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_GPIO_Init+0x16c>)
 800249a:	f001 febf 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOG_HARDFAULT_Pin LOG_WARNING_Pin RPLIDAR_EN_Pin */
  GPIO_InitStruct.Pin = LOG_HARDFAULT_Pin|LOG_WARNING_Pin|RPLIDAR_EN_Pin;
 800249e:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80024a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ba:	f001 feaf 	bl	800421c <HAL_GPIO_Init>

}
 80024be:	bf00      	nop
 80024c0:	3730      	adds	r7, #48	; 0x30
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48001000 	.word	0x48001000
 80024d0:	48000c00 	.word	0x48000c00
 80024d4:	10120000 	.word	0x10120000

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_MspInit+0x44>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_MspInit+0x44>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_MspInit+0x44>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_MspInit+0x44>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <HAL_MspInit+0x44>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_MspInit+0x44>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800251e:	2007      	movs	r0, #7
 8002520:	f001 fa3e 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002550:	d124      	bne.n	800259c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6153      	str	r3, [r2, #20]
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	6153      	str	r3, [r2, #20]
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_ADC_MspInit+0x74>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002582:	2302      	movs	r3, #2
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002586:	2303      	movs	r3, #3
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002598:	f001 fe40 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_CRC_MspInit+0x38>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10b      	bne.n	80025d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_CRC_MspInit+0x3c>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_CRC_MspInit+0x3c>)
 80025c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c4:	6153      	str	r3, [r2, #20]
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_CRC_MspInit+0x3c>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023000 	.word	0x40023000
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_I2C_MspInit+0x7c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d127      	bne.n	800265a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_I2C_MspInit+0x80>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_I2C_MspInit+0x80>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6153      	str	r3, [r2, #20]
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_I2C_MspInit+0x80>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002622:	23c0      	movs	r3, #192	; 0xc0
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002632:	2304      	movs	r3, #4
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <HAL_I2C_MspInit+0x84>)
 800263e:	f001 fded 	bl	800421c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_I2C_MspInit+0x80>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_I2C_MspInit+0x80>)
 8002648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264c:	61d3      	str	r3, [r2, #28]
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_I2C_MspInit+0x80>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	; 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40005400 	.word	0x40005400
 8002668:	40021000 	.word	0x40021000
 800266c:	48000400 	.word	0x48000400

08002670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_SPI_MspInit+0x8c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d130      	bne.n	80026f4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_SPI_MspInit+0x90>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_SPI_MspInit+0x90>)
 8002698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800269c:	6193      	str	r3, [r2, #24]
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_SPI_MspInit+0x90>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_SPI_MspInit+0x90>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_SPI_MspInit+0x90>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	6153      	str	r3, [r2, #20]
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_SPI_MspInit+0x90>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80026c2:	23e0      	movs	r3, #224	; 0xe0
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026d2:	2305      	movs	r3, #5
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e0:	f001 fd9c 	bl	800421c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2023      	movs	r0, #35	; 0x23
 80026ea:	f001 f964 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80026ee:	2023      	movs	r0, #35	; 0x23
 80026f0:	f001 f97d 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40013000 	.word	0x40013000
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_TIM_Base_MspInit+0x44>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d113      	bne.n	800273e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a0c      	ldr	r2, [pc, #48]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 800271c:	f043 0320 	orr.w	r3, r3, #32
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_TIM_Base_MspInit+0x48>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2037      	movs	r0, #55	; 0x37
 8002734:	f001 f93f 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002738:	2037      	movs	r0, #55	; 0x37
 800273a:	f001 f958 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40001400 	.word	0x40001400
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_UART_MspInit+0x180>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d158      	bne.n	8002824 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_UART_MspInit+0x184>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002794:	6153      	str	r3, [r2, #20]
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80027b4:	2305      	movs	r3, #5
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4846      	ldr	r0, [pc, #280]	; (80028d8 <HAL_UART_MspInit+0x188>)
 80027c0:	f001 fd2c 	bl	800421c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80027c4:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_UART_MspInit+0x190>)
 80027c8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80027f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80027f6:	4839      	ldr	r0, [pc, #228]	; (80028dc <HAL_UART_MspInit+0x18c>)
 80027f8:	f001 fb1e 	bl	8003e38 <HAL_DMA_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002802:	f7ff fe69 	bl	80024d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_UART_MspInit+0x18c>)
 800280a:	66da      	str	r2, [r3, #108]	; 0x6c
 800280c:	4a33      	ldr	r2, [pc, #204]	; (80028dc <HAL_UART_MspInit+0x18c>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2034      	movs	r0, #52	; 0x34
 8002818:	f001 f8cd 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800281c:	2034      	movs	r0, #52	; 0x34
 800281e:	f001 f8e6 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002822:	e051      	b.n	80028c8 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==UART5)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_UART_MspInit+0x194>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d14c      	bne.n	80028c8 <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002838:	61d3      	str	r3, [r2, #28]
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_UART_MspInit+0x184>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_UART_MspInit+0x184>)
 800284c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002850:	6153      	str	r3, [r2, #20]
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_UART_MspInit+0x184>)
 8002864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_UART_MspInit+0x184>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002888:	2305      	movs	r3, #5
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4811      	ldr	r0, [pc, #68]	; (80028d8 <HAL_UART_MspInit+0x188>)
 8002894:	f001 fcc2 	bl	800421c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002898:	2304      	movs	r3, #4
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80028a8:	2305      	movs	r3, #5
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <HAL_UART_MspInit+0x198>)
 80028b4:	f001 fcb2 	bl	800421c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2035      	movs	r0, #53	; 0x35
 80028be:	f001 f87a 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80028c2:	2035      	movs	r0, #53	; 0x35
 80028c4:	f001 f893 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 80028c8:	bf00      	nop
 80028ca:	3730      	adds	r7, #48	; 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40004c00 	.word	0x40004c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	48000800 	.word	0x48000800
 80028dc:	20001004 	.word	0x20001004
 80028e0:	40020430 	.word	0x40020430
 80028e4:	40005000 	.word	0x40005000
 80028e8:	48000c00 	.word	0x48000c00

080028ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_PCD_MspInit+0x80>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d129      	bne.n	8002962 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_PCD_MspInit+0x84>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_PCD_MspInit+0x84>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	6153      	str	r3, [r2, #20]
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_PCD_MspInit+0x84>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002938:	230e      	movs	r3, #14
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002946:	f001 fc69 	bl	800421c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_PCD_MspInit+0x84>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <HAL_PCD_MspInit+0x84>)
 8002950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002954:	61d3      	str	r3, [r2, #28]
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_PCD_MspInit+0x84>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40005c00 	.word	0x40005c00
 8002970:	40021000 	.word	0x40021000

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f8ba 	bl	8002b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <SPI1_IRQHandler+0x10>)
 80029d6:	f003 fb37 	bl	8006048 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20001224 	.word	0x20001224

080029e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <UART4_IRQHandler+0x10>)
 80029ea:	f004 f991 	bl	8006d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200011a4 	.word	0x200011a4

080029f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <UART5_IRQHandler+0x10>)
 80029fe:	f004 f987 	bl	8006d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200010c8 	.word	0x200010c8

08002a0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <TIM7_IRQHandler+0x10>)
 8002a12:	f003 fcb8 	bl	8006386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20001580 	.word	0x20001580

08002a20 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <DMA2_Channel3_IRQHandler+0x10>)
 8002a26:	f001 faeb 	bl	8004000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20001004 	.word	0x20001004

08002a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <SystemInit+0x28>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <SystemInit+0x28>)
 8002a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SystemInit+0x28>)
 8002a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a66:	e003      	b.n	8002a70 <LoopCopyDataInit>

08002a68 <CopyDataInit>:
  bkpt #0

.size  HardFault_Handler, .-HardFault_Handler
*/
CopyDataInit:
	ldr	r3, =_sidata
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a6e:	3104      	adds	r1, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a78:	d3f6      	bcc.n	8002a68 <CopyDataInit>
	ldr	r2, =_sbss
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a7c:	e002      	b.n	8002a84 <LoopFillZerobss>

08002a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a80:	f842 3b04 	str.w	r3, [r2], #4

08002a84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <LoopForever+0x16>)
	cmp	r2, r3
 8002a86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a88:	d3f9      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a8a:	f7ff ffd3 	bl	8002a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f005 f863 	bl	8007b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a92:	f7ff f9b3 	bl	8001dfc <main>

08002a96 <LoopForever>:

LoopForever:
    b LoopForever
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a98:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002a9c:	08007c70 	.word	0x08007c70
	ldr	r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002aa4:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8002aa8:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8002aac:	200015c4 	.word	0x200015c4

08002ab0 <ADC1_2_IRQHandler>:


    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_2_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_Init+0x28>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a07      	ldr	r2, [pc, #28]	; (8002adc <HAL_Init+0x28>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f000 ff6b 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f808 	bl	8002ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad0:	f7ff fd0a 	bl	80024e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000

08002ae0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_InitTick+0x54>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_InitTick+0x58>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 ff91 	bl	8003a26 <HAL_SYSTICK_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00e      	b.n	8002b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b0f      	cmp	r3, #15
 8002b12:	d80a      	bhi.n	8002b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b14:	2200      	movs	r2, #0
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f000 ff4b 	bl	80039b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b20:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <HAL_InitTick+0x5c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000024 	.word	0x20000024
 8002b38:	2000002c 	.word	0x2000002c
 8002b3c:	20000028 	.word	0x20000028

08002b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_IncTick+0x20>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x24>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_IncTick+0x24>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000002c 	.word	0x2000002c
 8002b64:	200015c0 	.word	0x200015c0

08002b68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_GetTick+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200015c0 	.word	0x200015c0

08002b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b09a      	sub	sp, #104	; 0x68
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e1c9      	b.n	8002f34 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d176      	bne.n	8002ca0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d152      	bne.n	8002c60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fcab 	bl	8002530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d13b      	bne.n	8002c60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fd87 	bl	80036fc <ADC_Disable>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d12f      	bne.n	8002c60 <HAL_ADC_Init+0xe0>
 8002c00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d12b      	bne.n	8002c60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c10:	f023 0302 	bic.w	r3, r3, #2
 8002c14:	f043 0202 	orr.w	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3c:	4b86      	ldr	r3, [pc, #536]	; (8002e58 <HAL_ADC_Init+0x2d8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a86      	ldr	r2, [pc, #536]	; (8002e5c <HAL_ADC_Init+0x2dc>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0c9a      	lsrs	r2, r3, #18
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c52:	e002      	b.n	8002c5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c7c:	d110      	bne.n	8002ca0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f023 0312 	bic.w	r3, r3, #18
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8136 	bne.w	8002f1a <HAL_ADC_Init+0x39a>
 8002cae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8131 	bne.w	8002f1a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 8129 	bne.w	8002f1a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce0:	d004      	beq.n	8002cec <HAL_ADC_Init+0x16c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_ADC_Init+0x2e0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_Init+0x170>
 8002cec:	4b5d      	ldr	r3, [pc, #372]	; (8002e64 <HAL_ADC_Init+0x2e4>)
 8002cee:	e000      	b.n	8002cf2 <HAL_ADC_Init+0x172>
 8002cf0:	4b5d      	ldr	r3, [pc, #372]	; (8002e68 <HAL_ADC_Init+0x2e8>)
 8002cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d102      	bne.n	8002d04 <HAL_ADC_Init+0x184>
 8002cfe:	4b58      	ldr	r3, [pc, #352]	; (8002e60 <HAL_ADC_Init+0x2e0>)
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e01a      	b.n	8002d3a <HAL_ADC_Init+0x1ba>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a55      	ldr	r2, [pc, #340]	; (8002e60 <HAL_ADC_Init+0x2e0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d103      	bne.n	8002d16 <HAL_ADC_Init+0x196>
 8002d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e011      	b.n	8002d3a <HAL_ADC_Init+0x1ba>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a54      	ldr	r2, [pc, #336]	; (8002e6c <HAL_ADC_Init+0x2ec>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_ADC_Init+0x1a6>
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <HAL_ADC_Init+0x2f0>)
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e009      	b.n	8002d3a <HAL_ADC_Init+0x1ba>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a51      	ldr	r2, [pc, #324]	; (8002e70 <HAL_ADC_Init+0x2f0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_ADC_Init+0x1b6>
 8002d30:	4b4e      	ldr	r3, [pc, #312]	; (8002e6c <HAL_ADC_Init+0x2ec>)
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e001      	b.n	8002d3a <HAL_ADC_Init+0x1ba>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_ADC_Init+0x1da>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x1da>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_ADC_Init+0x1dc>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11c      	bne.n	8002d9a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_ADC_Init+0x202>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_Init+0x202>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_Init+0x204>
 8002d82:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d108      	bne.n	8002d9a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e5b      	ldrb	r3, [r3, #25]
 8002d9e:	035b      	lsls	r3, r3, #13
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	d002      	beq.n	8002dae <HAL_ADC_Init+0x22e>
 8002da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dac:	e000      	b.n	8002db0 <HAL_ADC_Init+0x230>
 8002dae:	2200      	movs	r2, #0
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d11b      	bne.n	8002e06 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7e5b      	ldrb	r3, [r3, #25]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	045a      	lsls	r2, r3, #17
 8002dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
 8002de8:	e00d      	b.n	8002e06 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d03a      	beq.n	8002e84 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_ADC_Init+0x2ec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_Init+0x2a2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_ADC_Init+0x2f0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d128      	bne.n	8002e74 <HAL_ADC_Init+0x2f4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002e2a:	d012      	beq.n	8002e52 <HAL_ADC_Init+0x2d2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d00a      	beq.n	8002e4c <HAL_ADC_Init+0x2cc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002e3e:	d002      	beq.n	8002e46 <HAL_ADC_Init+0x2c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	e018      	b.n	8002e78 <HAL_ADC_Init+0x2f8>
 8002e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4a:	e015      	b.n	8002e78 <HAL_ADC_Init+0x2f8>
 8002e4c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002e50:	e012      	b.n	8002e78 <HAL_ADC_Init+0x2f8>
 8002e52:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002e56:	e00f      	b.n	8002e78 <HAL_ADC_Init+0x2f8>
 8002e58:	20000024 	.word	0x20000024
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	50000100 	.word	0x50000100
 8002e64:	50000300 	.word	0x50000300
 8002e68:	50000700 	.word	0x50000700
 8002e6c:	50000400 	.word	0x50000400
 8002e70:	50000500 	.word	0x50000500
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e80:	4313      	orrs	r3, r2
 8002e82:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d114      	bne.n	8002ebc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	039a      	lsls	r2, r3, #14
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_ADC_Init+0x3bc>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f023 010f 	bic.w	r1, r3, #15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	1e5a      	subs	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef0:	e007      	b.n	8002f02 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 020f 	bic.w	r2, r2, #15
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
 8002f18:	e00a      	b.n	8002f30 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f023 0312 	bic.w	r3, r3, #18
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3768      	adds	r7, #104	; 0x68
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	fff0c007 	.word	0xfff0c007

08002f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b09b      	sub	sp, #108	; 0x6c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x22>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e2cb      	b.n	80034fa <HAL_ADC_ConfigChannel+0x5ba>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 82af 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d81c      	bhi.n	8002fbc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	461a      	mov	r2, r3
 8002f96:	231f      	movs	r3, #31
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4019      	ands	r1, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fba:	e063      	b.n	8003084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d81e      	bhi.n	8003002 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	3b1e      	subs	r3, #30
 8002fd8:	221f      	movs	r2, #31
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4019      	ands	r1, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	3b1e      	subs	r3, #30
 8002ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8003000:	e040      	b.n	8003084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b0e      	cmp	r3, #14
 8003008:	d81e      	bhi.n	8003048 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	3b3c      	subs	r3, #60	; 0x3c
 800301e:	221f      	movs	r2, #31
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	4019      	ands	r1, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	3b3c      	subs	r3, #60	; 0x3c
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	639a      	str	r2, [r3, #56]	; 0x38
 8003046:	e01d      	b.n	8003084 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	3b5a      	subs	r3, #90	; 0x5a
 800305c:	221f      	movs	r2, #31
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	4019      	ands	r1, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	3b5a      	subs	r3, #90	; 0x5a
 8003078:	fa00 f203 	lsl.w	r2, r0, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80e5 	bne.w	800325e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b09      	cmp	r3, #9
 800309a:	d91c      	bls.n	80030d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	2207      	movs	r2, #7
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4019      	ands	r1, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6898      	ldr	r0, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	fa00 f203 	lsl.w	r2, r0, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
 80030d4:	e019      	b.n	800310a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6959      	ldr	r1, [r3, #20]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4019      	ands	r1, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6898      	ldr	r0, [r3, #8]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	3b01      	subs	r3, #1
 8003128:	2b03      	cmp	r3, #3
 800312a:	d84f      	bhi.n	80031cc <HAL_ADC_ConfigChannel+0x28c>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <HAL_ADC_ConfigChannel+0x1f4>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003145 	.word	0x08003145
 8003138:	08003167 	.word	0x08003167
 800313c:	08003189 	.word	0x08003189
 8003140:	080031ab 	.word	0x080031ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800314a:	4b9f      	ldr	r3, [pc, #636]	; (80033c8 <HAL_ADC_ConfigChannel+0x488>)
 800314c:	4013      	ands	r3, r2
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	0691      	lsls	r1, r2, #26
 8003154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003156:	430a      	orrs	r2, r1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003164:	e07e      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800316c:	4b96      	ldr	r3, [pc, #600]	; (80033c8 <HAL_ADC_ConfigChannel+0x488>)
 800316e:	4013      	ands	r3, r2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	0691      	lsls	r1, r2, #26
 8003176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003178:	430a      	orrs	r2, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003184:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003186:	e06d      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800318e:	4b8e      	ldr	r3, [pc, #568]	; (80033c8 <HAL_ADC_ConfigChannel+0x488>)
 8003190:	4013      	ands	r3, r2
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	0691      	lsls	r1, r2, #26
 8003198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800319a:	430a      	orrs	r2, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031a8:	e05c      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031b0:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_ADC_ConfigChannel+0x488>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	0691      	lsls	r1, r2, #26
 80031ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031bc:	430a      	orrs	r2, r1
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80031ca:	e04b      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	429a      	cmp	r2, r3
 80031de:	d107      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	429a      	cmp	r2, r3
 8003202:	d107      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003212:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	069b      	lsls	r3, r3, #26
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003236:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	069b      	lsls	r3, r3, #26
 8003248:	429a      	cmp	r2, r3
 800324a:	d10a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800325a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800325c:	e001      	b.n	8003262 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003262:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x344>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x344>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_ADC_ConfigChannel+0x346>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8131 	bne.w	80034ee <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00f      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80032b2:	e049      	b.n	8003348 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d91c      	bls.n	8003310 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	3b1b      	subs	r3, #27
 80032e8:	2207      	movs	r2, #7
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4019      	ands	r1, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6898      	ldr	r0, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	3b1b      	subs	r3, #27
 8003302:	fa00 f203 	lsl.w	r2, r0, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	619a      	str	r2, [r3, #24]
 800330e:	e01b      	b.n	8003348 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6959      	ldr	r1, [r3, #20]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	2207      	movs	r2, #7
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	4019      	ands	r1, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6898      	ldr	r0, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	fa00 f203 	lsl.w	r2, r0, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003350:	d004      	beq.n	800335c <HAL_ADC_ConfigChannel+0x41c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_ADC_ConfigChannel+0x48c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x420>
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_ADC_ConfigChannel+0x490>)
 800335e:	e000      	b.n	8003362 <HAL_ADC_ConfigChannel+0x422>
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_ADC_ConfigChannel+0x494>)
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800336c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800337c:	2b11      	cmp	r3, #17
 800337e:	d105      	bne.n	800338c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003390:	2b12      	cmp	r3, #18
 8003392:	f040 80ac 	bne.w	80034ee <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80a5 	bne.w	80034ee <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ac:	d102      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x474>
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_ADC_ConfigChannel+0x48c>)
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e023      	b.n	80033fc <HAL_ADC_ConfigChannel+0x4bc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <HAL_ADC_ConfigChannel+0x48c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x498>
 80033be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e01a      	b.n	80033fc <HAL_ADC_ConfigChannel+0x4bc>
 80033c6:	bf00      	nop
 80033c8:	83fff000 	.word	0x83fff000
 80033cc:	50000100 	.word	0x50000100
 80033d0:	50000300 	.word	0x50000300
 80033d4:	50000700 	.word	0x50000700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4a      	ldr	r2, [pc, #296]	; (8003508 <HAL_ADC_ConfigChannel+0x5c8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d102      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x4a8>
 80033e2:	4b4a      	ldr	r3, [pc, #296]	; (800350c <HAL_ADC_ConfigChannel+0x5cc>)
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e009      	b.n	80033fc <HAL_ADC_ConfigChannel+0x4bc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a47      	ldr	r2, [pc, #284]	; (800350c <HAL_ADC_ConfigChannel+0x5cc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x4b8>
 80033f2:	4b45      	ldr	r3, [pc, #276]	; (8003508 <HAL_ADC_ConfigChannel+0x5c8>)
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e001      	b.n	80033fc <HAL_ADC_ConfigChannel+0x4bc>
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d108      	bne.n	800341c <HAL_ADC_ConfigChannel+0x4dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x4dc>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_ADC_ConfigChannel+0x4de>
 800341c:	2300      	movs	r3, #0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d150      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003422:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x504>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x504>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_ADC_ConfigChannel+0x506>
 8003444:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003446:	2b00      	cmp	r3, #0
 8003448:	d13c      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d11d      	bne.n	800348e <HAL_ADC_ConfigChannel+0x54e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800345a:	d118      	bne.n	800348e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800345c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003466:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_ADC_ConfigChannel+0x5d0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_ADC_ConfigChannel+0x5d4>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0c9a      	lsrs	r2, r3, #18
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800347e:	e002      	b.n	8003486 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800348c:	e02e      	b.n	80034ec <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b11      	cmp	r3, #17
 8003494:	d10b      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x56e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800349e:	d106      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034ac:	e01e      	b.n	80034ec <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d11a      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80034b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034c2:	e013      	b.n	80034ec <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034d6:	e00a      	b.n	80034ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	376c      	adds	r7, #108	; 0x6c
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	50000400 	.word	0x50000400
 800350c:	50000500 	.word	0x50000500
 8003510:	20000024 	.word	0x20000024
 8003514:	431bde83 	.word	0x431bde83

08003518 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003518:	b480      	push	{r7}
 800351a:	b099      	sub	sp, #100	; 0x64
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003530:	d102      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003532:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	e01a      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d103      	bne.n	800354a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	e011      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a67      	ldr	r2, [pc, #412]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d102      	bne.n	800355a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003554:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	e009      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d102      	bne.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	e001      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0b0      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003582:	2302      	movs	r3, #2
 8003584:	e0a9      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 808d 	bne.w	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 8086 	bne.w	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035c0:	4b4c      	ldr	r3, [pc, #304]	; (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80035c2:	e000      	b.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80035c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d040      	beq.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035e2:	035b      	lsls	r3, r3, #13
 80035e4:	430b      	orrs	r3, r1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d15c      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800362e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003630:	2b00      	cmp	r3, #0
 8003632:	d14b      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800363c:	f023 030f 	bic.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	6811      	ldr	r1, [r2, #0]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	6892      	ldr	r2, [r2, #8]
 8003648:	430a      	orrs	r2, r1
 800364a:	431a      	orrs	r2, r3
 800364c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003650:	e03c      	b.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800365a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800367e:	2300      	movs	r3, #0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d123      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80036a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d112      	bne.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80036a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ae:	f023 030f 	bic.w	r3, r3, #15
 80036b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b6:	e009      	b.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80036ca:	e000      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80036da:	4618      	mov	r0, r3
 80036dc:	3764      	adds	r7, #100	; 0x64
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	50000100 	.word	0x50000100
 80036ec:	50000400 	.word	0x50000400
 80036f0:	50000500 	.word	0x50000500
 80036f4:	50000300 	.word	0x50000300
 80036f8:	50000700 	.word	0x50000700

080036fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <ADC_Disable+0x2c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <ADC_Disable+0x2c>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <ADC_Disable+0x2e>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d040      	beq.n	80037b0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030d 	and.w	r3, r3, #13
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10f      	bne.n	800375c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0202 	orr.w	r2, r2, #2
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2203      	movs	r2, #3
 8003752:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003754:	f7ff fa08 	bl	8002b68 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800375a:	e022      	b.n	80037a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e01c      	b.n	80037b2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003778:	f7ff f9f6 	bl	8002b68 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d90d      	bls.n	80037a2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0210 	orr.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e007      	b.n	80037b2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d0e3      	beq.n	8003778 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <__NVIC_EnableIRQ+0x38>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000e100 	.word	0xe000e100

0800385c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db10      	blt.n	8003890 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4909      	ldr	r1, [pc, #36]	; (800389c <__NVIC_DisableIRQ+0x40>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2001      	movs	r0, #1
 800387e:	fa00 f202 	lsl.w	r2, r0, r2
 8003882:	3320      	adds	r3, #32
 8003884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800388c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0a      	blt.n	80038ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	490c      	ldr	r1, [pc, #48]	; (80038ec <__NVIC_SetPriority+0x4c>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c8:	e00a      	b.n	80038e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4908      	ldr	r1, [pc, #32]	; (80038f0 <__NVIC_SetPriority+0x50>)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3b04      	subs	r3, #4
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	440b      	add	r3, r1
 80038de:	761a      	strb	r2, [r3, #24]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000e100 	.word	0xe000e100
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf28      	it	cs
 8003912:	2304      	movcs	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3304      	adds	r3, #4
 800391a:	2b06      	cmp	r3, #6
 800391c:	d902      	bls.n	8003924 <NVIC_EncodePriority+0x30>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3b03      	subs	r3, #3
 8003922:	e000      	b.n	8003926 <NVIC_EncodePriority+0x32>
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	401a      	ands	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43d9      	mvns	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	4313      	orrs	r3, r2
         );
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800396c:	d301      	bcc.n	8003972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396e:	2301      	movs	r3, #1
 8003970:	e00f      	b.n	8003992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <SysTick_Config+0x40>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397a:	210f      	movs	r1, #15
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	f7ff ff8e 	bl	80038a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <SysTick_Config+0x40>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <SysTick_Config+0x40>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff07 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff1c 	bl	8003804 <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff8e 	bl	80038f4 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5d 	bl	80038a0 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff0f 	bl	8003820 <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff1f 	bl	800385c <__NVIC_DisableIRQ>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff94 	bl	800395c <SysTick_Config>
 8003a34:	4603      	mov	r3, r0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e054      	b.n	8003afc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7f5b      	ldrb	r3, [r3, #29]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fda0 	bl	80025a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	791b      	ldrb	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_CRC_Init+0xc4>)
 8003a7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0218 	bic.w	r2, r2, #24
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	e00c      	b.n	8003aaa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f946 	bl	8003d2c <HAL_CRCEx_Polynomial_Set>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e028      	b.n	8003afc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	795b      	ldrb	r3, [r3, #5]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	611a      	str	r2, [r3, #16]
 8003abc:	e004      	b.n	8003ac8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6912      	ldr	r2, [r2, #16]
 8003ac6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	04c11db7 	.word	0x04c11db7

08003b08 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d022      	beq.n	8003b7c <HAL_CRC_Calculate+0x74>
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d002      	beq.n	8003b40 <HAL_CRC_Calculate+0x38>
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d017      	beq.n	8003b6e <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003b3e:	e024      	b.n	8003b8a <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e00a      	b.n	8003b5c <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	441a      	add	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3f0      	bcc.n	8003b46 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
      break;
 8003b6c:	e00d      	b.n	8003b8a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f811 	bl	8003b9a <CRC_Handle_8>
 8003b78:	6138      	str	r0, [r7, #16]
      break;
 8003b7a:	e006      	b.n	8003b8a <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f898 	bl	8003cb6 <CRC_Handle_16>
 8003b86:	6138      	str	r0, [r7, #16]
      break;
 8003b88:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003b90:	693b      	ldr	r3, [r7, #16]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b089      	sub	sp, #36	; 0x24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e023      	b.n	8003bf4 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	440b      	add	r3, r1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003bc6:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	440b      	add	r3, r1
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003bd6:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3303      	adds	r3, #3
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	440b      	add	r3, r1
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003bea:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3d6      	bcc.n	8003bac <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d04d      	beq.n	8003ca4 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4413      	add	r3, r2
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d116      	bne.n	8003c5a <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3301      	adds	r3, #1
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	440b      	add	r3, r1
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b21b      	sxth	r3, r3
 8003c4c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	8b7a      	ldrh	r2, [r7, #26]
 8003c58:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d11f      	bne.n	8003ca4 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3301      	adds	r3, #1
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	8b7a      	ldrh	r2, [r7, #26]
 8003c90:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e013      	b.n	8003cf0 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4413      	add	r3, r2
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	041a      	lsls	r2, r3, #16
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	440b      	add	r3, r1
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3e6      	bcc.n	8003cc8 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4413      	add	r3, r2
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d3c:	231f      	movs	r3, #31
 8003d3e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d40:	bf00      	nop
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	613a      	str	r2, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_CRCEx_Polynomial_Set+0x34>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b18      	cmp	r3, #24
 8003d64:	d846      	bhi.n	8003df4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003dfb 	.word	0x08003dfb
 8003d70:	08003df5 	.word	0x08003df5
 8003d74:	08003df5 	.word	0x08003df5
 8003d78:	08003df5 	.word	0x08003df5
 8003d7c:	08003df5 	.word	0x08003df5
 8003d80:	08003df5 	.word	0x08003df5
 8003d84:	08003df5 	.word	0x08003df5
 8003d88:	08003df5 	.word	0x08003df5
 8003d8c:	08003de9 	.word	0x08003de9
 8003d90:	08003df5 	.word	0x08003df5
 8003d94:	08003df5 	.word	0x08003df5
 8003d98:	08003df5 	.word	0x08003df5
 8003d9c:	08003df5 	.word	0x08003df5
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003df5 	.word	0x08003df5
 8003dac:	08003ddd 	.word	0x08003ddd
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003df5 	.word	0x08003df5
 8003dbc:	08003df5 	.word	0x08003df5
 8003dc0:	08003df5 	.word	0x08003df5
 8003dc4:	08003df5 	.word	0x08003df5
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003dd1 	.word	0x08003dd1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d913      	bls.n	8003dfe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dda:	e010      	b.n	8003dfe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	d90f      	bls.n	8003e02 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003de6:	e00c      	b.n	8003e02 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d90b      	bls.n	8003e06 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003df2:	e008      	b.n	8003e06 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	e006      	b.n	8003e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e06:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 0118 	bic.w	r1, r3, #24
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e037      	b.n	8003ebe <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e64:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f97f 	bl	80041a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}  
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DMA_Start_IT+0x20>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e04a      	b.n	8003f7c <HAL_DMA_Start_IT+0xb6>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d13a      	bne.n	8003f6e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f912 	bl	8004146 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 020e 	orr.w	r2, r2, #14
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e00f      	b.n	8003f5c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 020a 	orr.w	r2, r2, #10
 8003f4a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0204 	bic.w	r2, r2, #4
 8003f5a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e005      	b.n	8003f7a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
 8003f78:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d005      	beq.n	8003fa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e027      	b.n	8003ff6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 020e 	bic.w	r2, r2, #14
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
    } 
  }
  return status;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2204      	movs	r2, #4
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d024      	beq.n	8004072 <HAL_DMA_IRQHandler+0x72>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01f      	beq.n	8004072 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2104      	movs	r1, #4
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d06a      	beq.n	800413e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004070:	e065      	b.n	800413e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2202      	movs	r2, #2
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0xdc>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d027      	beq.n	80040dc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 020a 	bic.w	r2, r2, #10
 80040a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2102      	movs	r1, #2
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d035      	beq.n	800413e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80040da:	e030      	b.n	800413e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	2208      	movs	r2, #8
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d028      	beq.n	800413e <HAL_DMA_IRQHandler+0x13e>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d023      	beq.n	800413e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 020e 	bic.w	r2, r2, #14
 8004104:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
    }
  }
}  
 800413c:	e7ff      	b.n	800413e <HAL_DMA_IRQHandler+0x13e>
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b10      	cmp	r3, #16
 8004172:	d108      	bne.n	8004186 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004184:	e007      	b.n	8004196 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	60da      	str	r2, [r3, #12]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <DMA_CalcBaseAndBitshift+0x60>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d80f      	bhi.n	80041d8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <DMA_CalcBaseAndBitshift+0x64>)
 80041c0:	4413      	add	r3, r2
 80041c2:	4a12      	ldr	r2, [pc, #72]	; (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <DMA_CalcBaseAndBitshift+0x6c>)
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80041d6:	e00e      	b.n	80041f6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <DMA_CalcBaseAndBitshift+0x70>)
 80041e0:	4413      	add	r3, r2
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a09      	ldr	r2, [pc, #36]	; (8004218 <DMA_CalcBaseAndBitshift+0x74>)
 80041f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40020407 	.word	0x40020407
 8004208:	bffdfff8 	.word	0xbffdfff8
 800420c:	cccccccd 	.word	0xcccccccd
 8004210:	40020000 	.word	0x40020000
 8004214:	bffdfbf8 	.word	0xbffdfbf8
 8004218:	40020400 	.word	0x40020400

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422a:	e154      	b.n	80044d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8146 	beq.w	80044d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d00b      	beq.n	8004264 <HAL_GPIO_Init+0x48>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004258:	2b11      	cmp	r3, #17
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b12      	cmp	r3, #18
 8004262:	d130      	bne.n	80042c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429a:	2201      	movs	r2, #1
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	f003 0201 	and.w	r2, r3, #1
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0xea>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b12      	cmp	r3, #18
 8004304:	d123      	bne.n	800434e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	08da      	lsrs	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80a0 	beq.w	80044d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004390:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <HAL_GPIO_Init+0x2d8>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4a57      	ldr	r2, [pc, #348]	; (80044f4 <HAL_GPIO_Init+0x2d8>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6193      	str	r3, [r2, #24]
 800439c:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <HAL_GPIO_Init+0x2d8>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043a8:	4a53      	ldr	r2, [pc, #332]	; (80044f8 <HAL_GPIO_Init+0x2dc>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043d2:	d019      	beq.n	8004408 <HAL_GPIO_Init+0x1ec>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a49      	ldr	r2, [pc, #292]	; (80044fc <HAL_GPIO_Init+0x2e0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_GPIO_Init+0x1e8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a48      	ldr	r2, [pc, #288]	; (8004500 <HAL_GPIO_Init+0x2e4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00d      	beq.n	8004400 <HAL_GPIO_Init+0x1e4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a47      	ldr	r2, [pc, #284]	; (8004504 <HAL_GPIO_Init+0x2e8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <HAL_GPIO_Init+0x1e0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a46      	ldr	r2, [pc, #280]	; (8004508 <HAL_GPIO_Init+0x2ec>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_GPIO_Init+0x1dc>
 80043f4:	2304      	movs	r3, #4
 80043f6:	e008      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 80043f8:	2305      	movs	r3, #5
 80043fa:	e006      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 80043fc:	2303      	movs	r3, #3
 80043fe:	e004      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004400:	2302      	movs	r3, #2
 8004402:	e002      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_GPIO_Init+0x1ee>
 8004408:	2300      	movs	r3, #0
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	f002 0203 	and.w	r2, r2, #3
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	4093      	lsls	r3, r2
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800441a:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_GPIO_Init+0x2dc>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004428:	4b38      	ldr	r3, [pc, #224]	; (800450c <HAL_GPIO_Init+0x2f0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800444c:	4a2f      	ldr	r2, [pc, #188]	; (800450c <HAL_GPIO_Init+0x2f0>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <HAL_GPIO_Init+0x2f0>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <HAL_GPIO_Init+0x2f0>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_GPIO_Init+0x2f0>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_GPIO_Init+0x2f0>)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a6:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_GPIO_Init+0x2f0>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044ca:	4a10      	ldr	r2, [pc, #64]	; (800450c <HAL_GPIO_Init+0x2f0>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f aea3 	bne.w	800422c <HAL_GPIO_Init+0x10>
  }
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40010000 	.word	0x40010000
 80044fc:	48000400 	.word	0x48000400
 8004500:	48000800 	.word	0x48000800
 8004504:	48000c00 	.word	0x48000c00
 8004508:	48001000 	.word	0x48001000
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
 800451c:	4613      	mov	r3, r2
 800451e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004520:	787b      	ldrb	r3, [r7, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800452c:	e002      	b.n	8004534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e081      	b.n	8004656 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe f83e 	bl	80025e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	e006      	b.n	80045c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d104      	bne.n	80045da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	ea42 0103 	orr.w	r1, r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b20      	cmp	r3, #32
 8004672:	d138      	bne.n	80046e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800467e:	2302      	movs	r3, #2
 8004680:	e032      	b.n	80046e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2224      	movs	r2, #36	; 0x24
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b20      	cmp	r3, #32
 8004708:	d139      	bne.n	800477e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004714:	2302      	movs	r3, #2
 8004716:	e033      	b.n	8004780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004746:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b08b      	sub	sp, #44	; 0x2c
 8004790:	af06      	add	r7, sp, #24
 8004792:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e0d0      	b.n	8004940 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe f89a 	bl	80028ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2203      	movs	r2, #3
 80047bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 f98a 	bl	8007ade <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
 80047ce:	e04c      	b.n	800486a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	440b      	add	r3, r1
 80047e0:	3301      	adds	r3, #1
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	b298      	uxth	r0, r3
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	3336      	adds	r3, #54	; 0x36
 800480e:	4602      	mov	r2, r0
 8004810:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	3303      	adds	r3, #3
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	3338      	adds	r3, #56	; 0x38
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	333c      	adds	r3, #60	; 0x3c
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	440b      	add	r3, r1
 800485e:	3340      	adds	r3, #64	; 0x40
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	3301      	adds	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3ad      	bcc.n	80047d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e044      	b.n	8004904 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	440b      	add	r3, r1
 8004888:	f203 1369 	addw	r3, r3, #361	; 0x169
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	440b      	add	r3, r1
 800489e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	440b      	add	r3, r1
 80048b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	440b      	add	r3, r1
 80048e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3b5      	bcc.n	800487a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	687e      	ldr	r6, [r7, #4]
 8004916:	466d      	mov	r5, sp
 8004918:	f106 0410 	add.w	r4, r6, #16
 800491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	1d33      	adds	r3, r6, #4
 8004926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004928:	6838      	ldr	r0, [r7, #0]
 800492a:	f003 f8f3 	bl	8007b14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800494e:	af00      	add	r7, sp, #0
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f000 bef4 	b.w	800574a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 816a 	beq.w	8004c46 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004972:	4bb3      	ldr	r3, [pc, #716]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b04      	cmp	r3, #4
 800497c:	d00c      	beq.n	8004998 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800497e:	4bb0      	ldr	r3, [pc, #704]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b08      	cmp	r3, #8
 8004988:	d159      	bne.n	8004a3e <HAL_RCC_OscConfig+0xf6>
 800498a:	4bad      	ldr	r3, [pc, #692]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d152      	bne.n	8004a3e <HAL_RCC_OscConfig+0xf6>
 8004998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_OscConfig+0x82>
 80049c4:	4b9e      	ldr	r3, [pc, #632]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	e015      	b.n	80049f6 <HAL_RCC_OscConfig+0xae>
 80049ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80049ea:	fa93 f3a3 	rbit	r3, r3
 80049ee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049f2:	4b93      	ldr	r3, [pc, #588]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a02:	fa92 f2a2 	rbit	r2, r2
 8004a06:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a0a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a0e:	fab2 f282 	clz	r2, r2
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f042 0220 	orr.w	r2, r2, #32
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f002 021f 	and.w	r2, r2, #31
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f202 	lsl.w	r2, r1, r2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 810c 	beq.w	8004c44 <HAL_RCC_OscConfig+0x2fc>
 8004a2c:	1d3b      	adds	r3, r7, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 8106 	bne.w	8004c44 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f000 be86 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x110>
 8004a4a:	4b7d      	ldr	r3, [pc, #500]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7c      	ldr	r2, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e030      	b.n	8004aba <HAL_RCC_OscConfig+0x172>
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x134>
 8004a62:	4b77      	ldr	r3, [pc, #476]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a76      	ldr	r2, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b74      	ldr	r3, [pc, #464]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a73      	ldr	r2, [pc, #460]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e01e      	b.n	8004aba <HAL_RCC_OscConfig+0x172>
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x15a>
 8004a88:	4b6d      	ldr	r3, [pc, #436]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a6c      	ldr	r2, [pc, #432]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a69      	ldr	r2, [pc, #420]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e00b      	b.n	8004aba <HAL_RCC_OscConfig+0x172>
 8004aa2:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a66      	ldr	r2, [pc, #408]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a63      	ldr	r2, [pc, #396]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f023 020f 	bic.w	r2, r3, #15
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	495d      	ldr	r1, [pc, #372]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d059      	beq.n	8004b8c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe f846 	bl	8002b68 <HAL_GetTick>
 8004adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae2:	f7fe f841 	bl	8002b68 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d902      	bls.n	8004af8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	f000 be29 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
 8004af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d102      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1e2>
 8004b24:	4b46      	ldr	r3, [pc, #280]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	e015      	b.n	8004b56 <HAL_RCC_OscConfig+0x20e>
 8004b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b42:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b46:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b52:	4b3b      	ldr	r3, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b5e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b62:	fa92 f2a2 	rbit	r2, r2
 8004b66:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b6a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b6e:	fab2 f282 	clz	r2, r2
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	f002 021f 	and.w	r2, r2, #31
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0ab      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x19a>
 8004b8a:	e05c      	b.n	8004c46 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd ffec 	bl	8002b68 <HAL_GetTick>
 8004b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b96:	f7fd ffe7 	bl	8002b68 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d902      	bls.n	8004bac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	f000 bdcf 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
 8004bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004bc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x296>
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	e015      	b.n	8004c0a <HAL_RCC_OscConfig+0x2c2>
 8004bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004bfa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCC_OscConfig+0x2f8>)
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c0e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c12:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c16:	fa92 f2a2 	rbit	r2, r2
 8004c1a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c22:	fab2 f282 	clz	r2, r2
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	f042 0220 	orr.w	r2, r2, #32
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f202 	lsl.w	r2, r1, r2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ab      	bne.n	8004b96 <HAL_RCC_OscConfig+0x24e>
 8004c3e:	e002      	b.n	8004c46 <HAL_RCC_OscConfig+0x2fe>
 8004c40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 816f 	beq.w	8004f34 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c56:	4bd0      	ldr	r3, [pc, #832]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c62:	4bcd      	ldr	r3, [pc, #820]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d16c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x400>
 8004c6e:	4bca      	ldr	r3, [pc, #808]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d166      	bne.n	8004d48 <HAL_RCC_OscConfig+0x400>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c84:	fa93 f3a3 	rbit	r3, r3
 8004c88:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c90:	fab3 f383 	clz	r3, r3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d102      	bne.n	8004caa <HAL_RCC_OscConfig+0x362>
 8004ca4:	4bbc      	ldr	r3, [pc, #752]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	e013      	b.n	8004cd2 <HAL_RCC_OscConfig+0x38a>
 8004caa:	2302      	movs	r3, #2
 8004cac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cce:	4bb2      	ldr	r3, [pc, #712]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004cd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004cdc:	fa92 f2a2 	rbit	r2, r2
 8004ce0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ce4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ce8:	fab2 f282 	clz	r2, r2
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f002 021f 	and.w	r2, r2, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <HAL_RCC_OscConfig+0x3cc>
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d002      	beq.n	8004d14 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f000 bd1b 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4ba0      	ldr	r3, [pc, #640]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	21f8      	movs	r1, #248	; 0xf8
 8004d24:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d2c:	fa91 f1a1 	rbit	r1, r1
 8004d30:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d34:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d38:	fab1 f181 	clz	r1, r1
 8004d3c:	b2c9      	uxtb	r1, r1
 8004d3e:	408b      	lsls	r3, r1
 8004d40:	4995      	ldr	r1, [pc, #596]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	e0f5      	b.n	8004f34 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8085 	beq.w	8004e5e <HAL_RCC_OscConfig+0x516>
 8004d54:	2301      	movs	r3, #1
 8004d56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fd fef2 	bl	8002b68 <HAL_GetTick>
 8004d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fd feed 	bl	8002b68 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	f000 bcd5 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004db2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d102      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x488>
 8004dca:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	e013      	b.n	8004df8 <HAL_RCC_OscConfig+0x4b0>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004de2:	2302      	movs	r3, #2
 8004de4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004de8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004df4:	4b68      	ldr	r3, [pc, #416]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004dfe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e02:	fa92 f2a2 	rbit	r2, r2
 8004e06:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e0e:	fab2 f282 	clz	r2, r2
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	f042 0220 	orr.w	r2, r2, #32
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	f002 021f 	and.w	r2, r2, #31
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f202 	lsl.w	r2, r1, r2
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0af      	beq.n	8004d8a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	21f8      	movs	r1, #248	; 0xf8
 8004e3a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e42:	fa91 f1a1 	rbit	r1, r1
 8004e46:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e4a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e4e:	fab1 f181 	clz	r1, r1
 8004e52:	b2c9      	uxtb	r1, r1
 8004e54:	408b      	lsls	r3, r1
 8004e56:	4950      	ldr	r1, [pc, #320]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	e06a      	b.n	8004f34 <HAL_RCC_OscConfig+0x5ec>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e74:	fab3 f383 	clz	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	461a      	mov	r2, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8a:	f7fd fe6d 	bl	8002b68 <HAL_GetTick>
 8004e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e94:	f7fd fe68 	bl	8002b68 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d902      	bls.n	8004eaa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	f000 bc50 	b.w	800574a <HAL_RCC_OscConfig+0xe02>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0x592>
 8004ed4:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e013      	b.n	8004f02 <HAL_RCC_OscConfig+0x5ba>
 8004eda:	2302      	movs	r3, #2
 8004edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eec:	2302      	movs	r3, #2
 8004eee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ef2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_RCC_OscConfig+0x650>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2202      	movs	r2, #2
 8004f04:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f0c:	fa92 f2a2 	rbit	r2, r2
 8004f10:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f18:	fab2 f282 	clz	r2, r2
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	f042 0220 	orr.w	r2, r2, #32
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f002 021f 	and.w	r2, r2, #31
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1af      	bne.n	8004e94 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80da 	beq.w	80050f8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d069      	beq.n	8005022 <HAL_RCC_OscConfig+0x6da>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f58:	fa93 f3a3 	rbit	r3, r3
 8004f5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f64:	fab3 f383 	clz	r3, r3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_OscConfig+0x654>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	461a      	mov	r2, r3
 8004f74:	2301      	movs	r3, #1
 8004f76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7fd fdf6 	bl	8002b68 <HAL_GetTick>
 8004f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f80:	e00e      	b.n	8004fa0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fd fdf1 	bl	8002b68 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d906      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e3d9      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	10908120 	.word	0x10908120
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004faa:	fa93 f3a3 	rbit	r3, r3
 8004fae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	fa93 f2a3 	rbit	r2, r3
 8004fc4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004fce:	2202      	movs	r2, #2
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	fa93 f2a3 	rbit	r2, r3
 8004fdc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004fe0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	4ba5      	ldr	r3, [pc, #660]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004fea:	2102      	movs	r1, #2
 8004fec:	6019      	str	r1, [r3, #0]
 8004fee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	fa93 f1a3 	rbit	r1, r3
 8004ff8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004ffc:	6019      	str	r1, [r3, #0]
  return result;
 8004ffe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0b0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x63a>
 8005020:	e06a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7b0>
 8005022:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	fa93 f2a3 	rbit	r2, r3
 8005034:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005038:	601a      	str	r2, [r3, #0]
  return result;
 800503a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800503e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	fab3 f383 	clz	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	4b8c      	ldr	r3, [pc, #560]	; (800527c <HAL_RCC_OscConfig+0x934>)
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	461a      	mov	r2, r3
 8005050:	2300      	movs	r3, #0
 8005052:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005054:	f7fd fd88 	bl	8002b68 <HAL_GetTick>
 8005058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	e009      	b.n	8005072 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505e:	f7fd fd83 	bl	8002b68 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e36b      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 8005072:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005076:	2202      	movs	r2, #2
 8005078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800508e:	2202      	movs	r2, #2
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fa93 f2a3 	rbit	r2, r3
 800509c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050a6:	2202      	movs	r2, #2
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	fa93 f2a3 	rbit	r2, r3
 80050b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ba:	4b6f      	ldr	r3, [pc, #444]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80050bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050c2:	2102      	movs	r1, #2
 80050c4:	6019      	str	r1, [r3, #0]
 80050c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	fa93 f1a3 	rbit	r1, r3
 80050d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050d4:	6019      	str	r1, [r3, #0]
  return result;
 80050d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1b2      	bne.n	800505e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8158 	beq.w	80053b8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b5a      	ldr	r3, [pc, #360]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d112      	bne.n	8005140 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b57      	ldr	r3, [pc, #348]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4a56      	ldr	r2, [pc, #344]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	61d3      	str	r3, [r2, #28]
 8005126:	4b54      	ldr	r3, [pc, #336]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <HAL_RCC_OscConfig+0x938>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11a      	bne.n	8005182 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514c:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <HAL_RCC_OscConfig+0x938>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4b      	ldr	r2, [pc, #300]	; (8005280 <HAL_RCC_OscConfig+0x938>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005156:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005158:	f7fd fd06 	bl	8002b68 <HAL_GetTick>
 800515c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005160:	e009      	b.n	8005176 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005162:	f7fd fd01 	bl	8002b68 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e2e9      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b42      	ldr	r3, [pc, #264]	; (8005280 <HAL_RCC_OscConfig+0x938>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ef      	beq.n	8005162 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d106      	bne.n	800519a <HAL_RCC_OscConfig+0x852>
 800518c:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4a39      	ldr	r2, [pc, #228]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	6213      	str	r3, [r2, #32]
 8005198:	e02f      	b.n	80051fa <HAL_RCC_OscConfig+0x8b2>
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10c      	bne.n	80051be <HAL_RCC_OscConfig+0x876>
 80051a4:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	4a33      	ldr	r2, [pc, #204]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6213      	str	r3, [r2, #32]
 80051b0:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051b6:	f023 0304 	bic.w	r3, r3, #4
 80051ba:	6213      	str	r3, [r2, #32]
 80051bc:	e01d      	b.n	80051fa <HAL_RCC_OscConfig+0x8b2>
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d10c      	bne.n	80051e2 <HAL_RCC_OscConfig+0x89a>
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051ce:	f043 0304 	orr.w	r3, r3, #4
 80051d2:	6213      	str	r3, [r2, #32]
 80051d4:	4b28      	ldr	r3, [pc, #160]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4a27      	ldr	r2, [pc, #156]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6213      	str	r3, [r2, #32]
 80051e0:	e00b      	b.n	80051fa <HAL_RCC_OscConfig+0x8b2>
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a24      	ldr	r2, [pc, #144]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6213      	str	r3, [r2, #32]
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d06b      	beq.n	80052dc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fd fcb0 	bl	8002b68 <HAL_GetTick>
 8005208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	e00b      	b.n	8005226 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fd fcab 	bl	8002b68 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e291      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 8005226:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	fa93 f2a3 	rbit	r2, r3
 8005238:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005242:	2202      	movs	r2, #2
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	fa93 f2a3 	rbit	r2, r3
 8005250:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005254:	601a      	str	r2, [r3, #0]
  return result;
 8005256:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800525a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d109      	bne.n	8005284 <HAL_RCC_OscConfig+0x93c>
 8005270:	4b01      	ldr	r3, [pc, #4]	; (8005278 <HAL_RCC_OscConfig+0x930>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	e014      	b.n	80052a0 <HAL_RCC_OscConfig+0x958>
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	10908120 	.word	0x10908120
 8005280:	40007000 	.word	0x40007000
 8005284:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005288:	2202      	movs	r2, #2
 800528a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	4bbb      	ldr	r3, [pc, #748]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052a4:	2102      	movs	r1, #2
 80052a6:	6011      	str	r1, [r2, #0]
 80052a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	fa92 f1a2 	rbit	r1, r2
 80052b2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052b6:	6011      	str	r1, [r2, #0]
  return result;
 80052b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	fab2 f282 	clz	r2, r2
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	f002 021f 	and.w	r2, r2, #31
 80052ce:	2101      	movs	r1, #1
 80052d0:	fa01 f202 	lsl.w	r2, r1, r2
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d099      	beq.n	800520e <HAL_RCC_OscConfig+0x8c6>
 80052da:	e063      	b.n	80053a4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052dc:	f7fd fc44 	bl	8002b68 <HAL_GetTick>
 80052e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e4:	e00b      	b.n	80052fe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fd fc3f 	bl	8002b68 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e225      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 80052fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005302:	2202      	movs	r2, #2
 8005304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	fa93 f2a3 	rbit	r2, r3
 8005310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800531a:	2202      	movs	r2, #2
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fa93 f2a3 	rbit	r2, r3
 8005328:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800532c:	601a      	str	r2, [r3, #0]
  return result;
 800532e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005332:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f043 0302 	orr.w	r3, r3, #2
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d102      	bne.n	800534e <HAL_RCC_OscConfig+0xa06>
 8005348:	4b90      	ldr	r3, [pc, #576]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	e00d      	b.n	800536a <HAL_RCC_OscConfig+0xa22>
 800534e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005352:	2202      	movs	r2, #2
 8005354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005356:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fa93 f2a3 	rbit	r2, r3
 8005360:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800536e:	2102      	movs	r1, #2
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	fa92 f1a2 	rbit	r1, r2
 800537c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005380:	6011      	str	r1, [r2, #0]
  return result;
 8005382:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	fab2 f282 	clz	r2, r2
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	f002 021f 	and.w	r2, r2, #31
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f202 	lsl.w	r2, r1, r2
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1a0      	bne.n	80052e6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b77      	ldr	r3, [pc, #476]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4a76      	ldr	r2, [pc, #472]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 81c2 	beq.w	8005748 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053c4:	4b71      	ldr	r3, [pc, #452]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	f000 819c 	beq.w	800570a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	f040 8114 	bne.w	8005606 <HAL_RCC_OscConfig+0xcbe>
 80053de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80053e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	fa93 f2a3 	rbit	r2, r3
 80053f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80053f6:	601a      	str	r2, [r3, #0]
  return result;
 80053f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80053fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	461a      	mov	r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd fba8 	bl	8002b68 <HAL_GetTick>
 8005418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800541c:	e009      	b.n	8005432 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541e:	f7fd fba3 	bl	8002b68 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e18b      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 8005432:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800543a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	fa93 f2a3 	rbit	r2, r3
 8005446:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800544a:	601a      	str	r2, [r3, #0]
  return result;
 800544c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <HAL_RCC_OscConfig+0xb24>
 8005466:	4b49      	ldr	r3, [pc, #292]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	e01b      	b.n	80054a4 <HAL_RCC_OscConfig+0xb5c>
 800546c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	fa93 f2a3 	rbit	r2, r3
 8005480:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800548a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	fa93 f2a3 	rbit	r2, r3
 800549a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	4b3a      	ldr	r3, [pc, #232]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	fa92 f1a2 	rbit	r1, r2
 80054b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054bc:	6011      	str	r1, [r2, #0]
  return result;
 80054be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	fab2 f282 	clz	r2, r2
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f002 021f 	and.w	r2, r2, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f202 	lsl.w	r2, r1, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d19e      	bne.n	800541e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e0:	4b2a      	ldr	r3, [pc, #168]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	4925      	ldr	r1, [pc, #148]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
 80054fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	fa93 f2a3 	rbit	r2, r3
 8005510:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005514:	601a      	str	r2, [r3, #0]
  return result;
 8005516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800551a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800551c:	fab3 f383 	clz	r3, r3
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005526:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	461a      	mov	r2, r3
 800552e:	2301      	movs	r3, #1
 8005530:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005532:	f7fd fb19 	bl	8002b68 <HAL_GetTick>
 8005536:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800553a:	e009      	b.n	8005550 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553c:	f7fd fb14 	bl	8002b68 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e0fc      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 8005550:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	fa93 f2a3 	rbit	r2, r3
 8005564:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005568:	601a      	str	r2, [r3, #0]
  return result;
 800556a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800556e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0xc48>
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <HAL_RCC_OscConfig+0xc44>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	e01e      	b.n	80055c8 <HAL_RCC_OscConfig+0xc80>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
 8005590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fa93 f2a3 	rbit	r2, r3
 80055a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	fa93 f2a3 	rbit	r2, r3
 80055be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	4b63      	ldr	r3, [pc, #396]	; (8005754 <HAL_RCC_OscConfig+0xe0c>)
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	fa92 f1a2 	rbit	r1, r2
 80055dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055e0:	6011      	str	r1, [r2, #0]
  return result;
 80055e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	fab2 f282 	clz	r2, r2
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	f042 0220 	orr.w	r2, r2, #32
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	f002 021f 	and.w	r2, r2, #31
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d09b      	beq.n	800553c <HAL_RCC_OscConfig+0xbf4>
 8005604:	e0a0      	b.n	8005748 <HAL_RCC_OscConfig+0xe00>
 8005606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800560a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800560e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fa93 f2a3 	rbit	r2, r3
 800561a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800561e:	601a      	str	r2, [r3, #0]
  return result;
 8005620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005624:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fd fa94 	bl	8002b68 <HAL_GetTick>
 8005640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005644:	e009      	b.n	800565a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005646:	f7fd fa8f 	bl	8002b68 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e077      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
 800565a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800565e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	fa93 f2a3 	rbit	r2, r3
 800566e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005672:	601a      	str	r2, [r3, #0]
  return result;
 8005674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <HAL_RCC_OscConfig+0xd4c>
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <HAL_RCC_OscConfig+0xe0c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	e01b      	b.n	80056cc <HAL_RCC_OscConfig+0xd84>
 8005694:	f107 0320 	add.w	r3, r7, #32
 8005698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800569c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	f107 0320 	add.w	r3, r7, #32
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	fa93 f2a3 	rbit	r2, r3
 80056a8:	f107 031c 	add.w	r3, r7, #28
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f107 0318 	add.w	r3, r7, #24
 80056b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f107 0318 	add.w	r3, r7, #24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	fa93 f2a3 	rbit	r2, r3
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	4b22      	ldr	r3, [pc, #136]	; (8005754 <HAL_RCC_OscConfig+0xe0c>)
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	f107 0210 	add.w	r2, r7, #16
 80056d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	f107 0210 	add.w	r2, r7, #16
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	fa92 f1a2 	rbit	r1, r2
 80056e0:	f107 020c 	add.w	r2, r7, #12
 80056e4:	6011      	str	r1, [r2, #0]
  return result;
 80056e6:	f107 020c 	add.w	r2, r7, #12
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	fab2 f282 	clz	r2, r2
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	f042 0220 	orr.w	r2, r2, #32
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	f002 021f 	and.w	r2, r2, #31
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005702:	4013      	ands	r3, r2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d19e      	bne.n	8005646 <HAL_RCC_OscConfig+0xcfe>
 8005708:	e01e      	b.n	8005748 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e018      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <HAL_RCC_OscConfig+0xe0c>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005720:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	429a      	cmp	r2, r3
 8005730:	d108      	bne.n	8005744 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005732:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000

08005758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b09e      	sub	sp, #120	; 0x78
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e162      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b90      	ldr	r3, [pc, #576]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d910      	bls.n	80057a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b8d      	ldr	r3, [pc, #564]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 0207 	bic.w	r2, r3, #7
 8005786:	498b      	ldr	r1, [pc, #556]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b89      	ldr	r3, [pc, #548]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e14a      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ac:	4b82      	ldr	r3, [pc, #520]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	497f      	ldr	r1, [pc, #508]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80dc 	beq.w	8005984 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d13c      	bne.n	800584e <HAL_RCC_ClockConfig+0xf6>
 80057d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80057e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_ClockConfig+0xa6>
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	e00f      	b.n	800581e <HAL_RCC_ClockConfig+0xc6>
 80057fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	667b      	str	r3, [r7, #100]	; 0x64
 800580c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005810:	663b      	str	r3, [r7, #96]	; 0x60
 8005812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005814:	fa93 f3a3 	rbit	r3, r3
 8005818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005822:	65ba      	str	r2, [r7, #88]	; 0x58
 8005824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005826:	fa92 f2a2 	rbit	r2, r2
 800582a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800582c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800582e:	fab2 f282 	clz	r2, r2
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	f042 0220 	orr.w	r2, r2, #32
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f002 021f 	and.w	r2, r2, #31
 800583e:	2101      	movs	r1, #1
 8005840:	fa01 f202 	lsl.w	r2, r1, r2
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d17b      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0f3      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d13c      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x178>
 8005856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <HAL_RCC_ClockConfig+0x128>
 800587a:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	e00f      	b.n	80058a0 <HAL_RCC_ClockConfig+0x148>
 8005880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	fa93 f3a3 	rbit	r3, r3
 800588c:	647b      	str	r3, [r7, #68]	; 0x44
 800588e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005892:	643b      	str	r3, [r7, #64]	; 0x40
 8005894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589c:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80058a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a8:	fa92 f2a2 	rbit	r2, r2
 80058ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	fab2 f282 	clz	r2, r2
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	f042 0220 	orr.w	r2, r2, #32
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	f002 021f 	and.w	r2, r2, #31
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f202 	lsl.w	r2, r1, r2
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d13a      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b2      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
 80058d0:	2302      	movs	r3, #2
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x1a0>
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	e00d      	b.n	8005914 <HAL_RCC_ClockConfig+0x1bc>
 80058f8:	2302      	movs	r3, #2
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	2302      	movs	r3, #2
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	fa93 f3a3 	rbit	r3, r3
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2202      	movs	r2, #2
 8005916:	61ba      	str	r2, [r7, #24]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	fa92 f2a2 	rbit	r2, r2
 800591e:	617a      	str	r2, [r7, #20]
  return result;
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	fab2 f282 	clz	r2, r2
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	f042 0220 	orr.w	r2, r2, #32
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	f002 021f 	and.w	r2, r2, #31
 8005932:	2101      	movs	r1, #1
 8005934:	fa01 f202 	lsl.w	r2, r1, r2
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e079      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f023 0203 	bic.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	491a      	ldr	r1, [pc, #104]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005954:	f7fd f908 	bl	8002b68 <HAL_GetTick>
 8005958:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fd f904 	bl	8002b68 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e061      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 020c 	and.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d1eb      	bne.n	800595c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d214      	bcs.n	80059bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 0207 	bic.w	r2, r3, #7
 800599a:	4906      	ldr	r1, [pc, #24]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_RCC_ClockConfig+0x25c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e040      	b.n	8005a36 <HAL_RCC_ClockConfig+0x2de>
 80059b4:	40022000 	.word	0x40022000
 80059b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCC_ClockConfig+0x2e8>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	491a      	ldr	r1, [pc, #104]	; (8005a40 <HAL_RCC_ClockConfig+0x2e8>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <HAL_RCC_ClockConfig+0x2e8>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4912      	ldr	r1, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x2e8>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059fa:	f000 f829 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80059fe:	4601      	mov	r1, r0
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_RCC_ClockConfig+0x2e8>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a08:	22f0      	movs	r2, #240	; 0xf0
 8005a0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	fa92 f2a2 	rbit	r2, r2
 8005a12:	60fa      	str	r2, [r7, #12]
  return result;
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	fab2 f282 	clz	r2, r2
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	40d3      	lsrs	r3, r2
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x2ec>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	fa21 f303 	lsr.w	r3, r1, r3
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <HAL_RCC_ClockConfig+0x2f0>)
 8005a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <HAL_RCC_ClockConfig+0x2f4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fd f856 	bl	8002ae0 <HAL_InitTick>
  
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3778      	adds	r7, #120	; 0x78
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	08007c30 	.word	0x08007c30
 8005a48:	20000024 	.word	0x20000024
 8005a4c:	20000028 	.word	0x20000028

08005a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b08b      	sub	sp, #44	; 0x2c
 8005a54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a6a:	4b29      	ldr	r3, [pc, #164]	; (8005b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d002      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x30>
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x36>
 8005a7e:	e03c      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a80:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a82:	623b      	str	r3, [r7, #32]
      break;
 8005a84:	e03c      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	fa92 f2a2 	rbit	r2, r2
 8005a98:	607a      	str	r2, [r7, #4]
  return result;
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	fab2 f282 	clz	r2, r2
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	40d3      	lsrs	r3, r2
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	220f      	movs	r2, #15
 8005ab4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	fa92 f2a2 	rbit	r2, r2
 8005abc:	60fa      	str	r2, [r7, #12]
  return result;
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	fab2 f282 	clz	r2, r2
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	40d3      	lsrs	r3, r2
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005aca:	5cd3      	ldrb	r3, [r2, r3]
 8005acc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ad8:	4a0e      	ldr	r2, [pc, #56]	; (8005b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae8:	e004      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	623b      	str	r3, [r7, #32]
      break;
 8005af8:	e002      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005afc:	623b      	str	r3, [r7, #32]
      break;
 8005afe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	372c      	adds	r7, #44	; 0x2c
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	007a1200 	.word	0x007a1200
 8005b18:	08007c48 	.word	0x08007c48
 8005b1c:	08007c58 	.word	0x08007c58
 8005b20:	003d0900 	.word	0x003d0900

08005b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000024 	.word	0x20000024

08005b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b42:	f7ff ffef 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b46:	4601      	mov	r1, r0
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	fa92 f2a2 	rbit	r2, r2
 8005b5c:	603a      	str	r2, [r7, #0]
  return result;
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	fab2 f282 	clz	r2, r2
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	40d3      	lsrs	r3, r2
 8005b68:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	08007c40 	.word	0x08007c40

08005b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b86:	f7ff ffcd 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005b94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	fa92 f2a2 	rbit	r2, r2
 8005ba0:	603a      	str	r2, [r7, #0]
  return result;
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	fab2 f282 	clz	r2, r2
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	40d3      	lsrs	r3, r2
 8005bac:	4a04      	ldr	r2, [pc, #16]	; (8005bc0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	08007c40 	.word	0x08007c40

08005bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b092      	sub	sp, #72	; 0x48
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80d7 	beq.w	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be8:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10e      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf4:	4b4b      	ldr	r3, [pc, #300]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	61d3      	str	r3, [r2, #28]
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c12:	4b45      	ldr	r3, [pc, #276]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d118      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a41      	ldr	r2, [pc, #260]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c2a:	f7fc ff9d 	bl	8002b68 <HAL_GetTick>
 8005c2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c32:	f7fc ff99 	bl	8002b68 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b64      	cmp	r3, #100	; 0x64
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e169      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c50:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8084 	beq.w	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d07c      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	fa93 f3a3 	rbit	r3, r3
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cae:	fab3 f383 	clz	r3, r3
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04b      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd2:	f7fc ff49 	bl	8002b68 <HAL_GetTick>
 8005cd6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7fc ff45 	bl	8002b68 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e113      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	623b      	str	r3, [r7, #32]
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	fa93 f3a3 	rbit	r3, r3
 8005d06:	61fb      	str	r3, [r7, #28]
  return result;
 8005d08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d108      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d1e:	4b01      	ldr	r3, [pc, #4]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	e00d      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	10908100 	.word	0x10908100
 8005d30:	2302      	movs	r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	4b78      	ldr	r3, [pc, #480]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2202      	movs	r2, #2
 8005d42:	613a      	str	r2, [r7, #16]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	fa92 f2a2 	rbit	r2, r2
 8005d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	fab2 f282 	clz	r2, r2
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	f002 021f 	and.w	r2, r2, #31
 8005d5e:	2101      	movs	r1, #1
 8005d60:	fa01 f202 	lsl.w	r2, r1, r2
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0b7      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d6a:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	496a      	ldr	r1, [pc, #424]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d84:	4b66      	ldr	r3, [pc, #408]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	4a65      	ldr	r2, [pc, #404]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d9c:	4b60      	ldr	r3, [pc, #384]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	f023 0203 	bic.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	495d      	ldr	r1, [pc, #372]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dba:	4b59      	ldr	r3, [pc, #356]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4956      	ldr	r1, [pc, #344]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd8:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	494e      	ldr	r1, [pc, #312]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005df6:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f023 0210 	bic.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	4947      	ldr	r1, [pc, #284]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e14:	4b42      	ldr	r3, [pc, #264]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	493f      	ldr	r1, [pc, #252]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e32:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f023 0220 	bic.w	r2, r3, #32
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	4938      	ldr	r1, [pc, #224]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e50:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	4930      	ldr	r1, [pc, #192]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	4929      	ldr	r1, [pc, #164]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e8c:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4921      	ldr	r1, [pc, #132]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	491a      	ldr	r1, [pc, #104]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	4912      	ldr	r1, [pc, #72]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	490b      	ldr	r1, [pc, #44]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	4903      	ldr	r1, [pc, #12]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3748      	adds	r7, #72	; 0x48
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40021000 	.word	0x40021000

08005f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e084      	b.n	8006040 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fc fb8d 	bl	8002670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f76:	d902      	bls.n	8005f7e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e002      	b.n	8005f84 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f8c:	d007      	beq.n	8005f9e <HAL_SPI_Init+0x7a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fae:	d903      	bls.n	8005fb8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb6:	e002      	b.n	8005fbe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	ea42 0103 	orr.w	r1, r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0204 	and.w	r2, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	ea42 0103 	orr.w	r1, r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	099b      	lsrs	r3, r3, #6
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10f      	bne.n	800608c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	099b      	lsrs	r3, r3, #6
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
    return;
 800608a:	e0d8      	b.n	800623e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_SPI_IRQHandler+0x66>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
    return;
 80060ac:	e0c7      	b.n	800623e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <HAL_SPI_IRQHandler+0x8c>
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80b5 	beq.w	800623e <HAL_SPI_IRQHandler+0x1f6>
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80ae 	beq.w	800623e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	099b      	lsrs	r3, r3, #6
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d023      	beq.n	8006136 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d011      	beq.n	800611e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	f043 0204 	orr.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	e00b      	b.n	8006136 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	693b      	ldr	r3, [r7, #16]
        return;
 8006134:	e083      	b.n	800623e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	f043 0201 	orr.w	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00c      	beq.n	8006192 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	f043 0208 	orr.w	r2, r3, #8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	2b00      	cmp	r3, #0
 8006198:	d050      	beq.n	800623c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_SPI_IRQHandler+0x17e>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d034      	beq.n	8006230 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0203 	bic.w	r2, r2, #3
 80061d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d011      	beq.n	8006202 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_SPI_IRQHandler+0x1fc>)
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd feca 	bl	8003f84 <HAL_DMA_Abort_IT>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <HAL_SPI_IRQHandler+0x1fc>)
 8006210:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd feb4 	bl	8003f84 <HAL_DMA_Abort_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800622e:	e003      	b.n	8006238 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f809 	bl	8006248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006236:	e000      	b.n	800623a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006238:	bf00      	nop
    return;
 800623a:	bf00      	nop
 800623c:	bf00      	nop
  }
}
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	0800625d 	.word	0x0800625d

08006248 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ffe5 	bl	8006248 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e01d      	b.n	80062d4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fc fa29 	bl	8002704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f000 f9a5 	bl	8006614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <HAL_TIM_Base_Start_IT+0x50>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b06      	cmp	r3, #6
 8006304:	d00b      	beq.n	800631e <HAL_TIM_Base_Start_IT+0x42>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d007      	beq.n	800631e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	00010007 	.word	0x00010007

08006330 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <HAL_TIM_Base_Stop_IT+0x48>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	f240 4344 	movw	r3, #1092	; 0x444
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_TIM_Base_Stop_IT+0x48>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d122      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d11b      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0202 	mvn.w	r2, #2
 80063b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f905 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 80063ce:	e005      	b.n	80063dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f8f7 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f908 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d122      	bne.n	8006436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d11b      	bne.n	8006436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0204 	mvn.w	r2, #4
 8006406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8db 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006422:	e005      	b.n	8006430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8cd 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8de 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d122      	bne.n	800648a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b08      	cmp	r3, #8
 8006450:	d11b      	bne.n	800648a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f06f 0208 	mvn.w	r2, #8
 800645a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2204      	movs	r2, #4
 8006460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8b1 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006476:	e005      	b.n	8006484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8a3 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8b4 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b10      	cmp	r3, #16
 8006496:	d122      	bne.n	80064de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b10      	cmp	r3, #16
 80064a4:	d11b      	bne.n	80064de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f06f 0210 	mvn.w	r2, #16
 80064ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2208      	movs	r2, #8
 80064b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f887 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 80064ca:	e005      	b.n	80064d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f879 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f88a 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10e      	bne.n	800650a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d107      	bne.n	800650a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f06f 0201 	mvn.w	r2, #1
 8006502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fb fc25 	bl	8001d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d10e      	bne.n	8006536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d107      	bne.n	8006536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800652e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f989 	bl	8006848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d10e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d107      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800655c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f97c 	bl	800685c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d10e      	bne.n	8006590 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d107      	bne.n	8006590 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f838 	bl	8006600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b20      	cmp	r3, #32
 800659c:	d10e      	bne.n	80065bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d107      	bne.n	80065bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0220 	mvn.w	r2, #32
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f93c 	bl	8006834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3c      	ldr	r2, [pc, #240]	; (8006718 <TIM_Base_SetConfig+0x104>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00f      	beq.n	800664c <TIM_Base_SetConfig+0x38>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d00b      	beq.n	800664c <TIM_Base_SetConfig+0x38>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a39      	ldr	r2, [pc, #228]	; (800671c <TIM_Base_SetConfig+0x108>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <TIM_Base_SetConfig+0x38>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a38      	ldr	r2, [pc, #224]	; (8006720 <TIM_Base_SetConfig+0x10c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_Base_SetConfig+0x38>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a37      	ldr	r2, [pc, #220]	; (8006724 <TIM_Base_SetConfig+0x110>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d108      	bne.n	800665e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2d      	ldr	r2, [pc, #180]	; (8006718 <TIM_Base_SetConfig+0x104>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01b      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d017      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2a      	ldr	r2, [pc, #168]	; (800671c <TIM_Base_SetConfig+0x108>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a29      	ldr	r2, [pc, #164]	; (8006720 <TIM_Base_SetConfig+0x10c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00f      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a28      	ldr	r2, [pc, #160]	; (8006724 <TIM_Base_SetConfig+0x110>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00b      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a27      	ldr	r2, [pc, #156]	; (8006728 <TIM_Base_SetConfig+0x114>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <TIM_Base_SetConfig+0x118>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_Base_SetConfig+0x8a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a25      	ldr	r2, [pc, #148]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d108      	bne.n	80066b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <TIM_Base_SetConfig+0x104>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00f      	beq.n	80066fc <TIM_Base_SetConfig+0xe8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a11      	ldr	r2, [pc, #68]	; (8006724 <TIM_Base_SetConfig+0x110>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_Base_SetConfig+0xe8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <TIM_Base_SetConfig+0x114>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_Base_SetConfig+0xe8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0f      	ldr	r2, [pc, #60]	; (800672c <TIM_Base_SetConfig+0x118>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0xe8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d103      	bne.n	8006704 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	615a      	str	r2, [r3, #20]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e063      	b.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d108      	bne.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d018      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d013      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a18      	ldr	r2, [pc, #96]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a12      	ldr	r2, [pc, #72]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d10c      	bne.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40014000 	.word	0x40014000

08006834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e040      	b.n	8006904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb ff5c 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2224      	movs	r2, #36	; 0x24
 800689c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb92 	bl	8006fd8 <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fda0 	bl	800740c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fe27 	bl	8007550 <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006920:	2b20      	cmp	r3, #32
 8006922:	f040 8081 	bne.w	8006a28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_UART_Transmit+0x26>
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e079      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UART_Transmit+0x38>
 8006940:	2302      	movs	r3, #2
 8006942:	e072      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2221      	movs	r2, #33	; 0x21
 8006956:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006958:	f7fc f906 	bl	8002b68 <HAL_GetTick>
 800695c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d108      	bne.n	800698a <HAL_UART_Transmit+0x7e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	e003      	b.n	8006992 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006992:	e02d      	b.n	80069f0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fe1b 	bl	80075da <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e03d      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c0:	b292      	uxth	r2, r2
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	3302      	adds	r3, #2
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e008      	b.n	80069de <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	b292      	uxth	r2, r2
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	3301      	adds	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1cb      	bne.n	8006994 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fde7 	bl	80075da <UART_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e009      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d144      	bne.n	8006ad4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_UART_Transmit_IT+0x22>
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e03d      	b.n	8006ad6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_UART_Transmit_IT+0x34>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e036      	b.n	8006ad6 <HAL_UART_Transmit_IT+0xa2>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2221      	movs	r2, #33	; 0x21
 8006a96:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_UART_Transmit_IT+0x7e>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a0d      	ldr	r2, [pc, #52]	; (8006ae4 <HAL_UART_Transmit_IT+0xb0>)
 8006aae:	665a      	str	r2, [r3, #100]	; 0x64
 8006ab0:	e002      	b.n	8006ab8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <HAL_UART_Transmit_IT+0xb4>)
 8006ab6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ace:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	080078d1 	.word	0x080078d1
 8006ae8:	0800785d 	.word	0x0800785d

08006aec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d176      	bne.n	8006bf0 <HAL_UART_Receive_IT+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_Receive_IT+0x22>
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e06f      	b.n	8006bf2 <HAL_UART_Receive_IT+0x106>
    }

    __HAL_LOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Receive_IT+0x34>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e068      	b.n	8006bf2 <HAL_UART_Receive_IT+0x106>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d10e      	bne.n	8006b6c <HAL_UART_Receive_IT+0x80>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <HAL_UART_Receive_IT+0x76>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b60:	e01a      	b.n	8006b98 <HAL_UART_Receive_IT+0xac>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b6a:	e015      	b.n	8006b98 <HAL_UART_Receive_IT+0xac>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <HAL_UART_Receive_IT+0xa4>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <HAL_UART_Receive_IT+0x9a>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b84:	e008      	b.n	8006b98 <HAL_UART_Receive_IT+0xac>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	227f      	movs	r2, #127	; 0x7f
 8006b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b8e:	e003      	b.n	8006b98 <HAL_UART_Receive_IT+0xac>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2222      	movs	r2, #34	; 0x22
 8006ba2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d107      	bne.n	8006bce <HAL_UART_Receive_IT+0xe2>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d103      	bne.n	8006bce <HAL_UART_Receive_IT+0xe2>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a0d      	ldr	r2, [pc, #52]	; (8006c00 <HAL_UART_Receive_IT+0x114>)
 8006bca:	661a      	str	r2, [r3, #96]	; 0x60
 8006bcc:	e002      	b.n	8006bd4 <HAL_UART_Receive_IT+0xe8>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <HAL_UART_Receive_IT+0x118>)
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006bea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e000      	b.n	8006bf2 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8006bf0:	2302      	movs	r3, #2
  }
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	08007a25 	.word	0x08007a25
 8006c04:	0800797f 	.word	0x0800797f

08006c08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d16c      	bne.n	8006cf8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_UART_Receive_DMA+0x22>
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e065      	b.n	8006cfa <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Receive_DMA+0x34>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e05e      	b.n	8006cfa <HAL_UART_Receive_DMA+0xf2>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2222      	movs	r2, #34	; 0x22
 8006c5c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d02a      	beq.n	8006cbc <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6a:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <HAL_UART_Receive_DMA+0xfc>)
 8006c6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c72:	4a25      	ldr	r2, [pc, #148]	; (8006d08 <HAL_UART_Receive_DMA+0x100>)
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	4a24      	ldr	r2, [pc, #144]	; (8006d0c <HAL_UART_Receive_DMA+0x104>)
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c82:	2200      	movs	r2, #0
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3324      	adds	r3, #36	; 0x24
 8006c90:	4619      	mov	r1, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	461a      	mov	r2, r3
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	f7fd f914 	bl	8003ec6 <HAL_DMA_Start_IT>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e01e      	b.n	8006cfa <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	0800773b 	.word	0x0800773b
 8006d08:	0800779d 	.word	0x0800779d
 8006d0c:	080077b9 	.word	0x080077b9

08006d10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d36:	4013      	ands	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d113      	bne.n	8006d68 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8114 	beq.w	8006f86 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
      }
      return;
 8006d66:	e10e      	b.n	8006f86 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80d6 	beq.w	8006f1c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80cb 	beq.w	8006f1c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <HAL_UART_IRQHandler+0x9e>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da6:	f043 0201 	orr.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xc6>
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dce:	f043 0204 	orr.w	r2, r3, #4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <HAL_UART_IRQHandler+0xee>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2204      	movs	r2, #4
 8006df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df6:	f043 0202 	orr.w	r2, r3, #2
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d013      	beq.n	8006e30 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2208      	movs	r2, #8
 8006e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e28:	f043 0208 	orr.w	r2, r3, #8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00f      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14a>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8093 	beq.w	8006f8a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d004      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d031      	beq.n	8006f0a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fc27 	bl	80076fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d123      	bne.n	8006f02 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed6:	4a30      	ldr	r2, [pc, #192]	; (8006f98 <HAL_UART_IRQHandler+0x288>)
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd f850 	bl	8003f84 <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00e      	b.n	8006f18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f862 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00a      	b.n	8006f18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f85e 	bl	8006fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e006      	b.n	8006f18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f85a 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006f16:	e038      	b.n	8006f8a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	bf00      	nop
    return;
 8006f1a:	e036      	b.n	8006f8a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <HAL_UART_IRQHandler+0x232>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fdc5 	bl	8007aca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f40:	e026      	b.n	8006f90 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00d      	beq.n	8006f68 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d017      	beq.n	8006f8e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
    }
    return;
 8006f66:	e012      	b.n	8006f8e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <HAL_UART_IRQHandler+0x280>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fce5 	bl	800794c <UART_EndTransmit_IT>
    return;
 8006f82:	bf00      	nop
 8006f84:	e004      	b.n	8006f90 <HAL_UART_IRQHandler+0x280>
      return;
 8006f86:	bf00      	nop
 8006f88:	e002      	b.n	8006f90 <HAL_UART_IRQHandler+0x280>
    return;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <HAL_UART_IRQHandler+0x280>
    return;
 8006f8e:	bf00      	nop
  }

}
 8006f90:	3720      	adds	r7, #32
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08007831 	.word	0x08007831

08006f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800700a:	f023 030c 	bic.w	r3, r3, #12
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	6939      	ldr	r1, [r7, #16]
 8007014:	430b      	orrs	r3, r1
 8007016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	430a      	orrs	r2, r1
 8007050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4aa9      	ldr	r2, [pc, #676]	; (80072fc <UART_SetConfig+0x324>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d121      	bne.n	80070a0 <UART_SetConfig+0xc8>
 800705c:	4ba8      	ldr	r3, [pc, #672]	; (8007300 <UART_SetConfig+0x328>)
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	2b03      	cmp	r3, #3
 8007066:	d817      	bhi.n	8007098 <UART_SetConfig+0xc0>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0x98>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007081 	.word	0x08007081
 8007074:	0800708d 	.word	0x0800708d
 8007078:	08007093 	.word	0x08007093
 800707c:	08007087 	.word	0x08007087
 8007080:	2301      	movs	r3, #1
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e0b2      	b.n	80071ec <UART_SetConfig+0x214>
 8007086:	2302      	movs	r3, #2
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	e0af      	b.n	80071ec <UART_SetConfig+0x214>
 800708c:	2304      	movs	r3, #4
 800708e:	77fb      	strb	r3, [r7, #31]
 8007090:	e0ac      	b.n	80071ec <UART_SetConfig+0x214>
 8007092:	2308      	movs	r3, #8
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e0a9      	b.n	80071ec <UART_SetConfig+0x214>
 8007098:	2310      	movs	r3, #16
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	bf00      	nop
 800709e:	e0a5      	b.n	80071ec <UART_SetConfig+0x214>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a97      	ldr	r2, [pc, #604]	; (8007304 <UART_SetConfig+0x32c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d123      	bne.n	80070f2 <UART_SetConfig+0x11a>
 80070aa:	4b95      	ldr	r3, [pc, #596]	; (8007300 <UART_SetConfig+0x328>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d012      	beq.n	80070de <UART_SetConfig+0x106>
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070bc:	d802      	bhi.n	80070c4 <UART_SetConfig+0xec>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <UART_SetConfig+0xfa>
 80070c2:	e012      	b.n	80070ea <UART_SetConfig+0x112>
 80070c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c8:	d00c      	beq.n	80070e4 <UART_SetConfig+0x10c>
 80070ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070ce:	d003      	beq.n	80070d8 <UART_SetConfig+0x100>
 80070d0:	e00b      	b.n	80070ea <UART_SetConfig+0x112>
 80070d2:	2300      	movs	r3, #0
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e089      	b.n	80071ec <UART_SetConfig+0x214>
 80070d8:	2302      	movs	r3, #2
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e086      	b.n	80071ec <UART_SetConfig+0x214>
 80070de:	2304      	movs	r3, #4
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e083      	b.n	80071ec <UART_SetConfig+0x214>
 80070e4:	2308      	movs	r3, #8
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e080      	b.n	80071ec <UART_SetConfig+0x214>
 80070ea:	2310      	movs	r3, #16
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	bf00      	nop
 80070f0:	e07c      	b.n	80071ec <UART_SetConfig+0x214>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a84      	ldr	r2, [pc, #528]	; (8007308 <UART_SetConfig+0x330>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d123      	bne.n	8007144 <UART_SetConfig+0x16c>
 80070fc:	4b80      	ldr	r3, [pc, #512]	; (8007300 <UART_SetConfig+0x328>)
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007108:	d012      	beq.n	8007130 <UART_SetConfig+0x158>
 800710a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800710e:	d802      	bhi.n	8007116 <UART_SetConfig+0x13e>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <UART_SetConfig+0x14c>
 8007114:	e012      	b.n	800713c <UART_SetConfig+0x164>
 8007116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800711a:	d00c      	beq.n	8007136 <UART_SetConfig+0x15e>
 800711c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007120:	d003      	beq.n	800712a <UART_SetConfig+0x152>
 8007122:	e00b      	b.n	800713c <UART_SetConfig+0x164>
 8007124:	2300      	movs	r3, #0
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e060      	b.n	80071ec <UART_SetConfig+0x214>
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e05d      	b.n	80071ec <UART_SetConfig+0x214>
 8007130:	2304      	movs	r3, #4
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e05a      	b.n	80071ec <UART_SetConfig+0x214>
 8007136:	2308      	movs	r3, #8
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e057      	b.n	80071ec <UART_SetConfig+0x214>
 800713c:	2310      	movs	r3, #16
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	bf00      	nop
 8007142:	e053      	b.n	80071ec <UART_SetConfig+0x214>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a70      	ldr	r2, [pc, #448]	; (800730c <UART_SetConfig+0x334>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d123      	bne.n	8007196 <UART_SetConfig+0x1be>
 800714e:	4b6c      	ldr	r3, [pc, #432]	; (8007300 <UART_SetConfig+0x328>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715a:	d012      	beq.n	8007182 <UART_SetConfig+0x1aa>
 800715c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007160:	d802      	bhi.n	8007168 <UART_SetConfig+0x190>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <UART_SetConfig+0x19e>
 8007166:	e012      	b.n	800718e <UART_SetConfig+0x1b6>
 8007168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800716c:	d00c      	beq.n	8007188 <UART_SetConfig+0x1b0>
 800716e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007172:	d003      	beq.n	800717c <UART_SetConfig+0x1a4>
 8007174:	e00b      	b.n	800718e <UART_SetConfig+0x1b6>
 8007176:	2300      	movs	r3, #0
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e037      	b.n	80071ec <UART_SetConfig+0x214>
 800717c:	2302      	movs	r3, #2
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e034      	b.n	80071ec <UART_SetConfig+0x214>
 8007182:	2304      	movs	r3, #4
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e031      	b.n	80071ec <UART_SetConfig+0x214>
 8007188:	2308      	movs	r3, #8
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e02e      	b.n	80071ec <UART_SetConfig+0x214>
 800718e:	2310      	movs	r3, #16
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	bf00      	nop
 8007194:	e02a      	b.n	80071ec <UART_SetConfig+0x214>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5d      	ldr	r2, [pc, #372]	; (8007310 <UART_SetConfig+0x338>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d123      	bne.n	80071e8 <UART_SetConfig+0x210>
 80071a0:	4b57      	ldr	r3, [pc, #348]	; (8007300 <UART_SetConfig+0x328>)
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80071a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ac:	d012      	beq.n	80071d4 <UART_SetConfig+0x1fc>
 80071ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b2:	d802      	bhi.n	80071ba <UART_SetConfig+0x1e2>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <UART_SetConfig+0x1f0>
 80071b8:	e012      	b.n	80071e0 <UART_SetConfig+0x208>
 80071ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071be:	d00c      	beq.n	80071da <UART_SetConfig+0x202>
 80071c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071c4:	d003      	beq.n	80071ce <UART_SetConfig+0x1f6>
 80071c6:	e00b      	b.n	80071e0 <UART_SetConfig+0x208>
 80071c8:	2300      	movs	r3, #0
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e00e      	b.n	80071ec <UART_SetConfig+0x214>
 80071ce:	2302      	movs	r3, #2
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e00b      	b.n	80071ec <UART_SetConfig+0x214>
 80071d4:	2304      	movs	r3, #4
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e008      	b.n	80071ec <UART_SetConfig+0x214>
 80071da:	2308      	movs	r3, #8
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e005      	b.n	80071ec <UART_SetConfig+0x214>
 80071e0:	2310      	movs	r3, #16
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	bf00      	nop
 80071e6:	e001      	b.n	80071ec <UART_SetConfig+0x214>
 80071e8:	2310      	movs	r3, #16
 80071ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	f040 808e 	bne.w	8007314 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80071f8:	7ffb      	ldrb	r3, [r7, #31]
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d85e      	bhi.n	80072bc <UART_SetConfig+0x2e4>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <UART_SetConfig+0x22c>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007249 	.word	0x08007249
 800720c:	08007269 	.word	0x08007269
 8007210:	080072bd 	.word	0x080072bd
 8007214:	08007285 	.word	0x08007285
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072bd 	.word	0x080072bd
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072a5 	.word	0x080072a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe fc88 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 800722c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	005a      	lsls	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	441a      	add	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	61bb      	str	r3, [r7, #24]
        break;
 8007246:	e03c      	b.n	80072c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007248:	f7fe fc9a 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 800724c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	005a      	lsls	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	b29b      	uxth	r3, r3
 8007264:	61bb      	str	r3, [r7, #24]
        break;
 8007266:	e02c      	b.n	80072c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007272:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6852      	ldr	r2, [r2, #4]
 800727a:	fbb3 f3f2 	udiv	r3, r3, r2
 800727e:	b29b      	uxth	r3, r3
 8007280:	61bb      	str	r3, [r7, #24]
        break;
 8007282:	e01e      	b.n	80072c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007284:	f7fe fbe4 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8007288:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	005a      	lsls	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	441a      	add	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	fbb2 f3f3 	udiv	r3, r2, r3
 800729e:	b29b      	uxth	r3, r3
 80072a0:	61bb      	str	r3, [r7, #24]
        break;
 80072a2:	e00e      	b.n	80072c2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	61bb      	str	r3, [r7, #24]
        break;
 80072ba:	e002      	b.n	80072c2 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
        break;
 80072c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b0f      	cmp	r3, #15
 80072c6:	d916      	bls.n	80072f6 <UART_SetConfig+0x31e>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ce:	d212      	bcs.n	80072f6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f023 030f 	bic.w	r3, r3, #15
 80072d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	897b      	ldrh	r3, [r7, #10]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	897a      	ldrh	r2, [r7, #10]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e07e      	b.n	80073f4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	e07b      	b.n	80073f4 <UART_SetConfig+0x41c>
 80072fc:	40013800 	.word	0x40013800
 8007300:	40021000 	.word	0x40021000
 8007304:	40004400 	.word	0x40004400
 8007308:	40004800 	.word	0x40004800
 800730c:	40004c00 	.word	0x40004c00
 8007310:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8007314:	7ffb      	ldrb	r3, [r7, #31]
 8007316:	2b08      	cmp	r3, #8
 8007318:	d85b      	bhi.n	80073d2 <UART_SetConfig+0x3fa>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x348>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007345 	.word	0x08007345
 8007324:	08007363 	.word	0x08007363
 8007328:	08007381 	.word	0x08007381
 800732c:	080073d3 	.word	0x080073d3
 8007330:	0800739d 	.word	0x0800739d
 8007334:	080073d3 	.word	0x080073d3
 8007338:	080073d3 	.word	0x080073d3
 800733c:	080073d3 	.word	0x080073d3
 8007340:	080073bb 	.word	0x080073bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007344:	f7fe fbfa 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8007348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	085a      	lsrs	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	441a      	add	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	fbb2 f3f3 	udiv	r3, r2, r3
 800735c:	b29b      	uxth	r3, r3
 800735e:	61bb      	str	r3, [r7, #24]
        break;
 8007360:	e03a      	b.n	80073d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007362:	f7fe fc0d 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 8007366:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	085a      	lsrs	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	441a      	add	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	61bb      	str	r3, [r7, #24]
        break;
 800737e:	e02b      	b.n	80073d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800738a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6852      	ldr	r2, [r2, #4]
 8007392:	fbb3 f3f2 	udiv	r3, r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	61bb      	str	r3, [r7, #24]
        break;
 800739a:	e01d      	b.n	80073d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739c:	f7fe fb58 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80073a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	085a      	lsrs	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	441a      	add	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	61bb      	str	r3, [r7, #24]
        break;
 80073b8:	e00e      	b.n	80073d8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	61bb      	str	r3, [r7, #24]
        break;
 80073d0:	e002      	b.n	80073d8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]
        break;
 80073d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d908      	bls.n	80073f0 <UART_SetConfig+0x418>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e4:	d204      	bcs.n	80073f0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	e001      	b.n	80073f4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop

0800740c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01a      	beq.n	8007522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750a:	d10a      	bne.n	8007522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800755e:	f7fb fb03 	bl	8002b68 <HAL_GetTick>
 8007562:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b08      	cmp	r3, #8
 8007570:	d10e      	bne.n	8007590 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f82a 	bl	80075da <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e020      	b.n	80075d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b04      	cmp	r3, #4
 800759c:	d10e      	bne.n	80075bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800759e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f814 	bl	80075da <UART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e00a      	b.n	80075d2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ea:	e05d      	b.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d059      	beq.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f4:	f7fb fab8 	bl	8002b68 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	429a      	cmp	r2, r3
 8007602:	d302      	bcc.n	800760a <UART_WaitOnFlagUntilTimeout+0x30>
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d11b      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007618:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e042      	b.n	80076c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02b      	beq.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d123      	bne.n	80076a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007668:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007678:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2220      	movs	r2, #32
 800768e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e00f      	b.n	80076c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69da      	ldr	r2, [r3, #28]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4013      	ands	r3, r2
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d092      	beq.n	80075ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80076e6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007710:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b20      	cmp	r3, #32
 800774e:	d01e      	beq.n	800778e <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007766:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0201 	bic.w	r2, r2, #1
 8007776:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007786:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7fa fac2 	bl	8001d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff fc00 	bl	8006fb0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d109      	bne.n	80077f4 <UART_DMAError+0x3c>
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b21      	cmp	r3, #33	; 0x21
 80077e4:	d106      	bne.n	80077f4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7ff ff6e 	bl	80076d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d109      	bne.n	8007816 <UART_DMAError+0x5e>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b22      	cmp	r3, #34	; 0x22
 8007806:	d106      	bne.n	8007816 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007810:	6978      	ldr	r0, [r7, #20]
 8007812:	f7ff ff72 	bl	80076fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	f043 0210 	orr.w	r2, r3, #16
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007822:	6978      	ldr	r0, [r7, #20]
 8007824:	f7ff fbce 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff fbb8 	bl	8006fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007868:	2b21      	cmp	r3, #33	; 0x21
 800786a:	d12b      	bne.n	80078c4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d110      	bne.n	800789a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007886:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007896:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007898:	e014      	b.n	80078c4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b292      	uxth	r2, r2
 80078a6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078dc:	2b21      	cmp	r3, #33	; 0x21
 80078de:	d12f      	bne.n	8007940 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d110      	bne.n	800790e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078fa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800790c:	e018      	b.n	8007940 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007912:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007920:	b292      	uxth	r2, r2
 8007922:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	1c9a      	adds	r2, r3, #2
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007962:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fb13 	bl	8006f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800798c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007992:	2b22      	cmp	r3, #34	; 0x22
 8007994:	d13a      	bne.n	8007a0c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800799c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800799e:	89bb      	ldrh	r3, [r7, #12]
 80079a0:	b2d9      	uxtb	r1, r3
 80079a2:	89fb      	ldrh	r3, [r7, #14]
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	400a      	ands	r2, r1
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d121      	bne.n	8007a1c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0201 	bic.w	r2, r2, #1
 80079f6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7fa f987 	bl	8001d18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a0a:	e007      	b.n	8007a1c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	619a      	str	r2, [r3, #24]
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a38:	2b22      	cmp	r3, #34	; 0x22
 8007a3a:	d13a      	bne.n	8007ab2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a42:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a48:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a4a:	89ba      	ldrh	r2, [r7, #12]
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	1c9a      	adds	r2, r3, #2
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d121      	bne.n	8007ac2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a8c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fa f934 	bl	8001d18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ab0:	e007      	b.n	8007ac2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0208 	orr.w	r2, r2, #8
 8007ac0:	619a      	str	r2, [r3, #24]
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ae6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007aea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4013      	ands	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b14:	b084      	sub	sp, #16
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	f107 0014 	add.w	r0, r7, #20
 8007b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	b004      	add	sp, #16
 8007b54:	4770      	bx	lr
	...

08007b58 <__libc_init_array>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4e0d      	ldr	r6, [pc, #52]	; (8007b90 <__libc_init_array+0x38>)
 8007b5c:	4c0d      	ldr	r4, [pc, #52]	; (8007b94 <__libc_init_array+0x3c>)
 8007b5e:	1ba4      	subs	r4, r4, r6
 8007b60:	10a4      	asrs	r4, r4, #2
 8007b62:	2500      	movs	r5, #0
 8007b64:	42a5      	cmp	r5, r4
 8007b66:	d109      	bne.n	8007b7c <__libc_init_array+0x24>
 8007b68:	4e0b      	ldr	r6, [pc, #44]	; (8007b98 <__libc_init_array+0x40>)
 8007b6a:	4c0c      	ldr	r4, [pc, #48]	; (8007b9c <__libc_init_array+0x44>)
 8007b6c:	f000 f820 	bl	8007bb0 <_init>
 8007b70:	1ba4      	subs	r4, r4, r6
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	2500      	movs	r5, #0
 8007b76:	42a5      	cmp	r5, r4
 8007b78:	d105      	bne.n	8007b86 <__libc_init_array+0x2e>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b80:	4798      	blx	r3
 8007b82:	3501      	adds	r5, #1
 8007b84:	e7ee      	b.n	8007b64 <__libc_init_array+0xc>
 8007b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b8a:	4798      	blx	r3
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	e7f2      	b.n	8007b76 <__libc_init_array+0x1e>
 8007b90:	08007c68 	.word	0x08007c68
 8007b94:	08007c68 	.word	0x08007c68
 8007b98:	08007c68 	.word	0x08007c68
 8007b9c:	08007c6c 	.word	0x08007c6c

08007ba0 <memset>:
 8007ba0:	4402      	add	r2, r0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d100      	bne.n	8007baa <memset+0xa>
 8007ba8:	4770      	bx	lr
 8007baa:	f803 1b01 	strb.w	r1, [r3], #1
 8007bae:	e7f9      	b.n	8007ba4 <memset+0x4>

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
